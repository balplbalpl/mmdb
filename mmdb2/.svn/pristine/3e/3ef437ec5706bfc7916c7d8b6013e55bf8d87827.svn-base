package com.mmdb.model.security;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.neo4j.graphdb.Direction;

import com.mmdb.core.framework.neo4j.annotation.RelationTo;
import com.mmdb.core.framework.neo4j.annotation.Space;
import com.mmdb.core.framework.neo4j.annotation.Uuid;
import com.mmdb.core.framework.neo4j.entity.NodeEntity;

/**
 * 命名空间为[user]的用户<br>
 * 
 * @author XIE
 */
@Space("user")
public class User extends NodeEntity {
	private static final long serialVersionUID = -6397783880803657383L;
	/**
	 * 用户id（当前分类中唯一,目前是自动生成的）
	 */
	@Uuid
	private String id;
	/**
	 * 用户名称（目前和id保持一致）
	 */
	private String name;
	/**
	 * 用户密码
	 */
	private String password;

	private String email;

	@RelationTo(elementClass = Authorize.class, type = "User->Authorize", direction = Direction.INCOMING)
	private List<Authorize> authorizes = new ArrayList<Authorize>();

	@RelationTo(elementClass = Role.class, type = "User->Role", direction = Direction.INCOMING)
	private List<Role> roles = new ArrayList<Role>();

	@RelationTo(elementClass = UserGroup.class, type = "User->UserGroup", direction = Direction.INCOMING)
	private List<UserGroup> userGroups = new ArrayList<UserGroup>();

	public User() {

	}

	/**
	 * @param username
	 *            姓名
	 * @param password
	 *            邮箱
	 */
	public User(String username, String password) {
		this.id = username;
		this.name = username;
		this.password = password;
	}

	/**
	 * @param id
	 *            工号
	 * @param name
	 *            姓名
	 * @param email
	 *            邮箱
	 */
	public User(String id, String name, String email) {
		this.id = id;
		this.name = name;
		this.email = email;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public List<Authorize> getAuthorizes() {
		return authorizes;
	}

	public void setAuthorizes(List<Authorize> authorizes) {
		this.authorizes = authorizes;
	}

	public List<Role> getRoles() {
		return roles;
	}

	public void setRoles(List<Role> roles) {
		this.roles = roles;
	}

	public List<UserGroup> getUserGroups() {
		return userGroups;
	}

	public void setUserGroups(List<UserGroup> userGroups) {
		this.userGroups = userGroups;
	}

	/**
	 * 获取用户分配的功能
	 */
	public Set<String> getFuns() {
		Set<String> funs = new HashSet<String>();
		List<Role> rs = this.getRoles();
		for (Role r : rs) {
			funs.addAll(r.getFunctions());
		}
		return funs;
	}

	/**
	 * 获取用户的角色列表
	 * 
	 * @return
	 */
	public Set<String> getRolesName() {
		Set<String> names = new HashSet<String>();
		List<UserGroup> userGroups = this.getUserGroups();
		for (UserGroup userGroup : userGroups) {
			List<Role> roSet = userGroup.getRoles();
			for (Role role : roSet) {
				names.add(role.getId());
			}
		}
		for (Role role : this.getRoles()) {
			names.add(role.getId());
		}
		return names;
	}

	/**
	 * 获取用户的视图权限列表
	 * 
	 * @return
	 */
	public Set<String> getAuthorizesName() {
		Set<String> names = new HashSet<String>();
		List<UserGroup> userGroups = this.getUserGroups();
		for (UserGroup userGroup : userGroups) {
			List<Authorize> auths = userGroup.getAuthorizes();
			for (Authorize auth : auths) {
				names.add(auth.getId());
			}
		}
		for (Authorize auth : this.getAuthorizes()) {
			names.add(auth.getId());
		}
		return names;
	}

	public Map<String, Object> asMap() {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("_id_", this.getId());
		map.put("_neo4jid_", this.getId());
		map.put("id", this.getId());
		map.put("name", this.getName());
		map.put("email", this.getEmail());
		map.put("role", this.getRolesName());
		map.put("authorize", this.getAuthorizesName());
		return map;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((email == null) ? 0 : email.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		if (email == null) {
			if (other.email != null)
				return false;
		} else if (!email.equals(other.email))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}

}