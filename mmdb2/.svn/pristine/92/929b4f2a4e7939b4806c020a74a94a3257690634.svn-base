package com.mmdb.buz.db;

import com.mmdb.core.utils.Return;

import java.util.Map;

import org.directwebremoting.io.FileTransfer;

/**
 * 数据库操作
 * Created by XIE on 2015/3/26.
 */
public interface IHandleDataBase {
    /**
     * 测试连接
     *
     * @param dbMap 数据库配置 {id:'',type:'mysql/sqlserver/oracle/db2',url:'',url:'',port:'',database:'',username:'',password:''}
     * @return
     */
    Return testing(Map<String, String> dbMap);

    /**
     * 保存数据源
     *
     * @param dbMap 数据库配置 {id:'',type:'mysql/sqlserver/oracle/db2',url:'',port:'',database:'',username:'',password:'',isRac:true/false}
     * @return
     */
    Return saveDataBaseConfig(Map<String, String> dbMap);

    /**
     * 更新数据源
     *
     * @param id    数据库配置id
     * @param dbMap 数据库配置 {type:'mysql/sqlserver/oracle/db2',url:'',port:'',database:'',username:'',password:''}
     * @return
     */
    Return updateDataBaseConfig(String id, Map<String, String> dbMap);

    /**
     * 删除数据源
     *
     * @param id
     * @return
     */
    Return getDataBaseConfigById(String id);

    /**
     * 获取所有db配置的树型结构
     *
     * @return Return.data:[{id:"",pId:"",name:"",open:"",image:"",type:""}]
     */
    Return getDataBaseConfigTree();

    /**
     * 删除数据源
     *
     * @param id
     * @return
     */
    Return deleteDataBaseConfigById(String id);

    /**
     * 获取当前用户拥有的Schema
     *
     * @param dbId
     * @return
     */
    Return getSchemaNames(String dbId);

    /**
     * 获取当前用户指定Schema下的表和视图
     *
     * @param dcId       数据库配置 DataBaseConfig {type:'mysql/sqlserver/oracle/db2',url:'',url:'',port:'',database:'',username:'',password:''}
     * @param schemaName 用户选择的schema
     * @return
     */
    Return getTableNameBySchema(String dcId, String schemaName);

    /**
     * 获取当前用户指定schema.table下的字段
     *
     * @param dcId    数据库配置 DataBaseConfigId
     * @param selfMap 用户选择的 {isSelf:false/true,schema:'',table:'',customSql:''}
     * @return {"message":"获取字段名成功","data":[{"字段类型":"VARCHAR","字段长度":"16","是否为空":"false","字段名称":"id"}],"success":true}
     */
    Return getFieldNameByTable(String dcId, Map<String, String> selfMap);

    /**
     * 获取自定义DataSet的字段
     *
     * @param dpId DataSetId
     * @return
     */
    Return getFieldNameByDataSet(String dpId);

    /**
     * 获取当前用户指定schema.table下的字段
     *
     * @param dcId          数据库配置 DataBaseConfig {type:'mysql/sqlserver/oracle/db2',url:'',port:'',database:'',username:'',password:''}
     * @param selfMap       用户选择的 {isSelf:false/true,schema:'',table:'',customSql:''}
     * @param fieldsMapJson 字段映射规则 {oldName:{name:newName,hide:true,type:'字段类型'}}
     * @param page          当前页数 1
     * @param pageSize      每页显示数量 10
     * @return {'message':'','data':List(Map),'success':true/false}	example :
     * {"message":"获取表数据成功","data":{"datas":[{"name":"DELL PowerEdge 2950","uploadtime":"2011-04-28 162615","userid":"20100731136775","grade":"0"}],"count":665,"page":1,"pageSize":10},"success":true}
     */
    Return getMetaDataByTable(String dcId, Map<String, String> selfMap, String fieldsMapJson, int page, int pageSize);

    /**
     * 保存数据源
     *
     * @param name          datasource名称
     * @param dcId          数据库配置 DataBaseConfigId
     * @param selfMap       用户选择的 {isSelf:false,schema:'',table:'store_users',customSql:''}
     * @param fieldsMapJson 字段映射规则 {newName:{name:oldName,hide:true,type:'字段类型'}}
     * @return
     */
    Return saveDataBasePool(String name, String dcId, Map<String, String> selfMap, String fieldsMapJson);

    /**
     * 更新数据源
     *
     * @param name          datasource名称
     * @param selfMap       用户选择的 {isSelf:false/true,schema:'',table:'',customSql:''}
     * @param fieldsMapJson 字段映射规则 {newName:{name:oldName,hide:true,type:'字段类型'}}
     * @return
     */
    Return updateDataBasePool(String name, Map<String, String> selfMap, String fieldsMapJson);

    /**
     * 删除数据源
     *
     * @param id
     * @return
     */
    Return getDataBasePoolById(String id);

    /**
     * 获取所有数据源结构
     *
     * @return Return.data:[{id:"",pId:"",name:"",open:"",image:"",type:""}]
     */
    Return getDataBasePoolTree();

    /**
     * 删除数据源
     *
     * @param id
     * @return
     */
    Return deleteDataBasePoolById(String id);

    /**
     * 导出db配置的json格式文件
     *
     * @return
     */
    FileTransfer exportDataBaseConfig() throws Exception;

    /**
     * 导入db配置的json格式文件
     *
     * @param ftf json格式文件
     * @return
     * @throws Exception
     */
    Return importDataBaseConfig(FileTransfer ftf) throws Exception;

    /**
     * 导出的json格式文件
     *
     * @return
     */
    FileTransfer exportDataBasePool() throws Exception;

    /**
     * 导入db配置的json格式文件
     *
     * @param ftf json格式文件
     * @return
     * @throws Exception
     */
    Return importDataBasePool(FileTransfer ftf) throws Exception;

    /**
     * 导出db配置的XML格式文件
     * @return
     * @throws Exception
     */
	FileTransfer exportDataBasePoolXML() throws Exception;

	/**
	 * 导入的db配置的XML格式文件
	 * @param ftf
	 * @return
	 * @throws Exception
	 */
	Return importDataBasePoolXML(FileTransfer ftf) throws Exception;

	/**
	 * 导入的dc配置的XML格式文件
	 * @param ftf
	 * @return
	 * @throws Exception
	 */
	Return importDataBaseConfigXML(FileTransfer ftf) throws Exception;

	/**
	 * 导出的dc配置的XML格式文件
	 * @return
	 * @throws Exception
	 */
	FileTransfer exportDataBaseConfigXML() throws Exception;
}