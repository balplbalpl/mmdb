package com.mmdb.buz.ruleEngine;

import org.directwebremoting.io.FileTransfer;

import net.sf.json.JSONObject;

import com.mmdb.core.utils.Return;

public interface IRuleEngine {
	/**
	 * 获取规则树
	 * 
	 * **/
	public Return getTree() throws Exception;

	/**
	 * 获取规则节点
	 * 
	 * **/
	public Return getTreeNodeById(String id) throws Exception;

	/**
	 * 添加规则节点
	 * 
	 * **/
	public Return addTreeNode(String id, String name, String data)
			throws Exception;

	/**
	 * 删除规则节点
	 * 
	 * **/
	public Return delTreeNode(String id) throws Exception;

	/**
	 * 获取CategoryIds
	 * 
	 * **/
	public Return getCategoryIds() throws Exception;

	/**
	 * 获取CI属性
	 * 
	 * **/
	public Return getCiAttrs(String categoryId) throws Exception;

	/**
	 * 获取indis
	 * 
	 * **/
	public Return getIndis() throws Exception;

	/**
	 * 添加indi
	 * 
	 * **/
	public void addIndi(String indi) throws Exception;

	/**
	 * 导入性能规则
	 * 
	 * @param ftf
	 * @param save
	 *            true时才会被写入到数据库中,false只是单纯的检测
	 * @return
	 */
	public Return importPerfRule(FileTransfer ftf, boolean save);

	/**
	 * 导入告警规则
	 * 
	 * @param ftf
	 * @param save
	 *            true时才会被写入到数据库中,false只是单纯的检测
	 * @return
	 */
	public Return importEventRule(FileTransfer ftf, boolean save);

	/**
	 * 导出性能规则
	 * 
	 * @return
	 */
	public FileTransfer exportPerfRule();

	/**
	 * 导出告警规则
	 * 
	 * @return
	 */
	public FileTransfer exportEventRule();


	/**
	 * 通过路径获取对应的全部规则的名称
	 * 
	 * @param rulePath
	 *            规则路径 应该是 /rule/perf或者/rule/event
	 * @return
	 */
	public Return getRuleNames(String rulePath);

	/**
	 * 通过规则名称获取到规则的数据.
	 * 
	 * @param ruleName
	 *            规则名称
	 * @param rulePath
	 *            规则路径 应该是 /rule/perf或者/rule/event
	 * @return 
	 *         ["data":"{"name":"xxx","val-kpi":"[["","",""],[],[]]","ci-val":"[[
	 *         ],[]....]","ci-kpi":"[[],[]...]"}"]
	 */
	public Return getRuleByName(String ruleName, String rulePath);

	/**
	 * 删除一条数据
	 * 
	 * @param ruleName
	 *            规则名称
	 * @param rulePath
	 *            规则路径 应该是 /rule/perf或者/rule/event
	 * @return
	 */
	public Return deleteRule(String ruleName, String rulePath);

	/**
	 * 插入一条数据,如果规则名称不存在则新建.
	 * 
	 * @param ruleName
	 *            规则名称
	 * @param vkRule
	 *            实际类型:List<List<String>>
	 * @param ckRule
	 *            实际类型:List<List<String>>
	 * @param cvRule
	 *            实际类型:List<List<String>>
	 * @param rulePath
	 *            规则路径 应该是 /rule/perf或者/rule/event
	 * @return
	 */
	public Return updateRule(String ruleName, String vkRule, String ckRule,
			String cvRule, String rulePath);

	/**
	 * 插入一条数据,如果规则名称已经存在则失败
	 * 
	 * @param ruleName
	 *            规则名称
	 * @param vkRule
	 *            实际类型:List<List<String>>
	 * @param ckRule
	 *            实际类型:List<List<String>>
	 * @param cvRule
	 *            实际类型:List<List<String>>
	 * @param rulePath
	 *            规则路径 应该是 /rule/perf或者/rule/event
	 * @return
	 */
	public Return insertRule(String ruleName, String vkRule, String ckRule,
			String cvRule, String rulePath);

	/**
	 * 确认一条规则是否存在,
	 * 
	 * @param ruleName
	 *            规则名称
	 * @param rulePath
	 *            规则路径 应该是 /rule/perf或者/rule/event
	 * @return
	 */
	public boolean ruleExists(String ruleName, String rulePath);

	/**
	 * 清楚当前路径的全部数据
	 * 
	 * @param rulePath
	 *            规则路径 应该是 /rule/perf或者/rule/event
	 * @return
	 */
	public Return removeAll(String rulePath);
}
