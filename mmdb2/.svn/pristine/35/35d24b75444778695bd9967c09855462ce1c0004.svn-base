package com.mmdb.model.task;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.quartz.DisallowConcurrentExecution;
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.quartz.JobKey;
import org.quartz.PersistJobDataAfterExecution;

import com.mmdb.core.log.Log;
import com.mmdb.core.log.LogFactory;
import com.mmdb.core.utils.SpringContextUtil;
import com.mmdb.model.categroy.CiCategory;
import com.mmdb.model.categroy.RelCategory;
import com.mmdb.model.database.bean.DataSourcePool;
import com.mmdb.model.mapping.PerfToDbMapping;
import com.mmdb.service.category.ICiCateService;
import com.mmdb.service.category.IRelCateService;
import com.mmdb.service.db.IDataSourceService;
import com.mmdb.service.mapping.IInCiCateMapService;
import com.mmdb.service.mapping.IPerfDbMapService;
import com.mmdb.service.mapping.ISourceCategoryMapService;
import com.mmdb.service.mapping.ISourceRelationMapService;
import com.mmdb.service.task.ITaskService;

/**
 * 任务处理
 *
 * @author XIE
 */
@PersistJobDataAfterExecution
@DisallowConcurrentExecution
public class TaskJob implements Job {
    private Log log = LogFactory.getLogger("TaskJob");
    private ITaskService taskService = SpringContextUtil.getBean("taskService");
    private ISourceCategoryMapService dbService = SpringContextUtil.getBean("sourceCateMapService");
    private IInCiCateMapService inCmService = SpringContextUtil.getBean("inCiCateMapService");
    private ISourceRelationMapService outCmService = SpringContextUtil.getBean("sourceRelMapService");
    private IPerfDbMapService perfDbMapService = SpringContextUtil.getBean("perfDbMapService");
    private IDataSourceService dataSourceService = SpringContextUtil.getBean("dataSourceService");
    private ICiCateService ciCateService = (ICiCateService)SpringContextUtil.getApplicationContext().getBean("ciCateService");
	private IRelCateService relCateService = (IRelCateService)SpringContextUtil.getApplicationContext().getBean("relCateService");

    @Override
    public void execute(JobExecutionContext context) throws JobExecutionException {
        JobKey jobKey = context.getJobDetail().getKey();
        String jobName = jobKey.getName();
        try {
            Task task = taskService.getByName(jobName);
            if (task != null) {
                List<String> dbms = task.getDbCiCateMapIds();
                List<String> icms = task.getInCiCateMapIds();
                List<String> ocms = task.getOutCiCateMapIds();
                List<String> pms = task.getPerfDbMapIds();
                for (String dbm : dbms) {
                    dbService.runNow(dbm, getCiCateMap());
                }
                for (String im : icms) {
                    inCmService.runNow(im, getCiCateMap(), getRelCateMap());
                }
                for (String om : ocms) {
                    outCmService.runNow(om, getCiCateMap(), getRelCateMap());
                }
                Map<String, DataSourcePool> dbPoolMap = getDbPoolMap();
                for (String pm : pms) {
                	PerfToDbMapping pmo = perfDbMapService.getMappingById(pm);
                	pmo.setDataSource(dbPoolMap.get(pmo.getDataSourceId()));
                	perfDbMapService.runNow(pmo);
                }
                log.dLog("任务[" + jobName + "]执行成功");
            } else {
                throw new Exception("任务[" + jobName + "]不存在");
            }
        } catch (Exception e) {
            log.eLog("立即执行：" + e);
            e.printStackTrace();
        }
    }
    
    private Map<String, CiCategory> getCiCateMap() throws Exception{
		List<CiCategory> cates = ciCateService.getAll();
		Map<String, CiCategory> cateMap = new HashMap<String, CiCategory>();
		for(CiCategory cate:cates){
			cateMap.put(cate.getId(), cate);
		}
		return cateMap;
	}
	
	private Map<String, RelCategory> getRelCateMap() throws Exception{
		List<RelCategory> cates = relCateService.getAll();
		Map<String, RelCategory> cateMap = new HashMap<String, RelCategory>();
		for(RelCategory cate:cates){
			cateMap.put(cate.getId(), cate);
		}
		return cateMap;
	}
	
	private Map<String, DataSourcePool> getDbPoolMap() throws Exception{
		List<DataSourcePool> cates = dataSourceService.getAll();
		Map<String, DataSourcePool> cateMap = new HashMap<String, DataSourcePool>();
		for(DataSourcePool cate:cates){
			cateMap.put(cate.getId(), cate);
		}
		return cateMap;
	}
}
