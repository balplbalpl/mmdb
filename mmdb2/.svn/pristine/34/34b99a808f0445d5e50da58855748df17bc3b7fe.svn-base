/* global mxHierarchicalLayout */
/* global mxConstants */
/* global mxGraph */
/* global mxEvent */


(function(graph){

	'use strict';

	var editor = null,
		setCheckBox,
		task,
		$main = null,
		addListener = null,
		updateMonitor,
		alertStyleWidth = 24,
		alertStyleHeight = 24,
		alertStyle = '',
		ids = [],
		displayMonitor = null,
		getColor = null,
		getData = null,
		getCiData = null,
		initCategory = null,
		cate = {},
		hide = {},
		oHide = {},
		handle = null,
		initLevel = null,
		oLevel = null,
		filterLevel = null,
		levelHide = {},
		cells = null,
		opacity = null,
		lastOpacityCells = null,
		initSelect = null,
		currLevel = null,
		initParams = null,
		id = null,
		type = null,
		toolbarInit = null,
		toolbar = null,
		showCiTable = null,
		CI_TABLE_LIB = {},
		showGraph = null,
		draw = null;

	alertStyle = 'ellipse;strokeWidth=none;strokeColor=none;movable=0;';

	getCiData = function(){
		var obj = {}, result;

		result = graph.api.queryEventPerfByCurrent(ids, 6000 * 10, 1);
		if(graph.utils.isTrueRet(result)){
			obj = result.data[0].data;
		}else{
			graph.utils.alert(result.message);
		}

		return obj;
	};

	oLevel = {
		1 : 'images/alert/5.png',
		2 : 'images/alert/4.png',
		3 : 'images/alert/3.png',
		4 : 'images/alert/2.png',
		6 : 'images/alert/1.png'
	};

	filterLevel = function(){
		var cells, alarmLevel, i, cell;

		cells = editor.graph.getDepCells();

		for(i=0; i<cells.length; i++){
			cell = cells[i];
			if(graph.utils.isCiCell(cell)){
				alarmLevel = Number(editor.graph.getCellAttr(cell, 'alarmLevel'));
				if(levelHide[alarmLevel]){
					oHide[graph.utils.getCiIdByCell(cell)] = true;
				}else{
					delete oHide[graph.utils.getCiIdByCell(cell)];
				}
			}
		}

		editor.graph.refresh();
		opacity();
	};

	initSelect = function(){
		var i, list = [];

		for(i=1; i<=9; i++){
			list.push(i);
		}

		graph.utils.render('share/deLevel', {
			list: list,
			currLevel: currLevel
		}, function(html){
			var container,
				$main = $('#tab_2_1_3'),
				selectContainer;

			$main.append(html);
			container = $main.find('#selectLevel');
			selectContainer = container.find('#selectLevel');

			container.find('#searchLevelBtn').click(function(){
                window.location.href = [
                    'openChildTree.html',
                    '?id=' + id,
                    '&type=' + 'all',
                    '&level=' + selectContainer.val()
                ].join('');
			});
		});
	};

	initLevel = function(){

		graph.utils.render('share/level', {
			list: oLevel
		}, function(html){
			var container,
				$allSelect,
				$checkBoxs,
				checkAll = null,
				$main = $('#tab_2_1_2');

			checkAll = function(){
				var isAllChecked = true;
				$checkBoxs.each(function(){
					if(!$(this).is(':checked')){
						isAllChecked = false;
					}

					if(isAllChecked){
						setCheckBox($allSelect[0], true);
					}else{
						setCheckBox($allSelect[0], false);
					}
				});
			};

			$main.append(html);
			container = $main.find('#levelList');
			$allSelect = container.find('input[name=all]');
			$checkBoxs = container.find('input[name=filterMonitor]');
			$checkBoxs.each(function(){
				$(this).click(function(){
					if($(this).is(':checked')){
						delete levelHide[this.value];
					}else{
						levelHide[this.value] = true;
					}
					checkAll();
					filterLevel(levelHide);
				});
			});

			$allSelect.click(function(){
				var isChecked = false;

				if($(this).is(':checked')){
					isChecked = true;
				}

				$checkBoxs.each(function(){
					setCheckBox(this, isChecked);

					if(isChecked){
						delete levelHide[this.value];
					}else{
						levelHide[this.value] = true;
					}

					checkAll();
				});

				filterLevel(levelHide);
			});
		});
	};

	initCategory = function(list){
		var i, container, obj = {}, allCheck, $checkboxs, getHideList;

		getHideList = function(){
			var obj = {};
			$checkboxs.each(function(){
				var key = this.value, i = 0;

				if(!$(this).is(':checked')){
					for(i=0; i<cate[key].length; i++){
						obj[cate[key][i]] = true;
					}
				}
			});

			return obj;
		};

		for(i=0; i<list.length; i++){
			if(!cate[list[i]._categoryId_]){
				cate[list[i]._categoryId_] = [];
			}
			cate[list[i]._categoryId_].push(list[i]._neo4jid_);
		}

		for(i in cate){
			obj[i] = graph.ICO_LIB_VIEW[i];
		}

		graph.utils.render('share/cate', {
			list: obj
		}, function(html){
			var $main = $('#tab_2_1_1');
			$main.append(html);
			container = $main.find('#cateList');
			allCheck = container.find('input[name=all]');
			$checkboxs = container.find('input[name=filterCate]');
			$checkboxs.each(function(){
				$(this).click(function(){
					var allSelect = true;

					$checkboxs.each(function(){
						if(!$(this).is(':checked')){
							setCheckBox(allCheck[0], false);
						}
					});

					if($(this).is(':checked')){
						if(allSelect){
							setCheckBox(allCheck[0], true);
						}
					}else{
						setCheckBox(allCheck[0], false);
					}

					hide = getHideList();
					opacity();
				});
			});

			allCheck.click(function(){
				var isChecked = false;
				if($(this).is(':checked')){
					isChecked = true;
				}
				$checkboxs.each(function(){
					setCheckBox(this, isChecked);
				});

				hide = getHideList();
				opacity();
			});
		});
	};

	getData = function(){
		var result, dep;

		dep = {down:currLevel, up: 0};
		result = graph.api.getCiRelationById(urlParams.id, null, JSON.stringify({}), dep);
		if(graph.utils.isTrueRet(result)){
			return result.data;
		}else{
			graph.utils.alert(result.message);
		}
	};

	draw = function(data){
		var i, parent, model, v1, v2, arr = [], type = graph.DEFINE_CI.GRAPH_PREFIX, style, ids = [], id, ii;

		parent = editor.graph.getDefaultParent();
		model = editor.graph.getModel();
		model.beginUpdate();

		try {
			for(i=0; i<data.node.length; i++){
				if(!editor.graph.getCellByID([type, data.node[i]._neo4jid_].join(''))){
					style = 'image;image=' + graph.ICO_LIB_VIEW[data.node[i]._categoryId_];
					id = [type, data.node[i]._neo4jid_].join('');
					editor.graph.insertVertex(parent, id, data.node[i]._id_, 0, 0, graph.DEFINE_CONFIG_INFO.DRAG_WIDTH, graph.DEFINE_CONFIG_INFO.DRAG_HEIGHT, style);
				}

				CI_TABLE_LIB[data.node[i]._neo4jid_] = data.node[i];
				ids.push(data.node[i]._neo4jid_);
			}

			for(ii=0; ii<data.relation.length; ii++){
				arr = data.relation[ii].split('_');
				v1 = editor.graph.getCellByID([type, arr[0]].join(''));
				v2 = editor.graph.getCellByID([type, arr[2]].join(''));

				if(v1 && v2){
					editor.graph.insertEdge(parent, graph.utils.randstr(), arr[1], v1, v2);
				}
			}
		} finally {
			model.endUpdate();
		}

		graph.utils.executeLayout(
			editor.graph,
			new mxHierarchicalLayout(
				editor.graph,
				mxConstants.DIRECTION_NORTH
			),
			true,
			true
		);

		editor.graph.refresh();
		editor.graph.zoomToCenter();
	};

	addListener = function(){


		graph.event.reg(graph.DEFINE_EVENT.CI_INFO_CLOSE, function(){
			editor.zoomLock = false;
			editor.graph.removeLight();
		});


		editor.graph.addListener(mxEvent.CLICK, function(sender, evt) {
			var e, parent, cell;

			// mouse event
			e = evt.getProperty('event');

			// cell may be null
			cell = evt.getProperty('cell');

			if (e.which === 1) {
				editor.graph.removeLight();
				editor.graph.clearSelection();
				if (cell && graph.utils.isCiCell(cell)) {
					new graph.CiInfo({
						id: graph.utils.getCiIdByCell(cell),
						container: editor.graph.container
					});

					editor.zoomLock = true;
					editor.graph.addLight(cell);
					evt.consume();
				}

				if(cell && graph.utils.isCiIn(cell)){
					parent = cell.getParent();
					if(parent && graph.utils.isCiCell(parent)){
						new graph.CiInfo({
							id: graph.utils.getCiIdByCell(parent.id),
							container: editor.graph.container
						});
						editor.zoomLock = true;
						editor.graph.addLight(cell, 'ellipse;');
						evt.consume();
					}
				}
			}
		});
	};

	updateMonitor = function(obj){
		var i, ii, cell, style, ret;

		for(i in obj){
			cell = editor.graph.getCellByID(graph.DEFINE_CI.GRAPH_PREFIX + i);
			if(cell && cell.vertex){
				style = alertStyle + 'fillColor=' + getColor(obj[i].alarmLevel).bg + ';fontColor='+getColor(obj[i].alarmLevel).fc;
				if(cell.children && cell.children.length>=1){
					for(ii=0; ii<cell.children.length; ii++){
						if(graph.utils.isCiIn(cell.children[ii])){
							cell.children[ii].setValue(obj[i].alarm);
							editor.graph.setCellAttr(cell, 'alarmLevel', String(obj[i].alarmLevel));
							cell.children[ii].setStyle(style);
							editor.graph.refresh(cell.children[ii]);
						}
					}
				}
			}else if(cell && cell.edge){
				style = cell.getStyle();
				style = style ? style : '';
				ret =  /strokeColor=(#?\w+){1,10}/.exec(style);
				if(ret && ret[0]){
				 	style = style.replace(
				 		ret[0],
				 		'strokeColor=' + getColor(obj[i].alarmLevel).bg
				 	);
				}else{
					if(style && style[style.length-1] !== ';'){
						style += ';';
					}
					style += 'strokeColor=' + getColor(obj[i].alarmLevel).bg + ';';
				}

			 	cell.setStyle(style);
			 	editor.graph.refresh(cell);
			}
		}
	};

	displayMonitor = function(){
		var cells;

		ids = [];
		cells = editor.graph.getDepCells();

		$.each(cells, function(){
			var _this = this;

			if(graph.utils.isCiCell(_this)){
				ids.push(graph.utils.getCiIdByCell(_this));
				if(_this.vertex){
					editor.graph.insertVertex(
						_this,
						graph.DEFINE_CI.GRAPH_PREFIX_IN + graph.utils.randstr(),
						'1',
						Number('-' + alertStyleWidth/2),
						Number('-' + alertStyleHeight/2),
						alertStyleWidth,
						alertStyleHeight,
						alertStyle
					);
				}
			}
		});
	};

	opacity = function(){
		var all, cells = [];

		if(lastOpacityCells){
			editor.graph.setCellStyles(mxConstants.STYLE_OPACITY, 100, lastOpacityCells);
		}

		all = editor.graph.getDepCells();

		$.each(all, function(){
			var cell = this, key, i;

			if(graph.utils.isCiCell(cell)){
				key = graph.utils.getCiIdByCell(cell);
				if(hide[key] || oHide[key]){
					cells.push(cell);
					if(cell.children){
						for(i=0; i<cell.children.length; i++){
							if(graph.utils.isCiIn(cell.children[i])){
								cells.push(cell.children[i]);
							}
						}
					}

					if(cell.edges){
						for(i=0; i<cell.edges.length; i++){
							cells.push(cell.edges[i]);
						}
					}
				}
			}
		});

		editor.graph.setCellStyles(mxConstants.STYLE_OPACITY, 30, cells);
		lastOpacityCells = cells;

		editor.graph.refresh();
	};

	//handle = function(g){
	//	g.isCellVisible = function(cell){
	//		var key, result;
    //
	//		result = mxGraph.prototype.isCellVisible.apply(this, arguments);
    //
	//		if(result && graph.utils.isCiCell(cell)){
	//			key = graph.utils.getCiIdByCell(cell);
	//			result = hide[key] || oHide[key] ? false : true;
	//		}
	//		return result;
	//	};
	//};

	initParams = function(){
		id = urlParams.id;
		type = urlParams.type ? urlParams.type : 'min';
		currLevel = urlParams.level ? Number(urlParams.level) : 9;
	};

	toolbarInit = function(){
		toolbar = new graph.Toolbar({
			toolbarItemsRight : [
				'ciConfig',
				'graphModel'
			],
			toolbarItemsLeft: [
				'zoomToCenter',
				'actualsize',
				'zoomIn',
				'zoomOut'
			],
			editor: editor,
			showCiTable: showCiTable,
			showGraph: showGraph
		}, $('#toolbar'));
	};

	showGraph = function(){
		var container = editor.graph.container;
		$(container).find('.graphtable').remove();
	};

	showCiTable = function(){
		graph.utils.showCiTable(editor.graph);
	};

	graph.buildUI = function(){
		graph.header();
		(function(){
			var size, $mainBox = $('.main-box'), $header = $('.succ-header');

			size = function(){
				var height = $(window).height() - $header.height();
				$mainBox.height(height);
			};

			size();
			$(window).resize(size);
		})();

		(function(){
			var $siderbar = $('#siderbar'),
				$graphs = $('#graphs'),
				oriWidth = $siderbar.width();

			$('#collapse-sidebar').click(function(){
				if($siderbar.width() === 0){
					$siderbar.width(oriWidth);
					$graphs.css('margin-left', oriWidth + 'px');
					$(this).removeClass('deg180');
				}else{
					$siderbar.width(0);
					$graphs.css('margin-left', 0);
					$(this).addClass('deg180');
				}
			});
		})();
	};

	task = function(){
		$('.task-list input[type=checkbox]').change(function() {
			if ($(this).is(':checked')) {
				setCheckBox(this, true);
			} else {
				setCheckBox(this, false);
			}
		});
	};

	setCheckBox = function(element, isChecked){
		var $li = $(element).closest('li');
		element.checked = isChecked;
		if (isChecked) {
			$li.find('.checker > span').addClass('checked');
		} else {
			$li.find('.checker > span').removeClass('checked');
		}
	};

	graph.onload = function(){
		var data = null;
		$main = $('#sidebar');
		graph.buildUI();

		editor = graph.utils.getEditor($('#graphContainer')[0]);
		editor.graph.setEnabled(false);
		editor.graph.setConnectable(false);
		editor.graph.setDropEnabled(false);
		editor.graph.container.style.background = '#FFF';
		//handle(editor.graph);

		getColor = graph.utils.getLevelColor;
		if(urlParams.id){
			addListener();
			initParams();
			data = getData();
			initSelect();
			initLevel();
			initCategory(data.node);
			draw(data);
			cells = editor.graph.getDepCells();

			displayMonitor();
			updateMonitor(getCiData());
			toolbarInit();
			task();
		}
	};

})(nameSpace.reg('graph'));
