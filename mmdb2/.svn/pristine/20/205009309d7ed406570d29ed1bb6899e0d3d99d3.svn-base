package com.mmdb.buz.icon.impl;

import com.mmdb.buz.icon.IImageBuz;
import com.mmdb.core.log.Log;
import com.mmdb.core.log.LogFactory;
import com.mmdb.core.utils.*;
import com.mmdb.ruleEngine.Tool;
import com.mmdb.service.category.ICiCateService;

import org.directwebremoting.annotations.RemoteMethod;
import org.directwebremoting.annotations.RemoteProxy;
import org.directwebremoting.io.FileTransfer;
import org.springframework.beans.factory.annotation.Autowired;

import java.io.*;
import java.util.*;

@RemoteProxy(name = "imageBuz")
public class ImageBuzImpl implements IImageBuz {
    private Log log = LogFactory.getLogger("ImageBuzImpl");

    @Autowired
    private ICiCateService ciCateService;
    //中文字体缓存
    private Map<String, Object> FONTCACHE_ZH = new HashMap<String, Object>();
    private Map<String, Object> FONTCACHE_EN = new HashMap<String, Object>();

    @Override
    @RemoteMethod
    public Return qurey(String name, int page, int pageSize) {
        Return ret = new Return();
        try {
            log.dLog("qurey");
            String path = SysProperties.get("svg.url");
            String type = SysProperties.get("svg.base");
            if (path.equals("resource")) {
//                path = ProjectInfo.getProjectRealPathConvert() + path + "/svg/" + type;
            	path = Tool.getRealPath() + path + "/svg/" + type;
            } else {
                path = path + "/svg/" + type;
            }
            Map<String, Object> retMap = this.queryResult(path, name, page, pageSize, false);
            List<Map<String, Object>> map = new ArrayList<Map<String, Object>>();
            List<String> datas = (List<String>) retMap.get("datas");
            List<String> useImages = ciCateService.getUseImages();
            for (String data : datas) {
            	String imageUrl = data.substring(data.lastIndexOf("/")+1);
                Map<String, Object> m = new HashMap<String, Object>();
                if (useImages.contains(imageUrl)) {
                    m.put("isUse", true);
                } else {
                    m.put("isUse", false);
                }
                m.put("url", data);
                map.add(m);
            }
            retMap.put("datas", map);
            ret.setData(retMap).setMessage("查询成功");
            log.dLog("qurey success");
        } catch (Exception e) {
            log.eLog(e);
            ret.setSuccess(false).setMessage(e.getMessage());
        }
        System.out.println(ret);
        return ret;
    }

    /**
     * 模糊搜索
     *
     * @param path     SVG路径
     * @param name     名称
     * @param page     页码
     * @param pageSize 查询条数
     * @param filter   是否显示已使用的图标
     * @return
     * @throws Exception
     */
    private Map<String, Object> queryResult(String path, String name, int page,
                                            int pageSize, boolean filter) throws Exception {
    	String type = SysProperties.get("svg.base");
    	File f = new File(path);
    	if(!f.exists()){
    		path = "/"+path;
    	}
    	System.out.println("!!!!!!!!!!!!!!!!!!!!!"+path);
    	File fuck = new File(path);
    	String[] fuckChildren = fuck.list();
    	List<String> list = new ArrayList<String>();
    	for(String fc:fuckChildren){
    		list.add(fc);
    	}
//        List<String> list = FileBrowes.readFile(path, "");
        // 删除已使用的就会做标记
        if (filter) {
            List<String> useImages = ciCateService.getUseImages();
            for (String image : useImages) {
                list.remove(image);
            }
        }
        List<String> datas = new ArrayList<String>();
        if (name == null || name.equals("")) {
            datas.addAll(list);
        } else {
            for (String na : list) {
                if (na.contains(name)) {
                    datas.add(na);
                }
            }
        }
        // 排序
        Collections.sort(datas, new Comparator<String>() {
            public int compare(String arg0, String arg1) {
                return arg0.compareTo(arg1);
            }
        });
        // 构建分页数据输出
        String prefix = Tool.findPath("admin", "resource");
        List<String> datasNew = new ArrayList<String>();
        for(String data:datas){
        	if(data.toLowerCase().endsWith(".svg")){
        		datasNew.add(prefix+"/svg/"+type+"/"+data);
        	}
        }
        int count = datasNew.size();
        int start = (page - 1) * pageSize;
        start = start < 0 ? 0 : start;
        int end = page * pageSize;
        start = start > count ? count : start;
        end = end > count ? count : end;
        datasNew = datasNew.subList(start, end);
        Map<String, Object> retMap = new HashMap<String, Object>();
        retMap.put("count", count);
        retMap.put("page", page);
        retMap.put("pageSize", pageSize);
        
        
        retMap.put("datas", datasNew);
        return retMap;
    }

    @Override
    @RemoteMethod
    public Return qureyByIdle(String name, int page, int pageSize) {
        Return ret = new Return();
        try {
            log.dLog("qureyByIdle");
            String path = SysProperties.get("svg.url");
            if (path.equals("resource")) {
//                path = ProjectInfo.getProjectRealPathConvert() + path + "/svg";
            	path = Tool.getRealPath() + path + "/svg";
            } else {
                path = path + "/svg";
            }
            Map<String, Object> retMap = this.queryResult(path, name, page, pageSize, true);
            ret.setData(retMap).setMessage("查询成功");
            log.dLog("qureyByIdle success");
        } catch (Exception e) {
            log.eLog(e);
            ret.setSuccess(false).setMessage(e.getMessage());
        }
        return ret;
    }

    @Override
    @RemoteMethod
    public Return getDirectoryFileByUrl(String url) {
        Return ret = new Return();
        try {
            log.dLog("getDirectoryFile");
            if (url == null || url.equals("")) {
                throw new Exception("url不能为空");
            }
            String path = SysProperties.get("svg.url");
            if (path.equals("resource")) {
//                path = "/" + ProjectInfo.getProjectRealPathConvert() + path + "/" + url;
            	path = Tool.getRealPath() + path + "/" + url;
            } else {
                path = path + "/" + url;
            }
            List<String> list = FileBrowes.readFile(path, "");
            ret.setData(list).setMessage("获取成功");
            log.dLog("getDirectoryFile success");
        } catch (Exception e) {
            log.eLog(e);
            ret.setSuccess(false).setMessage(e.getMessage());
        }
        return ret;
    }

    @Override
    @RemoteMethod
    public Return deleteByName(String name) {
        Return ret = new Return();
        try {
            log.dLog("删除SVG图标");
            name = name.substring(name.lastIndexOf("/")+1);
            String type = SysProperties.get("svg.base");
            String url = SysProperties.get("svg.url");
            List<String> list = new ArrayList<String>();
            if (url.equals("resource")) {
//                String path = ProjectInfo.getProjectRealPathConvert();
            	String path = Tool.getRealPath();
                url = path + url + "/svg/" + type;
            } else {
                url = url + "/svg/" + type;
            }
            try{
            	list = FileBrowes.readFile(url, "");
            }catch(Exception e){
            	url = "/" + url;
            	list = FileBrowes.readFile(url, "");
            }
            
            List<String> useImgs = ciCateService.getUseImages();
            if (list.contains(name)) {
                if (useImgs.contains(name)) {
                    throw new Exception("图标[" + name + "]已被使用，不能删除");
                }
                FileBrowes.delFile(url, name);
            } else {
                throw new Exception("图标[" + name + "]不存在");
            }
            ret.setMessage("删除图标成功");
            log.dLog("删除SVG图标完成");
        } catch (Exception e) {
            log.eLog(e);
            ret.setSuccess(false).setMessage(e.getMessage());
        }
        return ret;
    }

    /**
     * 删除单个文件
     *
     * @param sPath 被删除文件的文件名
     * @return 单个文件删除成功返回true，否则返回false
     */
    private boolean deleteFile(String sPath) {
        boolean flag = false;
        File file = new File(sPath);
        // 路径为文件且不为空则进行删除
        if (file.isFile() && file.exists()) {
            file.delete();
            flag = true;
        }
        return flag;
    }

    @Override
    @RemoteMethod
    public FileTransfer exportZip() throws Exception {
        log.dLog("exportZip");
        String url = SysProperties.get("svg.url"), zip = SysProperties
                .get("svg.zip");
        String path = "", filename = "svg.zip";
        String type = SysProperties.get("svg.base");
        if (url.equals("resource")) {
//            path = ProjectInfo.getProjectRealPathConvert() + filename;
        	path = Tool.getRealPath() + filename;
//            url = ProjectInfo.getProjectRealPathConvert() + url + "/svg/" + type;
        	url = Tool.getRealPath() + url + "/svg/" + type;
        } else {
            path = zip + filename;
            url = url + "/svg/" + type;
        }
        
        ByteArrayOutputStream out = null;
        try{
        	ZipUtils.zip(url, path);
            BufferedInputStream in = new BufferedInputStream(new FileInputStream(
                    path));
            out = new ByteArrayOutputStream();
            byte[] temp = new byte[1024];
            int size = 0;
            while ((size = in.read(temp)) != -1) {
                out.write(temp, 0, size);
            }
            in.close();
            out.close();
            this.deleteFile(path);
        }catch(Exception e){
        	url = "/"+url;
            path = "/"+path;
        	ZipUtils.zip(url, path);
            BufferedInputStream in = new BufferedInputStream(new FileInputStream(
                    path));
            out = new ByteArrayOutputStream();
            byte[] temp = new byte[1024];
            int size = 0;
            while ((size = in.read(temp)) != -1) {
                out.write(temp, 0, size);
            }
            in.close();
            out.close();
            this.deleteFile(path);
        }
        
        log.dLog("exportZip success");
        return new FileTransfer(new String("图标库".getBytes("GBK"), "iso8859-1")
                + TimeUtil.getTime(TimeUtil.YMDHMS) + ".zip",
                "application/zip", out.toByteArray());
    }

    /**
     * InputStream写文件
     *
     * @param ins InputStream
     * @param url 文件路径
     * @throws java.io.IOException
     */
    private void inputstreamtofile(InputStream ins, String url)
            throws IOException {
        FileOutputStream fos = new FileOutputStream(url);
        int data = ins.read();
        while (data != -1) {
            fos.write(data);
            data = ins.read();
        }
        fos.close();
    }

    @Override
    @RemoteMethod
    public Return importZip(FileTransfer ftf, String type) {
        Return ret = new Return();
        try {
            log.dLog("批量上传SVG图标ZIP");
            if(type==null||type.length()==0){
            	type = SysProperties.get("svg.base");
            }
            if (ftf.getFilename() == null
                    || ftf.getFilename().equals("")
                    || ftf.getFilename().toLowerCase().trim().indexOf(".zip") == -1) {
                throw new Exception("文件格式有误");
            }
            String url = SysProperties.get("svg.url"), zip = SysProperties.get("svg.zip");
            String path = "", filename = "svg.zip";
            if (url.equals("resource")) {
//                path = ProjectInfo.getProjectRealPathConvert() + filename;
            	path = Tool.getRealPath() + filename;
//                url = ProjectInfo.getProjectRealPathConvert() + url + "/svg/"+type;
            	url = Tool.getRealPath() + url + "/svg/"+type;
            } else {
                path = zip + filename;
                url = url + "/svg/"+type;
            }
            
            try{
            	this.inputstreamtofile(ftf.getInputStream(), path);
                ZipUtils.unZip(path, url, true);
                // ZipUtil.unZip(path, url);
                this.deleteFile(path);
            }catch(Exception e){
            	url = "/"+url;
                path = "/"+path;
                this.inputstreamtofile(ftf.getInputStream(), path);
                ZipUtils.unZip(path, url, true);
                // ZipUtil.unZip(path, url);
                this.deleteFile(path);
            }
            
            ret.setMessage("上传SVG图标ZIP完成");
            log.dLog("批量上传SVG图标ZIP完成");
        } catch (Exception me) {
            log.eLog(me);
            ret.setSuccess(false).setMessage(me.getMessage());
        }
        return ret;
    }

    @Override
    @RemoteMethod
    /*public Return importSvg(FileTransfer ftf, String type) {
        Return ret = new Return();
        try {
            log.dLog("importSvg");
            if (ftf.getFilename().equals("") || ftf.getFilename().toLowerCase().trim().indexOf(".svg") == -1) {
                throw new Exception("文件格式有误");
            }
            String url = SysProperties.get("svg.url"), filename = new String(
                    ftf.getFilename().getBytes("GBK"), "UTF-8");
            if (url.equals("resource")) {
                url = ProjectInfo.getProjectRealPathConvert() + url + "/svg/_blue"
                        + filename;
            } else {
                url = url + "/svg/_blue" + filename;
            }
            
            try{
            	FileUtil.write(url, ftf.getInputStream());
            }catch(Exception e){
            	url = "/"+url;
            	FileUtil.write(url, ftf.getInputStream());
            }
            
            ret.setMessage("上传SVG图标完成");
            log.dLog("importSvg success");
        } catch (Exception me) {
            log.eLog(me);
            ret.setSuccess(false).setMessage(me.getMessage());
        }
        return ret;
    }*/
    public Return importSvg(FileTransfer ftf, String type) {
        Return ret = new Return();
        FileOutputStream fos = null;
        try {
            log.dLog("importSvg");
            if(type==null||type.length()==0){
            	type = SysProperties.get("svg.base");
            }
            if (ftf.getFilename().equals("") || ftf.getFilename().toLowerCase().trim().indexOf(".svg") == -1) {
                throw new Exception("文件格式有误");
            }
            String url = SysProperties.get("svg.url"), filename = new String(
                    ftf.getFilename().getBytes("GBK"), "UTF-8");
//            String basePath = ProjectInfo.getProjectRealPathConvert() + "/" + url + "/svg/";
            String basePath = Tool.getRealPath() + "/" + url + "/svg/";
            File baseFile = new File(basePath);
            if(!baseFile.exists()){
            	basePath = "/" + basePath;
            	baseFile = new File(basePath);
            }
            File[] children = baseFile.listFiles();
            boolean hasType = false;
            for(File child:children){
            	if(child.isDirectory()){
            		if(child.getName().equals(type)){
            			hasType = true;
            			break;
            		}
            	}
            }
            if(!hasType){
            	File typeDir = new File(basePath + type);
            	typeDir.mkdir();
            }
            File svgFile = new File(basePath + type + "/" + filename);
            byte[] buff = new byte[1024];
            InputStream is = ftf.getInputStream();
            fos = new FileOutputStream(svgFile);
            while(true){
            	int index = is.read(buff);
            	if(index<0){
            		break;
            	}
            	fos.write(buff, 0, index);
            }
            is.close();
            
            ret.setMessage("上传SVG图标完成");
            log.dLog("importSvg success");
        } catch (Exception me) {
            log.eLog(me);
            ret.setSuccess(false).setMessage(me.getMessage());
        } finally {
        	if(fos!=null){
        		try {
					fos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        	fos = null;
        }
        return ret;
    }

    @Override
    @RemoteMethod
    public Return qureyForAdmin(String name, int page, int pageSize) {
        Return ret = new Return();
        try {
            log.dLog("qureyForAdmin");
            String path = SysProperties.get("svg.url");
            if (path.equals("resource")) {
//                path = ProjectInfo.getProjectRealPathConvert() + path + "/ownsvg";
                path = Tool.getRealPath() + path + "/ownsvg";
            } else {
                path = path + "/ownsvg";
            }System.out.println("99999999999999999====="+path);
            Map<String, Object> retMap = this.queryResultForAdmin(path, name, page, pageSize, false);
            List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
            List<String> datas = (List<String>) retMap.get("datas");
            List<String> useImages = ciCateService.getUseImages();
            String prefix = Tool.findPath("graph", "resource");
            for (String data : datas) {
            	if(data.toLowerCase().endsWith("svg")||data.toLowerCase().endsWith("jpg")||data.toLowerCase().endsWith("gif")||data.toLowerCase().endsWith("png")||data.toLowerCase().endsWith("bmp")||data.toLowerCase().endsWith("jpeg")){
            		 Map<String, Object> m = new HashMap<String, Object>();
                     if (useImages.contains(data)) {
                         m.put("isUse", true);
                     } else {
                    	 m.put("isUse", false);
                     }
                     m.put("url", prefix+"/ownsvg/"+data);
                     list.add(m);
            	}
            }
            retMap.put("datas", list);
            ret.setData(retMap).setMessage("查询成功");
            log.dLog("qureyForAdmin success");
        } catch (Exception e) {
            log.eLog(e);
            ret.setSuccess(false).setMessage(e.getMessage());
        }
        System.out.println(ret);
        return ret;
    }
    
    private Map<String, Object> queryResultForAdmin(String path, String name, int page,
            int pageSize, boolean filter) throws Exception {
    	File f = new File(path);
    	if(!f.exists()){
    		path = "/"+path;
    	}
		List<String> list = FileBrowes.readFile(path, "");
		// 删除已使用的就会做标记
		if (filter) {
			List<String> useImages = ciCateService.getUseImages();
			for (String image : useImages) {
				list.remove(image);
			}
		}
		List<String> datas = new ArrayList<String>();
		if (name == null || name.equals("")) {
			datas.addAll(list);
		} else {
			for (String na : list) {
				if (na.contains(name)) {
					datas.add(na);
				}
			}
		}
		// 排序
		Collections.sort(datas, new Comparator<String>() {
			public int compare(String arg0, String arg1) {
				return arg0.compareTo(arg1);
			}
		});
		// 构建分页数据输出
		int count = datas.size();
		int start = (page - 1) * pageSize;
		start = start < 0 ? 0 : start;
		int end = page * pageSize;
		start = start > count ? count : start;
		end = end > count ? count : end;
		datas = datas.subList(start, end);
		Map<String, Object> retMap = new HashMap<String, Object>();
		retMap.put("count", count);
		retMap.put("page", page);
		retMap.put("pageSize", pageSize);
		retMap.put("datas", datas);
		return retMap;
    }

    @Override
    @RemoteMethod
    public Return qureyByIdleForAdmin(String name, int page, int pageSize) {
        Return ret = new Return();
        try {
            log.dLog("qureyByIdForAdmin");
            String path = SysProperties.get("svg.url");
            if (path.equals("resource")) {
//                path = ProjectInfo.getProjectRealPathConvert() + path + "/ownsvg";
            	path = Tool.getRealPath() + path + "/ownsvg";
            } else {
                path = path + "/ownsvg";
            }
            Map<String, Object> retMap = this.queryResult(path, name, page, pageSize, true);
            ret.setData(retMap).setMessage("查询成功");
            log.dLog("qureyByIdForAdmin success");
        } catch (Exception e) {
            log.eLog(e);
            ret.setSuccess(false).setMessage(e.getMessage());
        }
        return ret;
    }

    @Override
    @RemoteMethod
    public Return deleteByNameForAdmin(String name) {
        Return ret = new Return();
        try {
            log.dLog("deleteByNameForAdmin");
            String url = SysProperties.get("svg.url");
            List<String> list = new ArrayList<String>();
            if (url.equals("resource")) {
//                url = ProjectInfo.getProjectRealPathConvert() + url + "/ownsvg";
            	url = Tool.getRealPath() + url + "/ownsvg";
            } else {
                url = url + "/ownsvg";
            }
            try{
            	list = FileBrowes.readFile(url, "");
            }catch(Exception e){
            	url = "/" + url;
            	list = FileBrowes.readFile(url, "");
            }
            
            List<String> useImgs = ciCateService.getUseImages();
            if (list.contains(name)) {
                if (useImgs.contains(name)) {
                    throw new Exception("图标[" + name + "]已被使用，不能删除");
                }
                FileBrowes.delFile(url, name);
            } else {
                throw new Exception("图标[" + name + "]不存在");
            }
            ret.setMessage("删除图标成功");
            log.dLog("deleteByNameForAdmin success");
        } catch (Exception e) {
            log.eLog(e);
            ret.setSuccess(false).setMessage(e.getMessage());
        }
        return ret;
    }

    @Override
    @RemoteMethod
    public FileTransfer exportZipForAdmin() throws Exception {
        log.dLog("exportZipForAdmin");
        String url = SysProperties.get("svg.url"), zip = SysProperties.get("svg.zip");
        String path = "", filename = "svg.zip";
        if (url.equals("resource")) {
//            path = ProjectInfo.getProjectRealPathConvert() + filename;
        	path = Tool.getRealPath() + filename;
//            url = ProjectInfo.getProjectRealPathConvert() + url + "/ownurl";
        	url = Tool.getRealPath() + url + "/ownurl";
        } else {
            path = zip + filename;
            url = url + "/ownurl";
        }
        ZipUtils.zip(url, path);
        BufferedInputStream in = new BufferedInputStream(new FileInputStream(path));
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] temp = new byte[1024];
        int size = 0;
        while ((size = in.read(temp)) != -1) {
            out.write(temp, 0, size);
        }
        in.close();
        out.close();
        this.deleteFile(path);
        log.dLog("exportZipForAdmin success");
        return new FileTransfer(new String("图标库".getBytes("GBK"), "iso8859-1")
                + TimeUtil.getTime(TimeUtil.YMDHMS) + ".zip", "application/zip", out.toByteArray());
    }

    @Override
    @RemoteMethod
    public Return importZipForAdmin(FileTransfer ftf) {
        Return ret = new Return();
        try {
            log.dLog("importZipForAdmin");
            if (ftf.getFilename().equals("") || ftf.getFilename().toLowerCase().trim().indexOf(".zip") == -1) {
                throw new Exception("文件格式有误");
            }
            String url = SysProperties.get("svg.url"), zip = SysProperties.get("svg.zip");
            String path = "", filename = "svg.zip";
            if (url.equals("resource")) {
//                path = ProjectInfo.getProjectRealPathConvert() + filename;
                path = Tool.getRealPath() + filename;
//                url = ProjectInfo.getProjectRealPathConvert() + url + "/ownsvg";
                url = Tool.getRealPath() + url + "/ownsvg";
            } else {
                path = zip + filename;
                url = url + "/ownsvg";
            }
            this.inputstreamtofile(ftf.getInputStream(), path);
            ZipUtils.unZip(path, url, true);
            this.deleteFile(path);
            ret.setMessage("上传SVG图标ZIP完成");
            log.dLog("importZipForAdmin success");
        } catch (Exception me) {
            log.eLog(me);
            ret.setSuccess(false).setMessage(me.getMessage());
        }
        return ret;
    }

    @Override
    @RemoteMethod
    public Return importSvgForAdmin(FileTransfer ftf) {
        Return ret = new Return();
        try {
            log.dLog("importSvgForAdmin");
            if (ftf.getFilename().equals("")) {
                throw new Exception("文件为空");
            } else {
                String name = ftf.getFilename().toLowerCase().trim();
                if (name.indexOf(".svg") != -1 && name.indexOf(".png") != -1
                        && name.indexOf(".jpg") != -1 && name.indexOf(".gif") != -1) {
                    throw new Exception("请上传格式为svg/png/jpg/gif的文件");
                }
            }
            String url = SysProperties.get("svg.url"), filename = ftf.getFilename();
            filename = filename.substring(
                    filename.lastIndexOf("\\") + 1, filename.length());
            if (url.equals("resource")) {
//                url = ProjectInfo.getProjectRealPathConvert() + url + "/ownsvg/" + filename;
            	url = Tool.getRealPath() + url + "/ownsvg/" + filename;
            } else {
                url = url + "/ownsvg/" + filename;
            }
            if(!(new File(url)).exists()){
            	url = "/" + url;
            }
            FileUtil.write(url, ftf.getInputStream());
            String prefix = Tool.findPath("graph", "resource");
            String result = prefix + "/ownsvg/" + filename;
            ret.setData(result).setMessage("上传图标完成");
            log.dLog("importSvgForAdmin success");
        } catch (Exception me) {
            log.eLog(me);
            ret.setSuccess(false).setMessage(me.getMessage());
        }
        System.out.println(ret);
        return ret;
    }

    /**判断是否汉字
     *
     * @param ch
     * @return
     */
    private boolean isHanZi(char ch) {
        return (ch >= 0x4E00 && ch <= 0x9FA5);
    }

    @Override
    @RemoteMethod
    public Return getFontStyles(List<String> fonts) {
        Return ret = new Return();
        try {
            log.dLog("getFontStyles");
            Map<String, Object> map_zh = new HashMap<String, Object>();
            Map<String, Object> map_en = new HashMap<String, Object>();
            if (fonts == null || fonts.size() == 0) {
                throw new Exception("参数不能为空");
            }
            if (FONTCACHE_ZH != null && FONTCACHE_ZH.size() > 0) {
                map_zh.putAll(FONTCACHE_ZH);
            } else {
                String url_zh = SysProperties.get("font.style.zh");
                if (url_zh.startsWith("resource/css")) {
//                    url_zh = ProjectInfo.getProjectRealPathConvert() + url_zh;
                    url_zh = Tool.getRealPath() + url_zh;
                }
                String json_zh = null;
                try{
                	json_zh = FileUtil.read2string(url_zh, "UTF-8", false);
                }catch(Exception e){
                	url_zh = "/" + url_zh;
                	json_zh = FileUtil.read2string(url_zh, "UTF-8", false);
                }
                int startNum = json_zh.indexOf("({") + 1;
                int endNum = json_zh.indexOf("});") + 1;
                json_zh = json_zh.substring(startNum, endNum);
                map_zh = JsonUtil.decodeByJackSon(json_zh, Map.class);
                FONTCACHE_ZH.putAll(map_zh);
            }
            if (FONTCACHE_EN != null && FONTCACHE_EN.size() > 0) {
                map_en.putAll(FONTCACHE_EN);
            } else {
                String url_en = SysProperties.get("font.style.en");
                if (url_en.startsWith("resource/css")) {
                    url_en = Tool.getRealPath() + url_en;
                }
                String json_en = null;
                try{
                	json_en = FileUtil.read2string(url_en, "UTF-8", false);
                }catch(Exception e){
                	url_en = "/" + url_en;
                	json_en = FileUtil.read2string(url_en, "UTF-8", false);
                }
                int startNum = json_en.indexOf("({") + 1;
                int endNum = json_en.indexOf("});") + 1;
                json_en = json_en.substring(startNum, endNum);
                map_en = JsonUtil.decodeByJackSon(json_en, Map.class);
                FONTCACHE_EN.putAll(map_en);
            }
            Map<String, Object> retMap = new HashMap<String, Object>();
            if (map_zh != null && map_zh.containsKey("glyphs") && map_en != null && map_en.containsKey("glyphs")) {
                Map<String, Object> gMap_zh = (Map<String, Object>) map_zh.get("glyphs");
                Map<String, Object> gMap_en = (Map<String, Object>) map_en.get("glyphs");
                for (String font : fonts) {
                    if(isHanZi(font.charAt(0))){
                        if (gMap_zh.containsKey(font)) {
                            Object obj = gMap_zh.get(font);
                            retMap.put(font, obj);
                        }
                    }else{
                        if (gMap_en.containsKey(font)) {
                            Object obj = gMap_en.get(font);
                            retMap.put(font, obj);
                        }
                    }
                }
            }
            ret.setData(retMap).setMessage("获取字体样式完成");
            log.dLog("getFontStyles success");
        } catch (Exception me) {
            log.eLog(me);
            ret.setSuccess(false).setMessage(me.getMessage());
        }
        return ret;
    }
    
    @Override
    @RemoteMethod
    public Return svgPathTo3dPath(List<String> svgs) {
        Return ret = new Return();
        try {
            log.dLog("svgPathTo3dPath");
            List<Map<String, String>> result = new ArrayList<Map<String, String>>();
            String path = SysProperties.get("svg.url");
            String basePath = Tool.getRealPath() + "/" + path + "/3d/";
            Map<String, String> defaultObj = new HashMap<String, String>();
            defaultObj.put("mtl", "hqhmd.mtl");
            defaultObj.put("obj", "hqhmd.obj");
            Map<String, Map<String, String>> existMap = new HashMap<String, Map<String, String>>();
            if(!(new File(basePath)).exists()){
            	basePath = "/" + basePath;
            }
            for(String svg:svgs){
            	Map<String, String> m = existMap.get(svg);
            	if(m==null){
            		m = new HashMap<String, String>();
            		String[] sArr = svg.split("/");
                	String type = sArr[sArr.length-2];
                	String name = sArr[sArr.length-1];
                	name = name.substring(0, name.length()-4);
                	String front = "";
                	for(int i=0;i<sArr.length-3;i++){
                		front = front + sArr[i] + "/";
                	}
                	m.put("svg", svg);
                	File mtlFile = new File(basePath+type+"/"+name+".mtl");
                	File objFile = new File(basePath+type+"/"+name+".obj");
                	if(mtlFile.exists()&&objFile.exists()){
                		m.put("mtl", front + "3d/" + type + "/" + name + ".mtl");
                		m.put("obj", front + "3d/" + type + "/" + name + ".obj");
                	}else{
                		m.put("mtl", front + "3d/" + type + "/" + defaultObj.get("mtl"));
                		m.put("obj", front + "3d/" + type + "/" + defaultObj.get("obj"));
                	}
                	existMap.put(svg, m);
            	}
            	result.add(m);
            }
            ret.setData(result).setMessage("SVG转3D成功");
            log.dLog("svgPathTo3dPath success");
        }catch(Exception e){
        	log.eLog(e);
            ret.setSuccess(false).setMessage(e.getMessage());
        }
        System.out.println(ret);
        return ret;
    }
    
    @Override
    @RemoteMethod
    public Return getSvgPath(String type) {
        Return ret = new Return();
        try {
            log.dLog("getSvgPath");
            String prefix = Tool.findPath("graph", "resource");
            ret.setData(prefix + "/svg/" + type).setMessage("获取SVG相对路径成功");
            log.dLog("getSvgPath success");
        }catch(Exception e){
        	log.eLog(e);
            ret.setSuccess(false).setMessage(e.getMessage());
        }
        return ret;
    }
    
    @Override
    @RemoteMethod
    public Return getType() {
        Return ret = new Return();
        try {
            log.dLog("getType");
            String path = SysProperties.get("svg.url");
            String basePath = Tool.getRealPath() + "/" + path + "/svg/";
            if(!(new File(basePath)).exists()){
            	basePath = "/" + basePath;
            }
            File[] children = (new File(basePath)).listFiles();
            List<String> result = new ArrayList<String>();
            for(File child:children){
            	if(child.isDirectory()){
            		result.add(child.getName());
            	}
            }
            ret.setData(result).setMessage("获取主题成功");
            log.dLog("getType success");
        }catch(Exception e){
        	log.eLog(e);
            ret.setSuccess(false).setMessage(e.getMessage());
        }
        return ret;
    }
    
    @Override
    @RemoteMethod
    public Return getAllPathBySvgs(List<String> svgs, String type) {
        Return ret = new Return();
        try {
            log.dLog("getAllPathBySvgs");
            List<Map<String, String>> result = new ArrayList<Map<String, String>>();
            String path = SysProperties.get("svg.url");
            String basePathSvg = Tool.getRealPath() + "/" + path + "/svg/";
            String basePath3d = "";
            if(!(new File(basePathSvg)).exists()){
            	basePathSvg = "/" + basePathSvg;
            	basePath3d = "/" + Tool.getRealPath() + "/" + path + "/3d/";
            }
            Map<String, String> defaultObj = new HashMap<String, String>();
            defaultObj.put("mtl", "hqhmd.mtl");
            defaultObj.put("obj", "hqhmd.obj");
            defaultObj.put("svg", "hqhmd.svg");
            Map<String, Map<String, String>> existMap = new HashMap<String, Map<String, String>>();
            
            for(String svg:svgs){
            	String[] sArr = svg.split("/");
            	String name = sArr[sArr.length-1];
            	name = name.substring(0, name.length()-4);
            	String so3 = sArr[sArr.length-3];
            	String front = "";
            	for(int i=0;i<sArr.length-3;i++){
            		front = front + sArr[i] + "/";
            	}
            	if(so3.equals("svg")){
            		Map<String, String> m = existMap.get(svg);
                	if(m==null){
                		m = new HashMap<String, String>();
                		
                    	File svgFile = new File(basePathSvg+type+"/"+name+".svg");
                    	File mtlFile = new File(basePath3d+type+"/"+name+".mtl");
                    	File objFile = new File(basePath3d+type+"/"+name+".obj");
                    	if(svgFile.exists()){
                    		m.put("svg", front + "svg/" + type + "/" + name + ".svg");
                    	}else{
                    		m.put("svg", front + "svg/" + type + "/" + defaultObj.get("svg"));
                    	}
                    	if(mtlFile.exists()&&objFile.exists()){
                    		m.put("mtl", front + "3d/" + type + "/" + name + ".mtl");
                    		m.put("obj", front + "3d/" + type + "/" + name + ".obj");
                    	}else{
                    		m.put("mtl", front + "3d/" + type + "/" + defaultObj.get("mtl"));
                    		m.put("obj", front + "3d/" + type + "/" + defaultObj.get("obj"));
                    	}
                    	m.put("path", svg);
                    	existMap.put(svg, m);
                	}
                	result.add(m);
            	}else{
            		Map<String, String> m = new HashMap<String, String>();
            		m.put("svg", svg);
            		m.put("mtl", front + "3d/" + type + "/" + defaultObj.get("mtl"));
            		m.put("obj", front + "3d/" + type + "/" + defaultObj.get("obj"));
            	}
            }
            ret.setData(result).setMessage("按SVG获取主题路径成功");
            log.dLog("getAllPathBySvgs success");
        }catch(Exception e){
        	log.eLog(e);
            ret.setSuccess(false).setMessage(e.getMessage());
        }
        System.out.println(ret);
        return ret;
    }
}