package com.mmdb.service.icon.impl;

import java.util.ArrayList;
import java.util.List;

import org.apache.lucene.search.BooleanQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mmdb.core.framework.neo4j.QueryUtil;
import com.mmdb.core.framework.neo4j.QueryUtil.Occur;
import com.mmdb.core.framework.neo4j.proxy.AbstractDomain;
import com.mmdb.model.icon.IconLibrary;
import com.mmdb.model.icon.storage.IconLibrayStorage;
import com.mmdb.service.icon.IIconLibraryService;

@Service
public class IconLibraryServiceImpl extends AbstractDomain implements IIconLibraryService {
    @Autowired
    private IconLibrayStorage iLibrayStorage;

    @Override
   
    public IconLibrary save(IconLibrary icon) throws Exception {
        return iLibrayStorage.save(icon);
    }

    @Override
   
    public void save(List<IconLibrary> icons) throws Exception {
        for (IconLibrary icon : icons) {
            iLibrayStorage.save(icon);
        }
    }

    @Override
    public IconLibrary getByProperty(String key, Object value) throws Exception {
        List<IconLibrary> icons = iLibrayStorage.getByProperty(key, value);
        return icons.size() > 0 ? icons.get(0) : null;
    }

    @Override
    public IconLibrary getById(String id) throws Exception {
        return iLibrayStorage.getIconById(id);
    }

    @Override
    public IconLibrary getById(Long neo4jid) throws Exception {
        return iLibrayStorage.getOne(neo4jid);
    }

    @Override
   
    public void delete(IconLibrary icon) throws Exception {
        iLibrayStorage.delete(icon);
    }

    @Override
   
    public void delete(List<IconLibrary> icons) throws Exception {
        iLibrayStorage.delete(icons);
    }

    @Override
    public IconLibrary update(IconLibrary icon) throws Exception {
        return iLibrayStorage.update(icon);
    }

    @Override
    public List<IconLibrary> query(String id) throws Exception {
        if (id != null && !id.equals("")) {
            BooleanQuery bq = QueryUtil.booleanQuery();
            bq.add(QueryUtil.wildcardQuery("icon", id), Occur.SHOULD.value());
            bq.add(QueryUtil.wildcardQuery("model", id), Occur.SHOULD.value());
            return iLibrayStorage.query(bq);
        } else {
            return iLibrayStorage.getAll();
        }

    }

    @Override
    public List<String> getUseIcons(String id) throws Exception {
        List<String> retList = new ArrayList<String>();
        List<IconLibrary> icons = iLibrayStorage.getAll();
        for (IconLibrary icon : icons) {
            retList.add(icon.getIcon());
        }
        return retList;
    }
}
