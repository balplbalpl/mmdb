package com.mmdb.service.performance.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;

import com.mmdb.model.bean.PerformanceBean;
import com.mmdb.model.role.IRoleDao;
import com.mmdb.model.role.storage.RoleDao;
import com.mmdb.service.performance.IPerformanceService;
import com.mmdb.util.HexString;

public class PerformanceService implements IPerformanceService {

	private IRoleDao roleDao = new RoleDao();
	@Override
	public Map<Integer,List<PerformanceBean>> getAllPerformanceDatas(int start, int limit) {
		// TODO Auto-generated method stub
		Map<Integer,List<PerformanceBean>> map = new HashMap<Integer,List<PerformanceBean>>();
		List<PerformanceBean> list = new ArrayList<PerformanceBean>();			                    
		String sql = "select * from Performance order by `time` desc limit "+start+","+limit;
		Integer count = roleDao.getCount(sql);
		ResultSet rs = roleDao.getAll(sql);	
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {
			while(rs.next()){
				String ciHex = rs.getString("ciHex");
				String kpiHex = rs.getString("kpiHex");
				String ciId = rs.getString("ciId");
				String kpiId = rs.getString("kpiId");
				//分类，子类;
				//kpi CPU,KPI
				ciHex = HexString.decode(ciHex);
				kpiHex = HexString.decode(kpiHex);
				JSONArray cis = JSONArray.fromObject(ciHex);
				JSONArray kpis = JSONArray.fromObject(kpiHex);
				String ciCate = cis.getString(0);
				String ciName = cis.getString(1);
				String kpiCate= kpis.getString(0);
				String kpiName = kpis.getString(1);
				String val = rs.getString("val");
				String instance = rs.getString("instance");
				Long stime = rs.getLong("time");
				String startTime = sf.format(new Date(stime));
				
				PerformanceBean bean = new PerformanceBean();
				bean.setCiCate(ciCate);
				bean.setCiName(ciName);
				bean.setKpiCate(kpiCate);
				bean.setKpiName(kpiName);
				bean.setStartTime(startTime);
				bean.setValue(val);
				bean.setInstance(instance);
				bean.setCiId(ciId);
				bean.setKpiId(kpiId);
				list.add(bean);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		map.put(count, list);
		return map;
	}

	@Override
	public Map<Integer,List<PerformanceBean>> getAllPerformanceDatasByInstance(
			String pcis, String pkpis, int start,int limit) {
		Map<Integer,List<PerformanceBean>> map = new HashMap<Integer,List<PerformanceBean>>();
		List<PerformanceBean> list = new ArrayList<PerformanceBean>();			                    
		String sql = "select * from Performance where ciHex='"+pcis+"' and kpiHex='"+pkpis+"' order by `time` desc limit "+start+","+limit;
		Integer count = roleDao.getCount(sql);
		ResultSet rs = roleDao.getAll(sql);	
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {
			while(rs.next()){
				String ciHex = rs.getString("ciHex");
				String kpiHex = rs.getString("kpiHex");
				String ciId = rs.getString("ciId");
				String kpiId = rs.getString("kpiId");
				//分类，子类;
				//kpi CPU,KPI
				ciHex = HexString.decode(ciHex);
				kpiHex = HexString.decode(kpiHex);
				JSONArray cis = JSONArray.fromObject(ciHex);
				JSONArray kpis = JSONArray.fromObject(kpiHex);
				String ciCate = cis.getString(0);
				String ciName = cis.getString(1);
				String kpiCate= kpis.getString(0);
				String kpiName = kpis.getString(1);
				String val = rs.getString("val");
				String instance = rs.getString("instance");
				Long stime = rs.getLong("time");
				String startTime = sf.format(new Date(stime));
				
				PerformanceBean bean = new PerformanceBean();
				bean.setCiCate(ciCate);
				bean.setCiName(ciName);
				bean.setKpiCate(kpiCate);
				bean.setKpiName(kpiName);
				bean.setStartTime(startTime);
				bean.setValue(val);
				bean.setInstance(instance);
				bean.setCiId(ciId);
				bean.setKpiId(kpiId);
				list.add(bean);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		map.put(count, list);
		return map;
	}

	@Override
	public List<PerformanceBean> getTreeData() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Map<Integer, List<PerformanceBean>> getAllPerformanceDatasByInstance(
			String qciCate, String qci, String qkpiCate,String qkpi,String instanceName,String s_startTime, String s_endTime, int start,
			int limit) {
		Map<Integer,List<PerformanceBean>> map = new HashMap<Integer,List<PerformanceBean>>();
		List<PerformanceBean> list = new ArrayList<PerformanceBean>();	
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String queryString = "where";
		if(qciCate.length() > 0){
			queryString += " `ciCategoryId` = '" + qciCate +  "' and";
		}	
		if(qci.length() > 0){
			queryString += " `ciId` = '" + qci + "' and";
		}	
		if(qkpiCate.length() > 0){
			queryString += " `kpiCategoryId` = '" + qkpiCate +"' and";
		}
		if(qkpi.length() > 0){
			queryString += " `kpiId` = '" + qkpi + "' and";
		}
		if(instanceName.length() > 0){
			queryString += " `instance` = '" + instanceName + "' and";
		}
		if(s_startTime.length() > 0){
			long startTime = 0;
			long endTime = 0;
			try {
				startTime = sf.parse(s_startTime).getTime();
				endTime = sf.parse(s_endTime).getTime();
			} catch (ParseException e) {
				e.printStackTrace();
			}
			queryString += " `time` >= " + startTime + " and `time` <=" + endTime +" and";
		}
		
		if(queryString.equals("where")){
			queryString = "";
		}else{
			queryString = queryString.substring(0,queryString.length()-3);
		}
		
		String sql = "select * from Performance " + queryString
				+ " order by ciHex,kpiHex,time desc limit "+start+","+limit;
		Integer count = roleDao.getCount(sql);
		System.out.println(sql);
		ResultSet rs = roleDao.getAll(sql);	
		try {
			while(rs.next()){
				String ciHex = rs.getString("ciHex");
				String kpiHex = rs.getString("kpiHex");
				String ciId = rs.getString("ciId");
				String kpiId = rs.getString("kpiId");
				//分类，子类;
				//kpi CPU,KPI
				ciHex = HexString.decode(ciHex);
				kpiHex = HexString.decode(kpiHex);
				JSONArray cis = JSONArray.fromObject(ciHex);
				JSONArray kpis = JSONArray.fromObject(kpiHex);
				String ciCate = cis.getString(0);
				String ciName = cis.getString(1);
				String kpiCate= kpis.getString(0);
				String kpiName = kpis.getString(1);
				String val = rs.getString("val");
				String instance = rs.getString("instance");
				Long stime = rs.getLong("time");
				String sTimes = sf.format(new Date(stime));
				
				PerformanceBean bean = new PerformanceBean();
				bean.setCiCate(ciCate);
				bean.setCiName(ciName);
				bean.setKpiCate(kpiCate);
				bean.setKpiName(kpiName);
				bean.setStartTime(sTimes);
				bean.setValue(val);
				bean.setInstance(instance);
				bean.setCiId(ciId);
				bean.setKpiId(kpiId);
				list.add(bean);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		map.put(count, list);
		return map;
	}

	@Override
	public boolean deleteAll() {
		// TODO Auto-generated method stub
		return roleDao.deleteObject("delete from Performance");
	}

}
