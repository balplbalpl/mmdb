package com.mmdb.rest.subscription;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;

import net.sf.json.JSONObject;

import org.restlet.Context;
import org.restlet.Request;
import org.restlet.Response;
import org.restlet.data.Status;
import org.restlet.ext.json.JsonRepresentation;
import org.restlet.representation.Representation;
import org.restlet.resource.Delete;
import org.restlet.resource.Get;
import org.restlet.resource.Post;
import org.restlet.resource.ServerResource;

import com.mmdb.core.log.Log;
import com.mmdb.core.log.LogFactory;
import com.mmdb.core.utils.SpringContextUtil;
import com.mmdb.model.bean.User;
import com.mmdb.model.info.ViewInformation;
import com.mmdb.service.info.IViewInfoService;
import com.mmdb.service.role.IUserService;
import com.mmdb.service.role.impl.UserService;
import com.mmdb.service.subscription.ISubscriptionService;

/**
 * 用于管理订阅,可以订阅视图和组合视图
 * 
 * @author xiongjian
 * @path /subscription/view
 */
public class SubscriptionViewRest extends ServerResource {
	private Log log = LogFactory.getLogger("SubscriptionRest");
	private IUserService userService;
	private IViewInfoService vInfoService;
	private ISubscriptionService subService;

	@Override
	public void init(Context context, Request request, Response response) {
		super.init(context, request, response);
		userService = new UserService();
		vInfoService = (IViewInfoService) SpringContextUtil
				.getApplicationContext().getBean("viewInfoService");
		subService = (ISubscriptionService) SpringContextUtil
				.getApplicationContext().getBean("subscriptionService");
	}

	@Get
	public Representation getMethod(Representation entity) {
		JSONObject ret = new JSONObject();
		// action
		String param1 = (String) getRequestAttributes().get("param1");
		// id
		String param2 = (String) getRequestAttributes().get("param2");

		if (param1 != null) {
			try {
				param1 = URLDecoder.decode(param1, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + param1 + "]解析失败");
				getResponse().setStatus(new Status(600));
			}
		}

		String operation = null;
		try {
			if ("hashistory".equals(param1)) {
				// 订阅视图
				return hasHistory(param2);
			}
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "[" + operation + "]解析失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	@Post
	public Representation postMethod(Representation entity) {
		JSONObject ret = new JSONObject();
		// action
		String param1 = (String) getRequestAttributes().get("param1");
		// id
		String param2 = (String) getRequestAttributes().get("param2");

		if (param1 != null) {
			try {
				param1 = URLDecoder.decode(param1, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + param1 + "]解析失败");
				getResponse().setStatus(new Status(600));
			}
		}
		if (param2 != null) {
			try {
				param2 = URLDecoder.decode(param2, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + param2 + "]解析失败");
				getResponse().setStatus(new Status(600));
			}
		}

		String operation = null;
		try {
			if ("restore".equals(param1)) {
				return restoreSubscriptionView(param2);
			} else if (param2 == null) {
				// 订阅视图
				return subscriptionView(param1);
			}
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "[" + operation + "]解析失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	@Delete
	public Representation delMethod(Representation entity) {
		JSONObject ret = new JSONObject();
		// action
		String param1 = (String) getRequestAttributes().get("param1");
		// id
		// String param2 = (String) getRequestAttributes().get("param2");

		if (param1 != null) {
			try {
				param1 = URLDecoder.decode(param1, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + param1 + "]解析失败");
				getResponse().setStatus(new Status(600));
			}
		}

		String operation = null;
		try {
			// 订阅视图
			return unsubscriptionView(param1);
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "[" + operation + "]解析失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	/**
	 * 订阅视图
	 * 
	 * @return
	 */
	private Representation subscriptionView(String viewId) {
		JSONObject ret = new JSONObject();
		try {
			ViewInformation vInfo = vInfoService.getById(viewId);
			subService.save(getUser().getLoginName(), vInfo);
			ret.put("message", "订阅成功");
		} catch (Exception e) {
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}

		return new JsonRepresentation(ret.toString());
	}

	/**
	 * 恢复视图订阅
	 * 
	 * @param viewId
	 * @return
	 */
	private Representation restoreSubscriptionView(String viewId) {
		JSONObject ret = new JSONObject();
		try {
			subService.restoreHistory(viewId, getUser().getLoginName());
			ret.put("message", "恢复订阅成功");
		} catch (Exception e) {
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	/**
	 * 获取订阅是否有历史
	 * 
	 * @param viewId
	 * @return
	 */
	private Representation hasHistory(String viewId) {
		JSONObject ret = new JSONObject();
		try {
			boolean flag = subService.hasHistory(viewId, getUser()
					.getLoginName());
			ret.put("data", flag);
			ret.put("message", "查询成功");
		} catch (Exception e) {
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	/**
	 * 
	 * @param viewId
	 * @return
	 */
	private Representation unsubscriptionView(String viewId) {
		JSONObject ret = new JSONObject();
		try {
			subService.delete(getUser().getLoginName(), viewId);
			ret.put("message", "取消订阅成功");
		} catch (Exception e) {
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}

		return new JsonRepresentation(ret.toString());
	}

	public User getUser() {
		// Series<Header> headers = getRequest().getHeaders();
		// String values = headers.getValues("token");
		// if (values == null || "".equals(values))
		// return null;
		// Des des = new Des();
		// String decrypt = des.decrypt(values);
		// System.out.println(decrypt);
		// String[] split = decrypt.split("\\|");
		// return userService.getUserByLoginName(split[0]);
		User user = new User();
		user.setUserName("admin");
		user.setLoginName("admin");
		return user;
	}
}
