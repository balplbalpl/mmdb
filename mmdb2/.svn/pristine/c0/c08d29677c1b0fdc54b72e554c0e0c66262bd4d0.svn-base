(function(graph, self){

	'use strict';

	self.layerPd = 10;
	self.layerItemMl = 5;
	self.gzMax = 10;
	self.eventDelay = 200;
	self.vClass = 'v';
	self.attrViewId = 'data-viewid';
	self.map = {};
	self.viewsMap = {};
	self.defaultClass = 'view-box-max';

	self.initViews = function(){
		var result = graph.api.getPubViewCateByTree(),
			list = [],
			update;

		self.$viewsInfo = $('#viewsInfo');
		self.$filterViews = $('#filterViews');
		self.$views = $('#views');

		self.$views.height($(window).height() - self.$views.offset().top - 10);

		update = function(){
			var value = $.trim(self.$filterViews.val()).toLowerCase(),
				isHasFilter = false;

			if(value){
				self.$viewsBox.hide();
				self.$viewsBox.each(function(){
					if($(this).attr('data-viewname').toLowerCase().indexOf(value) >= 0){
						$(this).show();
						isHasFilter = true;
					}
				});
			}else{
				self.$viewsBox.show();
				isHasFilter = true;
			}

			isHasFilter ? self.$viewsInfo.hide() : self.$viewsInfo.show();
		};

		if(graph.utils.isTrueRet(result)){
			$.each(result.data, function(){
				var _this = this;
				if(_this.image){
					list.push(_this);
					self.viewsMap[_this.id] = _this;
				}
			});

			graph.utils.render('viewCompose/views', {list: list}, function(html){
				self.$views.html(html);
				self.$viewsBox = self.$views.find('.view-box');
				self.$viewsBox.each(function(){
					var $img = $(this).find('img');
					$img[0].addEventListener('dragstart', function(ev){
						ev.dataTransfer.setData('Text', ev.target.id);
					});
				});
				update();
			});
		}else{
			graph.utils.alert(result.message);
		}

		self.$filterViews.change(update);
	};

	self.resizeGz = function(rows, cols){
		var w, h, $main;

		$main = $('#viewGz');

		self.$viewLayers.hide();
		self.$viewLayersItems.hide();

		w = Math.floor((self.$viewGz.width() - self.layerPd * 2 - self.layerItemMl * (cols - 1) - 15) / cols);

		if(w > $main.width() * 0.4){
			w = $main.width() * 0.4;
		}

		h = Math.floor(w * 0.7);

		self.$viewLayers.filter(':lt('+ rows +')').show().each(function(){
			$(this).find('.viewCompose-layer-items').filter(':lt('+ cols +')').show().each(function(){
				this.style.width = w + 'px';
				this.style.height = h + 'px';
			});
		});

	};

	self.initGz = function(){
		var rows = [], i, changeSetInter, options, change, selectedClassName = 'selected', activeClassName = 'active',
			spectrumOption;

		spectrumOption = {
			clickoutFiresChange: true,
			showInitial: true,
			showInput: true,
			showPalette:true,
			showButtons: true,
			change: function(color) {
				if(self.map[self.currentCellId]){
					self.map[self.currentCellId].floorBgColor = color.toHexString();
				}

				self.$viewLayersItems.filter('#' + self.currentCellId).css('background-color', color.toHexString());
			},
			palette: [
				['#000','#444','#666','#999','#ccc','#eee','#f3f3f3','#fff'],
				['#f00','#f90','#ff0','#0f0','#0ff','#00f','#90f','#f0f'],
				['#f4cccc','#fce5cd','#fff2cc','#d9ead3','#d0e0e3','#cfe2f3','#d9d2e9','#ead1dc'],
				['#ea9999','#f9cb9c','#ffe599','#b6d7a8','#a2c4c9','#9fc5e8','#b4a7d6','#d5a6bd'],
				['#e06666','#f6b26b','#ffd966','#93c47d','#76a5af','#6fa8dc','#8e7cc3','#c27ba0'],
				['#c00','#e69138','#f1c232','#6aa84f','#45818e','#3d85c6','#674ea7','#a64d79'],
				['#900','#b45f06','#bf9000','#38761d','#134f5c','#0b5394','#351c75','#741b47'],
				['#600','#783f04','#7f6000','#274e13','#0c343d','#073763','#20124d','#4c1130']
			]
		};

		options = function(value){
			return {
				value: value,
				step: 1,
				min: 1,
				max: 9
			};
		};

		change = function(){
			window.clearTimeout(changeSetInter);
			changeSetInter = window.setTimeout(function(){
				self.resizeGz(self.$gz_row.val(), self.$gz_col.val());
			}, self.eventDelay);
		};

		self.$cellSeting = $('#cellSetting');
		self.$floorBgColor = $('#floorBgColor');
		self.$floorBgColor.spectrum(spectrumOption);

		self.$viewGz = $('#viewGz');
		self.$viewGz.height($(window).height() - self.$viewGz.offset().top - 50);

		self.$gz_row = $('#gz_row');
		self.$gz_col = $('#gz_col');
		self.$gz_row_spinner = $('#gz_row_spinner');
		self.$gz_col_spinner = $('#gz_col_spinner');

		self.$gz_row_spinner.spinner(options(self.defaults.d3setting.rows));
		self.$gz_col_spinner.spinner(options(self.defaults.d3setting.cols));
		self.$gz_col_spinner.on('changed', change);
		self.$gz_row_spinner.on('changed', change);

		for(i=0; i<self.gzMax; i++){
			rows.push(null);
		}

		graph.utils.render('viewCompose/gz', {rows: rows}, function(html){
			self.$viewGz.html(html);
			self.$viewLayers = self.$viewGz.find('.viewCompose-layer');
			self.$viewLayersItems = self.$viewGz.find('.viewCompose-layer-items');
			self.resizeGz(self.defaults.d3setting.rows, self.defaults.d3setting.cols);

			self.$viewLayersItems.each(function(){
				var _this = this, $tools, $img;

				$tools = $(this).find('.viewCompose-layer-items-tools');
				$img = $(this).find('.viewCompose-layer-items-img');

				_this.addEventListener('dragstart', function(ev){
					ev.dataTransfer.setData('Text', ev.target.id);
				});

				$(this).click(function(ev){
					self.$viewLayersItems.removeClass(selectedClassName);
					if($img.is(':visible')){
						ev.preventDefault();
						ev.stopPropagation();

						$tools.show();
						$(this).addClass(selectedClassName);

						self.saveCellData();
						self.currentCellId = _this.id;
						self.initCellSetting(self.map[self.currentCellId]);
					}
				});

				_this.addEventListener('dragover', function(ev){
					ev.preventDefault();
				});

				_this.addEventListener('drop', function(ev){
					var dom, id;

					ev.preventDefault();
					dom = document.getElementById(ev.dataTransfer.getData('Text'));
					if(dom.id.indexOf('img') === 0 && $(dom).parent().hasClass('viewCompose-layer-items')){
						dom = $(dom).parent()[0];
					}

					self.$viewLayersItems.removeClass(selectedClassName);


					$(_this).addClass(activeClassName);
					$(_this).addClass(selectedClassName);
					id = _this.id;

					if(id){
						self.currentCellId = id;
					}else{
						$(_this).css('background-color',  '#' + graph.DEFINE_WEBGL.LAYER_COLOR.toString(16));
						id = graph.utils.randstr();
						self.currentCellId = id;
						_this.id = id;
						$img.get(0).id = ['img', id].join('-');
						self.map[id] = {isVertical: false};
					}

					if($(dom).hasClass('viewCompose-layer-items')){
						$img.show().get(0).src = $(dom).find('.viewCompose-layer-items-img')[0].src;
						self.map[id].viewid = self.map[dom.id].viewid;
						if($(dom).hasClass('v')){
							$img.addClass('v');
							self.map[id].isVertical = true;
						}

						if(self.map[dom.id].floorBgColor){
							self.map[id].floorBgColor = self.map[dom.id].floorBgColor;
							$(_this).css('background-color', self.map[dom.id].floorBgColor);
						}

						self.deleteCell(dom.id);
					}else{
						$img.show().get(0).src = dom.src;
						self.map[id].viewid = dom.id;
					}

					self.initCellSetting(self.map[id]);
				});

				$(_this).mouseenter(function(){
					if($img.is(':visible')){
						$tools.show();
					}
				});

				$(_this).mouseleave(function(){
					$tools.hide();
				});

				$(_this).find('button[data-action=remove]').click(function(){
					self.deleteCell(_this.id);
				});

				$(_this).find('button[data-action=repeat]').click(function(){
					var id = _this.id;

					if($img.hasClass(self.vClass)){
						$img.removeClass(self.vClass);
						self.map[id].isVertical = false;
					}else{
						$img.addClass(self.vClass);
						self.map[id].isVertical = true;
					}
				});

			});

			$.each(self.defaults.d3setting.layers, function(row){
				var _this = this;
				if(_this){
					$.each(_this, function(col){
						var o = this, $main, id, $img;

						$main = self.$viewLayers.filter(':eq('+ row +')').find('.viewCompose-layer-items:eq(' + col + ')');
						$img = $main.find('.viewCompose-layer-items-img');
						if(o && $img.length >= 1){
							id = graph.utils.randstr();
							self.map[id] = o;


							$main[0].id = id;
							$main.addClass(activeClassName);
							$img.show().get(0).src = self.viewsMap[o.viewid].image;

							if(o.isVertical){
								$img.addClass(self.vClass);
							}

							if(o.floorBgColor){
								$main.css('background-color', o.floorBgColor);
							}
						}
					});
				}
			});

			self.$cellSeting.click(function(ev){
				ev.preventDefault();
				ev.stopPropagation();
			});

			$(document).click(function(){
				self.$viewLayersItems.removeClass(selectedClassName);
				self.saveCellData();
				self.$cellSeting.hide();
				self.currentCellId = null;
			});
		});
	};

	self.deleteCell = function(id){
		var $main, $tools, $img, activeClassName = 'active';

		$main = self.$viewLayersItems.filter('#' + id);
		$tools = $main.find('.viewCompose-layer-items-tools');
		$img = $main.find('.viewCompose-layer-items-img');
		$img.hide().get(0).src = '';
		$main.removeClass(activeClassName);
		$main.removeAttr('id');
		$img.removeAttr('id');
		$img.removeClass('v');
		$main.css('background-color', 'transparent');
		$tools.hide();
		delete self.map[id];
	};

	self.saveCellData = function(){
		if(self.map[self.currentCellId]){
			self.map[self.currentCellId].floorBgColor = self.$floorBgColor.spectrum('get').toHexString();
		}
	};

	self.initCellSetting = function(obj){
		obj = obj || {};
		obj.floorBgColor = obj.floorBgColor || '#' + graph.DEFINE_WEBGL.LAYER_COLOR.toString(16);
		self.$floorBgColor.spectrum('set', obj.floorBgColor);
		self.$cellSeting.show();
	};

	self.refreshViews = function(){
		$('#views').addClass(self.defaultClass);

		$('#refreshViews').click(function(){
			self.initViews();
		});

		$('#viewSizeMin').click(function(){
			self.changeViewsSize('view-box-min');
		});

		$('#viewSizeMid').click(function(){
			self.changeViewsSize('view-box-mid');
		});

		$('#viewSizeMax').click(function(){
			self.changeViewsSize('view-box-max');
		});
	};

	self.changeViewsSize = function(className){
		self.defaultClass = className;
		$('#views')[0].className = 'viewCompose-views clear ' + className;
	};

	self.init2DSetting = function(){
		var spectrumOption;

		spectrumOption = {
			clickoutFiresChange: true,
			showInitial: true,
			showInput: true,
			showPalette:true,
			showButtons: true,
			palette: [
				['#000','#444','#666','#999','#ccc','#eee','#f3f3f3','#fff'],
				['#f00','#f90','#ff0','#0f0','#0ff','#00f','#90f','#f0f'],
				['#f4cccc','#fce5cd','#fff2cc','#d9ead3','#d0e0e3','#cfe2f3','#d9d2e9','#ead1dc'],
				['#ea9999','#f9cb9c','#ffe599','#b6d7a8','#a2c4c9','#9fc5e8','#b4a7d6','#d5a6bd'],
				['#e06666','#f6b26b','#ffd966','#93c47d','#76a5af','#6fa8dc','#8e7cc3','#c27ba0'],
				['#c00','#e69138','#f1c232','#6aa84f','#45818e','#3d85c6','#674ea7','#a64d79'],
				['#900','#b45f06','#bf9000','#38761d','#134f5c','#0b5394','#351c75','#741b47'],
				['#600','#783f04','#7f6000','#274e13','#0c343d','#073763','#20124d','#4c1130']
			]
		};

		self.$toolbarSize = $('#toolbarSize');
		self.$outLineSize = $('#outLineSize');
		self.$toolbarBgColor = $('#toolbarBgColor');
		self.$btnColor = $('#btnColor');
		self.$layout = $('#layout');
		self.$maxCount = $('#maxCount');

		self.$toolbarSize.spinner({value:self.defaults.d2setting.toolbarSize, step: 10, min: 50, max: 300});
		self.$outLineSize.spinner({value:self.defaults.d2setting.outLineSize, step: 10, min: 10, max: 90});
		self.$toolbarBgColor.val(self.defaults.d2setting.toolbarBgColor);
		self.$btnColor.val(self.defaults.d2setting.btnColor);
		self.$layout.val(self.defaults.d2setting.layout);
		self.$maxCount.val(self.defaults.d2setting.maxCount);

		self.$toolbarBgColor.spectrum(spectrumOption);
		self.$btnColor.spectrum(spectrumOption);

	};

	self.init3DSetting = function(){
		self.$layerMargin = $('#layerMargin');
		self.$layerItemMargin = $('#layerItemMargin');
		self.$layerMargin.spinner({value:self.defaults.d3setting.layerMargin, step: 10, min: 10, max: 1000});
		self.$layerItemMargin.spinner({value:self.defaults.d3setting.layerItemMargin, step: 10, min: 10, max: 1000});
	};

	self.initBaseSetting = function(){
		self.$viewName = $('#viewName');
		self.$viewDescription = $('#viewDescription');

		self.$viewName.val(self.defaults.viewName);
		self.$viewDescription.val(self.defaults.viewDescription);
	};

	self.getViewList = function(){
		var arr = [];

		self.$viewLayersItems.each(function(){
			var $img;
			$img = $(this).find('.viewCompose-layer-items-img');

			if($(this).is(':visible') && $img.is(':visible') && this.id){
				arr.push(self.map[this.id].viewid);
			}
		});

		return arr;
	};

	self.getLayerList = function(){
		var arr = [];

		self.$viewLayers.each(function(){
			var items = [];
			if($(this).is(':visible')){
				$(this).find('.viewCompose-layer-items').each(function(){
					if($(this).is(':visible')){
						if($(this).find('.viewCompose-layer-items-img').is(':visible')){
							items.push(self.map[this.id]);
						}else{
							items.push(null);
						}
					}
				});
				arr.push(items);
			}
		});

		return arr;
	};

	self.initDefaults = function(){
		var result;

		if(urlParams.view){
			document.title = graph.DEFINE_MSG.S38;
			self.viewid = decodeURIComponent(urlParams.view);
			result = graph.api.getPortfolio(self.viewid);

			if(graph.utils.isTrueRet(result)){
				self.defaults = JSON.parse(result.data.content);
			}else{
				graph.utils.alert(result.message);
				// throw error
				self.map.error.message = null;
			}

		}else{

			self.defaults = {};
			self.defaults.d3setting = {};
			self.defaults.d2setting = {};

			self.defaults.viewName = '';
			self.defaults.viewDescription = '';

			self.defaults.d3setting.rows = 3;
			self.defaults.d3setting.cols = 3;
			self.defaults.d3setting.layerMargin = 200;
			self.defaults.d3setting.layerItemMargin = 10;
			self.defaults.d3setting.layers = [];

			self.defaults.d2setting.toolbarSize = 130;
			self.defaults.d2setting.outLineSize = 90;
			self.defaults.d2setting.layout = 'top';
			self.defaults.d2setting.maxCount = 4;
			self.defaults.d2setting.toolbarBgColor = '#000000';
			self.defaults.d2setting.btnColor = '#FFFFFF';
		}
	};

	self.getFormData = function(callback){
		var data = {}, error = [];

		data.viewName = $.trim(self.$viewName.val());
		data.viewDescription = self.$viewDescription.val();

		data.d2setting = {
			toolbarSize: Number($('#_toolbarSize').val()),
			outLineSize: Number($('#_outLineSize').val()),
			layout: $('#layout').val(),
			maxCount: Number($('#maxCount').val()),
			toolbarBgColor: self.$toolbarBgColor.spectrum('get').toHexString(),
			btnColor: self.$btnColor.spectrum('get').toHexString(),
			views: self.getViewList()
		};

		data.d3setting = {
			layerMargin: Number($('#_layerMargin').val()),
			layerItemMargin: Number($('#_layerItemMargin').val()),
			layers: self.getLayerList(),
			cols: Number($('#gz_col').val()),
			rows: Number($('#gz_row').val())
		};

		if(!data.viewName){
			error.push(graph.DEFINE_MSG.E13);
		}

		if(data.d2setting.views.length === 0){
			error.push(graph.DEFINE_MSG.E22);
		}

		if(error.length === 0){
			if(callback){
				callback(data);
			}
		}else{
			graph.utils.alert(error.join(document.createElement('br').outerHTML));
		}
	};


	self.swichStatus = function(isUpdate){
		var btnBlockClassName = 'btn-block';
		if(isUpdate){
			self.$saveBtn.removeClass(btnBlockClassName);
			self.$saveasBtn.show().removeClass(btnBlockClassName);
			self.$previewBtn.show().removeClass(btnBlockClassName);
		}else{
			self.$saveBtn.addClass(btnBlockClassName);
			self.$saveasBtn.hide();
			self.$previewBtn.hide();
		}
	};

	self.initSumbit = function(){
		var save, update;

		save = function(viewid, data){
			var result = graph.api.savePortfolio(viewid, JSON.stringify(data));
			graph.utils.alert(result.message);
			if(graph.utils.isTrueRet(result)){
				self.swichStatus(true);
				window.history.pushState({time:new Date().getTime()}, '', location.pathname + '?view=' + viewid);
				document.title = graph.DEFINE_MSG.S38;
			}
		};

		update = function(viewid, data){
			var result = graph.api.updatePortfolio(viewid, JSON.stringify(data));
			graph.utils.alert(result.message);
		};

		self.$saveBtn = $('#save');
		self.$saveasBtn = $('#saveas');
		self.$previewBtn = $('#preview');
		self.swichStatus(!!urlParams.view);

		self.$saveBtn.click(function(){
			self.getFormData(function(formData){
				if(self.viewid){
					update(self.viewid, formData);
				}else{
					self.viewid = graph.utils.randstr();
					save(self.viewid, formData);
				}
			});
		});

		self.$saveasBtn.click(function(){
			self.getFormData(function(formData){
				self.viewid = graph.utils.randstr();
				save(self.viewid, formData);
			});
		});

		self.$previewBtn.click(function(){
			if(self.viewid){
				window.open('webgl.html?view=' + self.viewid);
			}
		});
	};

	graph.onload = function(){
		graph.header();
		self.initDefaults();
		self.initViews();
		self.refreshViews();
		self.initGz();
		self.initBaseSetting();
		self.init2DSetting();
		self.init3DSetting();
		self.initSumbit();
	};

})(nameSpace.reg('graph'), nameSpace.reg('graph.viewCompose'));

