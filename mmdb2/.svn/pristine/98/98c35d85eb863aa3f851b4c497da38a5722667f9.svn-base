package com.mmdb.service.subscription.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.sf.json.JSONArray;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mmdb.model.info.KpiInformation;
import com.mmdb.model.info.ViewInformation;
import com.mmdb.model.subscription.storage.SubscriptionViewStorage;
import com.mmdb.service.info.IViewInfoService;
import com.mmdb.service.notify.impl.NotifyService;
import com.mmdb.service.relation.ICiKpiRelService;
import com.mmdb.service.relation.ICiViewRelService;
import com.mmdb.service.subscription.ISubscriptionService;

/**
 * 用于管理视图的订阅
 * <p>
 * kpiId(HexId,String) ciId(HexId,String) subscriber(用户名,String本质是List)
 * viewId(视图id,String) viewAuthor(视图创建人,String) threshold(阈值,String)
 * 
 * @author xiongjian
 * 
 */
@Service("subscriptionService")
public class SubscriptionServiceImpl implements ISubscriptionService {

	@Autowired
	private ICiViewRelService ciViewRelService;

	@Autowired
	private ICiKpiRelService ciKpiRel;

	@Autowired
	private SubscriptionViewStorage subView;

	@Autowired
	private IViewInfoService vInfo;

	@Autowired
	private NotifyService notifyService;

	@Override
	public void save(String username, String viewId) throws Exception {
		ViewInformation info = vInfo.getById(viewId);
		if (info == null)
			throw new Exception("指定视图不存在");
		save(username, info);
	}

	@Override
	public void save(String username, ViewInformation info) throws Exception {
		List<String> ciHexIds = ciViewRelService.getByView(info.getId());
		Map<String, List<KpiInformation>> ciKpis = ciKpiRel
				.getKpiByCi(ciHexIds);
		if (ciKpis == null || ciKpis.size() == 0)
			return;
		List<Map<String, Object>> unfoldCiKpis = unfoldData(username,
				info.getId(), info.getUserName(), ciKpis);
		subView.subscriptionView(info.getId(), username);

		save(username, info.getId(), info.getUserName(), unfoldCiKpis);
	}

	private void save(String username, String viewId, String viewAuthor,
			List<Map<String, Object>> unfoldCiKpis) throws Exception {
		//
		if (hasHistory(viewId, username)) {
			deleteHistory(username, viewId);
		}

		// 确认是否有订阅记录,取作者的订阅,匹配阈值,一样的合并记录
		if (username.equals(viewAuthor)) {// 当订阅人为视图的作者时,则认为第一次订阅视图
			subView.save(unfoldCiKpis);
			
			List<Map<String, Object>> byViewId = subView.getByViewId(viewId);
			for (Map<String, Object> map : byViewId) {
				notifyService.refreshCache("SubscriptionKpiViewRel", "ADD", map.get("viewId") + "^_^"
						+ map.get("ciId") + "^_^" + map.get("kpiId"), map);
			}
			return;
		}
		// 可以融合的就更新
		List<Map<String, Object>> update = new ArrayList<Map<String, Object>>();
		// 没有的新建
		List<Map<String, Object>> save = new ArrayList<Map<String, Object>>();
		for (Map<String, Object> map : unfoldCiKpis) {
			// 融合存储
			Map<String, Object> result = subView.getdata(map.get("viewId")
					.toString(), map.get("ciId").toString(), map.get("kpiId")
					.toString(), map.get("threshold").toString());
			if (result == null) {
				notifyService.refreshCache("SubscriptionKpiViewRel", "ADD", map.get("viewId") + "^_^"
						+ map.get("ciId") + "^_^" + map.get("kpiId"), map);
				save.add(map);
				continue;
			} else {
				String subscriber = result.get("subscriber").toString();
				String id = result.get("id").toString();
				JSONArray subArr = JSONArray.fromObject(subscriber);
				if (!subArr.contains(username))
					subArr.add(username);
				map.put("subscriber", subArr.toString());
				map.put("id", id);
				notifyService.refreshCache("SubscriptionKpiViewRel", "UPD", map.get("viewId") + "^_^"
						+ map.get("ciId") + "^_^" + map.get("kpiId"), map);
				update.add(map);
			}
		}
		subView.save(save);
		subView.update(update);

	}

	public void restoreHistory(String viewId, String subscriber)
			throws Exception {
		ViewInformation view = vInfo.getById(viewId);
		if (view == null)
			throw new Exception("指定视图不存在");
		restoreHistory(view, subscriber);
	}

	public void restoreHistory(ViewInformation info, String subscriber)
			throws Exception {
		List<String> ciHexs = ciViewRelService.getByView(info.getId());
		Map<String, List<KpiInformation>> ciKpi = ciKpiRel.getKpiByCi(ciHexs);
		// 作为比对的数据
		List<Map<String, Object>> unfoldData = this.unfoldData(subscriber,
				info.getId(), info.getUserName(), ciKpi);

		// 将历史作为新的数据进行保存
		List<Map<String, Object>> history = subView.getHistoryBySubUserAndView(
				info.getId(), subscriber);
		this.deleteHistory(subscriber, info.getId());

		for (Map<String, Object> map : history) {
			map.put("subscriber", "['" + subscriber + "']");
		}

		List<Map<String, Object>> sortingData = this.sortingHistoryData(
				history, unfoldData);

		this.save(subscriber, info.getId(), info.getUserName(), sortingData);
	}

	/**
	 * 将数据保存到历史记录中
	 * 
	 * @param username
	 *            当前用户名称
	 * @param historyDatas
	 */
	public void saveHistory(List<Map<String, Object>> historyDatas)
			throws Exception {
		// 可以融合的就更新
		List<Map<String, Object>> update = new ArrayList<Map<String, Object>>();
		// 没有的新建
		List<Map<String, Object>> save = new ArrayList<Map<String, Object>>();
		for (Map<String, Object> map : historyDatas) {
			JSONArray users = JSONArray.fromObject(map.get("subscriber"));

			// 融合存储
			Map<String, Object> result = subView.getHistoryData(
					map.get("viewId").toString(), map.get("ciId").toString(),
					map.get("kpiId").toString(), map.get("threshold")
							.toString());
			if (result == null) {
				save.add(map);
				continue;
			} else {
				String subscriber = result.get("subscriber").toString();
				JSONArray subArr = JSONArray.fromObject(subscriber);
				for (Object object : users) {
					if (!subArr.contains(object)) {
						subArr.add(object);
					}
				}
				map.put("subscriber", subArr.toString());

				update.add(map);
			}
		}
		subView.saveHistory(save);
		subView.updateHistory(update);
	}

	@Override
	public boolean hasHistory(String viewId, String subscriber)
			throws Exception {
		List<Map<String, Object>> history = subView.getHistoryBySubUserAndView(
				viewId, subscriber);
		if (history == null || history.size() == 0)
			return false;
		return true;
	}

	@Override
	public void update(String username, String viewId, String viewAuthor,
			Map<String, List<KpiInformation>> ciKpis) throws Exception {
		List<Map<String, Object>> curCiKpis = unfoldData(username, viewId,
				viewAuthor, ciKpis);
		this.delete(username, viewId);
		this.save(username, viewId, viewAuthor, curCiKpis);
	}

	@Override
	public void delete(String viewId, boolean viewDeleted) throws Exception {
		if (viewDeleted) {
			// 清除这张视图相关联的全部记录
			List<Map<String, Object>> historyDatas = subView
					.getByViewId(viewId);
//			this.saveHistory(historyDatas);
			
			for (Map<String, Object> map : historyDatas) {
				notifyService.refreshCache("SubscriptionKpiViewRel", "DEL", map.get("viewId") + "^_^"
						+ map.get("ciId") + "^_^" + map.get("kpiId"), map);
			}
			
			subView.deleteByViewId(viewId);
			subView.unSubscriptionByView(viewId);
		} else {
			// 视图变私有了.
			List<Map<String, Object>> historyDatas = subView
					.getByViewId(viewId);
			if (historyDatas != null && historyDatas.size() > 0) {
				List<Map<String, Object>> filterDatas = new ArrayList<Map<String, Object>>();

				String author = historyDatas.get(0).get("viewAuthor")
						.toString();
				for (Map<String, Object> map : historyDatas) {
					String viewAuthor = map.get("viewAuthor").toString();
					JSONArray subscriber = JSONArray.fromObject(map
							.get("subscriber"));
					if (subscriber.contains(viewAuthor)) {
						if (subscriber.size() == 1)
							continue;
						subscriber.remove(viewAuthor);
					}
					map.put("subscriber", subscriber.toString());
					filterDatas.add(map);
				}
				this.saveHistory(filterDatas);

				List<Map<String, Object>> save = subView
						.getDataBySubUserAndView(viewId, author);

				for (Map<String, Object> map : save) {
					map.put("subscriber", "['" + author + "']");
					notifyService.refreshCache("SubscriptionKpiViewRel", "DEL", map.get("viewId") + "^_^"
							+ map.get("ciId") + "^_^" + map.get("kpiId"), map);
				}

				subView.deleteByViewId(viewId);
				subView.save(save);
			}
		}
	}

	@Override
	public void delete(String username, String viewId) throws Exception {
		subView.unSubscriptionView(viewId, username);

		List<Map<String, Object>> historyData = subView
				.getDataBySubUserAndView(viewId, username);
		List<Map<String, Object>> updates = new ArrayList<Map<String, Object>>();
		List<String> delete = new ArrayList<String>();
		for (Map<String, Object> map : historyData) {
			JSONArray subs = JSONArray.fromObject(map.get("subscriber"));
			String mongoId = map.get("id").toString();
			subs.remove(username);
			if (subs.size() != 0) {
				Map<String, Object> update = new HashMap<String, Object>();
				update.putAll(map);
				update.put("subscriber", subs.toString());
				notifyService.refreshCache("SubscriptionKpiViewRel", "UPD", map.get("viewId") + "^_^"
						+ map.get("ciId") + "^_^" + map.get("kpiId"), map);
				updates.add(update);
			} else {
				notifyService.refreshCache("SubscriptionKpiViewRel", "DEL", map.get("viewId") + "^_^"
						+ map.get("ciId") + "^_^" + map.get("kpiId"), map);
				
				delete.add(mongoId);
			}
			map.put("subscriber", "['" + username + "']");
		}
		subView.update(updates);
		subView.deleteByIds(delete);
		this.saveHistory(historyData);
	}

	public void deleteHistory(String username, String viewId) throws Exception {
		List<Map<String, Object>> historyData = subView
				.getHistoryBySubUserAndView(viewId, username);

		List<Map<String, Object>> updates = new ArrayList<Map<String, Object>>();
		List<String> delete = new ArrayList<String>();

		for (Map<String, Object> map : historyData) {
			JSONArray subs = JSONArray.fromObject(map.get("subscriber"));
			String mongoId = map.get("id").toString();
			subs.remove(username);

			if (subs.size() != 0) {
				Map<String, Object> update = new HashMap<String, Object>();
				update.putAll(map);
				update.put("subscriber", subs.toString());
				updates.add(update);
			} else {
				delete.add(mongoId);
			}
			map.put("subscriber", "['" + username + "']");
		}
		subView.updateHistory(updates);
		subView.deleteHistoryByIds(delete);
	}

	/**
	 * 将数据展开,方便遍历
	 * 
	 * @param username
	 * @param viewId
	 * @param viewAuthor
	 * @param ciKpis
	 * @return
	 */
	private List<Map<String, Object>> unfoldData(String username,
			String viewId, String viewAuthor,
			Map<String, List<KpiInformation>> ciKpis) {

		List<Map<String, Object>> curCiKpis = new ArrayList<Map<String, Object>>();
		Set<String> keySet = ciKpis.keySet();
		for (String ciHex : keySet) {
			List<KpiInformation> list = ciKpis.get(ciHex);
			for (KpiInformation kpi : list) {
				Map<String, Object> data = new HashMap<String, Object>();
				data.put("kpiId", kpi.getKpiHex());
				data.put("ciId", ciHex);
				data.put("viewId", viewId);
				data.put("viewAuthor", viewAuthor);
				data.put("subscriber", "['" + username + "']");
				data.put("threshold", kpi.getThreshold());
				curCiKpis.add(data);
			}
		}
		return curCiKpis;
	}

	/**
	 * 将展开的数据合并
	 * 
	 * @param datas
	 * @return
	 */
	private Map<String, Map<String, Map<String, Object>>> foldData(
			List<Map<String, Object>> datas) {

		Map<String, Map<String, Map<String, Object>>> foldData = new HashMap<String, Map<String, Map<String, Object>>>();
		if (datas == null)
			return foldData;
		for (Map<String, Object> map : datas) {
			String ciId = map.get("ciId").toString();
			String kpiId = map.get("kpiId").toString();

			Map<String, Map<String, Object>> kpis = foldData.get(ciId);
			if (kpis == null) {
				kpis = new HashMap<String, Map<String, Object>>();
				foldData.put(ciId, kpis);
			}
			kpis.put(kpiId, map);
		}

		return foldData;
	}

	/**
	 * 将历史数据和默认数据进行融合,ci-kpi一致時以历史数据为准,否则以默认数据为准
	 * <p>
	 * 用于保证ci的数量,kpi的数量与视图一致
	 * 
	 * @param history
	 *            历史数据
	 * @param defData
	 *            默认数据
	 */
	private List<Map<String, Object>> sortingHistoryData(
			List<Map<String, Object>> history, List<Map<String, Object>> defData) {
		List<Map<String, Object>> retData = new ArrayList<Map<String, Object>>();
		Map<String, Map<String, Map<String, Object>>> historyMap = foldData(history);
		for (Map<String, Object> def : defData) {
			String defCiId = def.get("ciId").toString();
			String defKpiId = def.get("kpiId").toString();
			Map<String, Map<String, Object>> kpis = historyMap.get(defCiId);
			if (kpis == null) {
				retData.add(def);
			} else {
				Map<String, Object> t = kpis.get(defKpiId);
				if (t == null) {// 还是没有
					retData.add(def);
				} else {
					retData.add(t);
				}
			}
		}
		return retData;
	}

	@Override
	public void deleteByKpi(String kpiId) throws Exception {
		List<Map<String,Object>> byKpi = subView.getByKpi(kpiId);
		for (Map<String, Object> map : byKpi) {
			notifyService.refreshCache("SubscriptionKpiViewRel", "DEL", map.get("viewId") + "^_^"
					+ map.get("ciId") + "^_^" + map.get("kpiId"), map);
		}
		subView.deleteByKpiId(kpiId);
	}

	@Override
	public void deleteByCiKpiRel(String ciId, String kpiId) throws Exception {
		List<Map<String, Object>> byCiKpiRel = subView.getByCiKpiRel(ciId,
				kpiId);
		for (Map<String, Object> map : byCiKpiRel) {
			notifyService.refreshCache("SubscriptionKpiViewRel", "DEL", map.get("viewId") + "^_^"
					+ map.get("ciId") + "^_^" + map.get("kpiId"), map);
		}
		subView.deleteByCiKpiRel(ciId, kpiId);
	}

	@Override
	public void deleteByCi(String ciId) throws Exception {
		List<Map<String, Object>> byCi = subView.getByCi(ciId);
		for (Map<String, Object> map : byCi) {
			notifyService.refreshCache("SubscriptionKpiViewRel", "DEL", map.get("viewId") + "^_^"
					+ map.get("ciId") + "^_^" + map.get("kpiId"), map);
		}
		subView.deleteByCiId(ciId);
	}

	@Override
	public void addByCiKpiRel(String ciId, KpiInformation kpi) throws Exception {
		if (subView.exist(ciId, kpi.getKpiHex())) {
			return;
		}

		// 这个ci相关的视图?
		List<String> viewIds = ciViewRelService.getByCi(ciId);
		if (viewIds != null && viewIds.size() != 0) {
			List<Map<String, Object>> save = new ArrayList<Map<String, Object>>();
			List<ViewInformation> vInfos = vInfo.getByids(viewIds);
			String kpiId = kpi.getKpiHex();
			String threshold = kpi.getThreshold();

			// 这个视图中订阅人.
			for (ViewInformation vInfo : vInfos) {
				List<String> subscribers = getSubscriberByView(vInfo.getId());
				Map<String, Object> data = new HashMap<String, Object>();
				data.put("kpiId", kpiId);
				data.put("ciId", ciId);
				data.put("subscriber", JSONArray.fromObject(subscribers)
						.toString());
				data.put("viewId", vInfo.getId());
				data.put("viewAuthor", vInfo.getUserName());
				data.put("threshold", threshold);
				save.add(data);
				//
				notifyService.refreshCache("SubscriptionKpiViewRel", "ADD", data.get("viewId") + "^_^"
						+ data.get("ciId") + "^_^" + data.get("kpiId"), data);
			}
			// 保存数据
			subView.save(save);
		}
	}

	@Override
	public List<String> getSubscriberByView(String viewId) throws Exception {
		return subView.getSubscriberByViewId(viewId);
	}

	@Override
	public List<String> getViewBySubscriber(String subscriber) throws Exception {
		return subView.getViewBySubscriber(subscriber);
	}

}
