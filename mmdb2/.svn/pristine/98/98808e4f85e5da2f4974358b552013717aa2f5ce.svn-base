package com.mmdb.service.sync;

import com.mmdb.buz.db.JdbcOtherTools;
import com.mmdb.core.log.Log;
import com.mmdb.core.log.LogFactory;
import com.mmdb.model.database.bean.DataBaseConfig;
import com.mmdb.model.database.bean.DataSourcePool;
import com.mmdb.model.mapping.PerfToDbMapping;
import com.mmdb.ruleEngine.Tool;
import com.mmdb.service.db.IDataBaseConfigService;
import com.mmdb.service.mq.SenderPerfService;

import jdbc.JdbcConnection;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.sql.Connection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * 从生产库同步性能数据到MMDB
 * 
 * @author yuhao.guan
 * @version 1.0 2015-7-19
 */
@Component
public class PerfDbMapSync {
    private Log log = LogFactory.getLogger("PerfDbMapSync");

    @Autowired
    private IDataBaseConfigService dbConfigService;
    
/*    @Autowired
    private SenderPerfService senderPerfService;*/

    public Map<String, Integer> run(PerfToDbMapping pdMapping) throws Exception {
        //String tag = System.currentTimeMillis() + "";
        Map<String, Integer> reMap = new HashMap<String, Integer>();
        int send = 0;
        Connection connection = null;
        try {
            DataBaseConfig dc = dbConfigService.getById(pdMapping.getDataSource().getDatabaseConfigId());
            DataSourcePool ds = pdMapping.getDataSource();
            //获取字段映射关系
            JSONObject fieldMap = pdMapping.getFieldMap();
            //获取自定义字段
            JSONObject customFieldsMap = pdMapping.getCustomFieldsMap();
            String valExp = pdMapping.getValExp();
            
            Map<String, String> am = dc.asMap();
            if (dc.getRac()) {
                am.put("url", dc.getRacAddress());
            }
            System.out.println(am);
            connection = JdbcOtherTools.getConnection(dc.getRac(), am);
            if (connection == null) {
                throw new Exception("获取数据库连接失败");
            }
           
            log.dLog("同步DB[" + ds.getTableName() + "]表数据");

            int count = JdbcConnection.getCountSize(connection, ds.getSchema(), ds.getTableName(), ds.getCustomSql());
            log.dLog("COUNT:" + count);
            int pageSize = 1000;
            int page = count % pageSize == 0 ? count / pageSize : (count / pageSize) + 1;
            log.dLog("页数:" + page);
            //初始化MQ连接
            SenderPerfService sendApi = new SenderPerfService();
            for (int i = 0; i < page; i++) {
                List<Map<String, Object>> data;
                int startCount = i * pageSize + 1, endCount = (i + 1) * pageSize;
                log.iLog("startCount:" + startCount + ",endCount:" + endCount);
                if (ds.isSelf()) {
                    data = JdbcConnection.getDataByTable(connection, "", "", ds.getCustomSql(), startCount, endCount);
                } else {
                    data = JdbcConnection.getDataByTable(connection, ds.getSchema(), ds.getTableName(), "", startCount, endCount);
                }
                if (data == null) {
                    throw new Exception("获取数据库数据失败");
                }
                JSONArray sendArray = new JSONArray();
                for (Map<String, Object> m : data) {
                	//TODO循环m，发送数据至MQ
                	JSONObject jsonPerf = JSONObject.fromObject(m);
                	
                	//jsonPerf.put("source", "mmdbMap");
                	jsonPerf.put("mapRuleId", pdMapping.getId());
                    
                	Iterator<?> objkey= fieldMap.keys();
                	while(objkey.hasNext()){
                		 //MMDB的性能数据字段
                		 String key = (String) objkey.next().toString();
                		 //获取到被映射外部数据库的字段
                		 String outDbKey = fieldMap.getString(key);
                		 
                		 //如果是val需要转成double
                		 if("val".equalsIgnoreCase(key)){
                			 if(customFieldsMap.containsKey(key)){
                				 //如果是自定义字段，outDbkey就是这个字段的值
                    			 double val = 
                    					 Tool.executePerfVal(outDbKey, valExp);
                    			 jsonPerf.put("value", val);
                			 }else{
                    			 double val = 
                    					 Tool.executePerfVal((String)m.get(outDbKey), valExp);
                    			 jsonPerf.put("value", val);
                			 }
                		 }else if("time".equalsIgnoreCase(key)){
                			 Long time = -1L;
                			 if(customFieldsMap.containsKey(key)){
                				 //如果是自定义字段，outDbkey就是这个字段的值
	                			 time = Tool.transPerfValDate(outDbKey);
                			 }else{
	                			 time = Tool.transPerfValDate(m.get(outDbKey));
                			 }
                			 if(time != -1L){
                				 jsonPerf.put(key, time);
                			 }else{ //如果时间没有能成功转换，存入当前时间
                				 jsonPerf.put(key,System.currentTimeMillis());
                			 }
                		 }else{
                			 if(customFieldsMap.containsKey(key)){
                				 //如果是自定义字段，outDbkey就是这个字段的值
                				 jsonPerf.put(key,outDbKey);
                			 }else{
                				 jsonPerf.put(key, m.get(outDbKey));
                			 }
                		 }
                	}
                	
                	sendArray.add(jsonPerf);
                    send++;
                }
                //发送到 性能处理MQ
               // sendToMQ(m);
                sendApi.sendJSONArrayMessage(sendArray);
            }
            //关闭MQ连接
            sendApi.closeConection();
        } finally {
            JdbcOtherTools.closeConnection(connection);
        }

        reMap.put("send", send);
        log.dLog("性能数据同步完成,共同步[" + send + "]条性能数据");
        return reMap;
    }
}
