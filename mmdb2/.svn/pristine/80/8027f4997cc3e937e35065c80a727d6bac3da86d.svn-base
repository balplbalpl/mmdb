/* global c3 */


(function(graph){

	'use strict';

	var F;

	F = function(options){
		this.container = [];
		this.ids = options.ids;
		this.template = 'ci/ciEvent';
		this.$className = '.ci-event';
		this.$container = $(options.container);
		this.domId = graph.utils.randstr(32);
		this.$domId = '#' + this.domId;


		this.startTime = graph.utils.unixToDatetime((new Date).getTime());
		this.endTime = null;

		this.removeDom();
		this.build();
		this.event();
	};

	F.prototype.toArrayFormat = function(data){
		var _this = this;

		data.rows = [];
		$.each(data.row, function(){
			var row = [], obj = this;
			$.each(data.head, function(){
				row.push(obj.data[this]);
			});

			data.rows.push({
				id: obj.id,
				data: row
			});
		});

		data.width = data.head.length * _this.cellWidth;
		data.row = data.rows;
		return data;
	};

	F.prototype.getData = function(){
		var _this = this, result;

		result = graph.api.cisGet(_this.ids, _this.startTime, _this.endTime);

		$.each(result.data, function(){
			_this.toArrayFormat(this);
		});

		return result.data;
	};

	F.prototype.remove = function(){
		var oriHeight = $(this.$className).outerHeight();
		$(this.$className).remove();
		if(this.regTimelinePointClick){
			this.regTimelinePointClick.destroy();
		}

		graph.event.trigger(graph.DEFINE_EVENT.CIEVENT_HIDE, {
			oriHeight: oriHeight,
			height: 0
		});
	};

	F.prototype.removeDom = function(){
		$(this.$className).remove();
	};

	F.prototype.update = function(ids){
		this.ids = ids;
		this.remove();
		this.build();
	};

	F.prototype.build = function(){
		var _this = this;
		graph.utils.render(_this.template, _this.getData(), function(html){
			_this.$container.append(html);

			_this.$container.find('tbody').find('tr').each(function(){
				$(this).click(function(){
					graph.event.trigger(graph.DEFINE_EVENT.CIEVENT_TR_CLICK, {
						id: $(this).attr('ciid')
					});
				});
			});
		});
	};

	F.prototype.event = function(){
		var _this = this;

		_this.regTimelinePointClick = graph.event.reg(graph.DEFINE_EVENT.TIMELINE_POINT_CLICK, function(ev){
			if(ev.time === 'current'){
				_this.startTime = graph.utils.unixToDatetime((new Date).getTime());
				_this.endTime = null;
			}else{
				_this.startTime = ev.time;

				var now = graph.utils.datetimeToUnix(ev.time) * 1000;
				_this.endTime = graph.utils.unixToDatetime(now + 60 * 1000 * 5);
			}

			_this.build();
		});

		graph.event.trigger(graph.DEFINE_EVENT.CIEVENT_SHOW, {
			$container: _this.$container,
			containerHeight: _this.$container.find(_this.$className).outerHeight(),
			self: _this
		});
	};

	F.prototype.alertRows = function(ids){
		var _this = this;

		_this.$container.find('tr[ciid]').css({
			background: 'transparent',
			color: null
		});


		$.each(ids, function(){
			_this.$container.find('tr[ciid='+ this.id +']').css({
				background: this.bg,
				color: this.fc
			});
		});
	};

	graph.CiEvent = F;

})(nameSpace.reg('graph'));
