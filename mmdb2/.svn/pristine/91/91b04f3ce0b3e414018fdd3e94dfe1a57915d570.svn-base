(function(graph){

	'use strict';

	var Index = {

		init: function(){
			graph.onlineEdit.init();
			graph.viewManagement.init();
			graph.viewPortfolio.init();

			graph.onlineEdit.select();
			graph.openChild = graph.onlineEdit;
			//graph.viewPortfolio.init();
		},

		size: function(){
			var size,
				$mainBox = $('.main-box'),
				$header = $('.succ-header');

			size = function(){
				var height = $(window).height() - $header.height();
				$mainBox.height(height);
			};

			size();
			$(window).resize(size);
		},

		sidebarHeightAuto: function(){
			$('.sidebar-auto-height').each(function(){
				$(this).height($(window).height() - $('#collapse-sidebar').offset().top - 70).css('overflow-x', 'hidden');
			});
		},

		tooltip: function(){
			$('.tooltips').tooltip();
		},

		collapseLeft: function(){
			var $siderbar = $('#siderbar'),
				$graphs = $('#graphs'),
				oriWidth = $siderbar.width();

			$('#collapse-sidebar').click(function(){
				if($siderbar.width() === 0){
					$siderbar.width(oriWidth);
					$graphs.css('margin-left', oriWidth + 'px');
					$(this).removeClass('deg180');
				}else{
					$siderbar.width(0);
					$graphs.css('margin-left', 0);
					$(this).addClass('deg180');
				}
			});
		},

		menuToggle: function(){
			var $iconItems = $('.left-bar-icon-item');
			$iconItems.each(function(){
				$(this).click(function(){
					$iconItems.removeClass('active');
					$(this).addClass('active');

					$('.left-bar-area-item').removeClass('active');
					$($(this).attr('data-sidebar')).addClass('active');

					$('.graphs-item').removeClass('active');
					$($(this).attr('data-graph')).addClass('active');

					graph[$(this).attr('data-module')].select();
					graph.openChild = graph[$(this).attr('data-module')];
				});
			});
		}
	};

	graph.onload = function(){
		//graph.header();
		return;
		Index.size();
		Index.collapseLeft();
		Index.menuToggle();
		Index.tooltip();
		Index.init();
		Index.sidebarHeightAuto();
	};

})(nameSpace.reg('graph'));

/* global Sidebar */


(function(graph, self){

	'use strict';

	// member defined
	self.queryWhere = null;
    self.outlineContainer = null;
	self.isMonitorDisplay = false;
	self.htmlCellWidth = 200;
	self.htmlCellHeight = 150;
	self.checkboxLib = null;
	self.htmlStyle = 'html=1;strokeColor=blue; strokeWidth=1;';
	self.baseGraphID = 'baseGraphID';
	self.treeElementClassName = 'ci-tree';
	self.treeStyleBtnID = 'btn-tree-style';
	self.tileStyleBtnID = 'btn-tile-style';
	self.graphContainer = null;
	self.icon = {};
	self.toolbarItemsRight = graph.DEFINE_TOOLBAR.VIEW_DRAW_RIGHT;
	self.toolbarItemsLeft = graph.DEFINE_TOOLBAR.VIEW_DRAW_LEFT;

	// init
	self.init = function(){

		self.graph();
		self.category();
		self.initCustomIconArea();
		self.rawBaseGraph();
		self.event();
		self.toolbar();
		self.ciConfigInit();

		new graph.Autolayout(self.editor.graph);
		new graph.GraphContextMenu(self.editor, self.contextMenu);

		graph.utils.initUrlView(self.editor, function(viewid, viewname){
			self.editor.viewname = viewname;
			self.editor.viewid = viewid;
		});

		self.editor.isAutoLayout = true;
		self.editor.isAutoRelation = true;
	};

	self.event = function(){
		graph.event.reg(graph.DEFINE_EVENT.VIEW_POST, function(evt){
			if(evt.graph === self.editor.graph){
				self.editor.viewid = evt.viewid;
				self.editor.viewname = evt.viewname;
				graph.setTitle(self.editor);
			}
		});

		graph.event.reg(graph.DEFINE_EVENT.VIEW_OPEN, function(evt){
			if(evt.graph === self.editor.graph){
				self.editor.viewid = evt.viewid;
				self.editor.viewname = evt.viewname;
				graph.setTitle(self.editor);
			}
		});

		graph.event.reg(graph.DEFINE_EVENT.GRAPH_VERTEX_CLONE, function(evt){
			if(evt.graph === self.editor.graph && graph.utils.isCiCell(evt.source)){
				graph.utils.ciClone(evt.source, evt.clone);
			}
		});

		graph.event.reg(graph.DEFINE_EVENT.VIEW_NEW, function(evt){
			if(evt.graph === self.editor.graph){
				graph.contextMenuLibs[graph.DEFINE_MENU.BACKGROUND_IMG_RM].apply(self.editor);
				self.editor.graph.removeCells(self.editor.graph.getChildCells());
				delete self.editor.viewid;
				graph.setTitle(self.editor);
			}
		});

		//graph.event.reg(graph.DEFINE_EVENT.GRAPH_VERTEX_CLICK, function(evt){
		//	if(evt.editor.graph === self.editor.graph && graph.utils.isCiCell(evt.cell)){
		//		new graph.CiInfo(graph.utils.getCiIdByCell(evt.cell), self.editor.graph.container);
		//		self.editor.zoomLock = true;
		//	}
		//});
        //
		//graph.event.reg(graph.DEFINE_EVENT.CI_INFO_CLOSE, function(){
		//	self.editor.zoomLock = false;
		//});

		graph.event.reg(graph.DEFINE_EVENT.OPEN_CHILD, function(evt){
			graph.utils.openChild.apply(graph.utils, [evt.cell, evt.id, evt.rs, evt.term, evt.dir, evt.graph]);
		});
	};

	self.initCustomIconArea = function(){
		var arr = [],
			$main = $('#icon-custom'),
			addMangerBtn = null,
			result;

		addMangerBtn = function(){
			var box = document.createElement('div'),
				i = document.createElement('i');

			i.className = 'fa fa-plus-square  fa-3x';
			box.style.cssText = [
				'float: left',
				'width: 40px',
				'height: 40px',
				'cursor: pointer',
                'position: relative',
                'top: 10px',
                'left: 10px'
			].join(';');

			i.style.cssText = [
				'color: #CCC'
			].join(';');

			box.addEventListener('click', function(){
				graph.contextMenuLibs[graph.DEFINE_MENU.CHANGE_IMAGE].apply(self.editor);
			});

			box.appendChild(i);
			$main.append(box);
		};

		result = graph.api.qureyForAdmin(null, 1, 100000);

		if(graph.utils.isTrueRet(result)){
			$.each(result.data.datas, function(){
				arr.push(this.url);
			});
		}

		graph.utils.render('share/customIconArea.html', {list: arr}, function(html){
			$main.html(html);
			$main.find('.customIconArea-box').each(function(){
				self.sidebar.addImagePalette(
					this,
					'',
					$(this).attr('data-icon'),
                    graph.DEFINE_CATE.DRAG_WIDTH,
                    graph.DEFINE_CATE.DRAG_HEIGHT,
                    graph.DEFINE_CATE.DRAG_WIDTH,
                    graph.DEFINE_CATE.DRAG_HEIGHT
				);

				$(this).find('img').remove();
			});

			addMangerBtn();
		});
	};

	self.toolbar = function(){
		self.toolbar = new graph.Toolbar(self, $('#toolbar-onlineEdit'));
	};

	// graph
	self.graph = function(){
		self.graphContainer = $('#graph-onlineEdit').get(0);

		self.editor = graph.utils.getEditor(
			self.graphContainer,
			self.outlineContainer
		);

		self.sidebar = new Sidebar(
			self.editor,
			$('#tab_1_1_1').parent()[0]
		);
	};

	// category
	self.category = function(){
		var result;

		result = graph.api.getCiCate();
		graph.Tree(result.data, self.sidebar).createMenu($('#icon-category').get(0), {
			layout : 'box',
			icoWidth : graph.DEFINE_CATE.BOX_ICO_WIDTH,
			icoHeight : graph.DEFINE_CATE.BOX_ICO_HEIGHT,
			dragHeight : graph.DEFINE_CATE.DRAG_HEIGHT,
			dragWidth : graph.DEFINE_CATE.DRAG_WIDTH,
			foldOpen : graph.DEFINE_CATE.BOX_IS_FOLD
		});
	};

	// select
	self.select = function(){

		graph.viewManagement.editor.graph.keyHandler.handler.setEnabled(false);
		self.editor.graph.keyHandler.handler.setEnabled(true);
		self.toolbar.show();
		graph.viewManagement.toolbar.hide();
		$('#toolbar-viewPortfolio').hide();

		graph.setTitle(self.editor);
	};

	// right
	self.contextMenu = {
		vertex: graph.DEFINE_GRAPH_MENU.VIEW_DRAW_VERTEX,
		edge: graph.DEFINE_GRAPH_MENU.VIEW_DRAW_EDGE,
		canvas: graph.DEFINE_GRAPH_MENU.VIEW_DRAW_CANVAS,
		libs: graph.contextMenuLibs
	};

	// 绘制基本图形
	self.rawBaseGraph = function(){
		var content = $('#icon-baseShape')[0];

		$(content).css('overflow', 'hidden');

		self.sidebar.addGeneralPalette(content,'swimlane', 200, 200, 'Container');
		self.sidebar.addGeneralPalette(content,'swimlane;horizontal=0', 200, 200, 'Pool');
		self.sidebar.addGeneralPalette(content,'text', 40, 26, 'Text');
		self.sidebar.addGeneralPalette(content, null, 120, 60);
		self.sidebar.addGeneralPalette(content,'rounded=1', 120, 60);
		self.sidebar.addGeneralPalette(content,'ellipse', 80, 80);
		self.sidebar.addGeneralPalette(content,'ellipse;shape=doubleEllipse', 80, 80);
		self.sidebar.addGeneralPalette(content,'triangle', 60, 80);
		self.sidebar.addGeneralPalette(content,'rhombus', 80, 80);
		self.sidebar.addGeneralPalette(content,'shape=hexagon', 120, 80);
		self.sidebar.addGeneralPalette(content,'shape=actor;verticalLabelPosition=bottom;verticalAlign=top', 40, 60);
		self.sidebar.addGeneralPalette(content,'ellipse;shape=cloud', 120, 80);
		self.sidebar.addGeneralPalette(content,'shape=cylinder', 60, 80);
		self.sidebar.addGeneralPalette(content,'line', 160, 10);
		self.sidebar.addGeneralPalette(content,'line;direction=south', 10, 160);
		self.sidebar.addGeneralPalette(content,'shape=xor', 60, 80);
		self.sidebar.addGeneralPalette(content,'shape=or', 60, 80);
		self.sidebar.addGeneralPalette(content,'shape=step', 120, 80);
		self.sidebar.addGeneralPalette(content,'shape=tape', 120, 100);
		self.sidebar.addGeneralPalette(content,'shape=cube', 120, 80);
		self.sidebar.addGeneralPalette(content,'shape=note', 80, 100);
		self.sidebar.addGeneralPalette(content,'shape=folder', 120, 120);
		self.sidebar.addGeneralPalette(content,'shape=card', 60, 80);
		self.sidebar.addGeneralPalette(content,'shape=plus', 20, 20);

		self.sidebar.createEdgeTemplate(content,'edgeStyle=none;endArrow=none;', 100, 100);
		self.sidebar.createEdgeTemplate(content,'edgeStyle=none', 100, 100);
		self.sidebar.createEdgeTemplate(content,'edgeStyle=elbowEdgeStyle;elbow=horizontal', 100, 100);
		self.sidebar.createEdgeTemplate(content,'edgeStyle=elbowEdgeStyle;elbow=vertical', 100, 100);
		self.sidebar.createEdgeTemplate(content,'edgeStyle=segmentEdgeStyle', 100, 100);
		self.sidebar.createEdgeTemplate(content,'arrow', 100, 100);
	};

	self.ciCreateCell = function(g, parent, cateid, id, value, x, y){
		var width, height, style, image, cell;

		image = graph.ICO_LIB_VIEW[cateid];
		width = graph.DEFINE_CONFIG_INFO.DRAG_WIDTH;
		height = graph.DEFINE_CONFIG_INFO.DRAG_HEIGHT;
		style = 'image;image=' + image;
		cell = g.insertVertex(parent, graph.DEFINE_CI.GRAPH_PREFIX + id, value, x, y, width, height, style);

		return cell;
	};

	self.ciConfigInit = function(){
		var $main = $('#icon-ciinfo'),
			result;

		result = graph.api.getCiCate();
		if(graph.utils.isTrueRet(result)){
			new graph.DataDraw({
				container : $main,
				list : result.data,
				getCate : graph.api.getCiCateByName,
				getInfo : graph.api.getCiAdvanced,
				tpl : 'share/table.html',
				createCell : self.ciCreateCell,
				prefix: graph.DEFINE_CI.GRAPH_PREFIX,
				edgePrefix: graph.DEFINE_CI.GRAPH_PREFIX_RELATION,
				editor: self.editor,
				queryRelation: graph.api.getRelationCiByIds,
				lib: graph.ICO_LIB_VIEW
			});
		}
	};

	self.resize = function(){
		self.editor.graph.zoomToCenter();
	};

})(nameSpace.reg('graph'), nameSpace.reg('graph.onlineEdit'));

(function(graph, self){

	'use strict';

	var pubContextMenuItems,
		priContextMenuItems;

	pubContextMenuItems = function(node){
		return graph.jstreeContextMenu({
			node: node,
			container: self.jstreePub,
			foldCreate: graph.utils.createFoldPublic,
			foldRename: graph.api.pubCateRename,
			foldDelete: graph.api.pubCateDel,
			viewDelete: graph.api.viewDel,
			viewRename: graph.api.viewRename,
			refreshTree: self.refreshPub
		});
	};

	priContextMenuItems = function(node){
		return graph.jstreeContextMenu({
			node: node,
			container: self.jstreePri,
			foldCreate: graph.utils.createFoldPrivate,
			foldRename: graph.api.priCateRename,
			foldDelete: graph.api.priCateDel,
			viewDelete: graph.api.viewDel,
			viewRename: graph.api.viewRename,
			refreshTree: self.refreshPri
		});
	};

	// member defined
	self.viewTreeID = 'viewTree';
	self.graphContainer = null;
	self.dirTemplate = 'accordion/viewTree_1.html';
	self.fileTemplate = 'accordion/viewTree_2.html';
	self.toolbarItemsRight = graph.DEFINE_TOOLBAR.VIEW_MANAGE_RIGHT;
	self.toolbarItemsLeft = graph.DEFINE_TOOLBAR.VIEW_MANAGE_LEFT;

	// getBody
	self.getBody = function(){
		var _this = this, html;

		html = graph.utils.render(_this.view, {
			viewTreeID : self.viewTreeID,
			isAdmin : graph.utils.isAdmin()
		});
		return html;
	};

	// init
	self.init = function(){
		self.graph();
		new graph.GraphContextMenu(self.editor, self.contextMenu);
		self.refreshPub();
		self.refreshPri();

		self.addEvent();
		self.toolbar();
		self.event();

		new graph.Autolayout(self.editor.graph);
	};

	/* jshint ignore:start */
	self.event = function(){
		graph.event.reg(graph.DEFINE_EVENT.VIEW_FOLD_POST_PRI, function(evt){
			var jstree;

			jstree = self.jstreePri.jstree(true);
			if(jstree){
				jstree.create_node(evt.pos, evt.jstreeNode);
				jstree.open_node(evt.pos);
			}

			jstree = $('#privateTab').find('.tree-main').jstree(true);
			if(jstree){
				jstree.create_node(evt.pos, evt.jstreeNode);
				jstree.open_node(evt.pos);
			}
		});

		graph.event.reg(graph.DEFINE_EVENT.VIEW_FOLD_POST_PUB, function(evt){
			var jstree;

			jstree = self.jstreePub.jstree(true);
			if(jstree){
				jstree.create_node(evt.pos, evt.jstreeNode);
				jstree.open_node(evt.pos);
			}

			jstree = $('#publicTab').find('.tree-main').jstree(true);
			if(jstree){
				jstree.create_node(evt.pos, evt.jstreeNode);
				jstree.open_node(evt.pos);
			}
		});

		//graph.event.reg(graph.DEFINE_EVENT.GRAPH_VERTEX_CLICK, function(evt){
		//	if(evt.editor.graph === self.editor.graph && graph.utils.isCiCell(evt.cell)){
		//		new graph.CiInfo(graph.utils.getCiIdByCell(evt.cell), self.editor.graph.container);
		//		self.editor.zoomLock = true;
		//	}
		//});
        //
		//graph.event.reg(graph.DEFINE_EVENT.CI_INFO_CLOSE, function(evt){
		//	self.editor.zoomLock = false;
		//});

		graph.event.reg(graph.DEFINE_EVENT.OPEN_CHILD, function(evt){
			graph.utils.openChild.apply(graph.utils, [evt.cell, evt.id, evt.rs, evt.term, evt.dir, evt.graph]);
		});
	};
	/* jshint ignore:end */

	self.toolbar = function(){
		self.toolbar = new graph.Toolbar(self, $('#toolbar-viewManage'));
		self.toolbar.hide();
	};

	self.addEvent = function(){

		/* jshint ignore:start */
		if(graph.utils.isAdmin()){
			$('#viewAddRootCatePub').click(function(){
				graph.utils.createFoldPublic();
			});
		}

		$('#viewAddRootCatePri').click(function(){
			graph.utils.createFoldPrivate();
		});
		/* jshint ignore:end */

		$('#viewTreeRefreshPub').click(function(){
			$('#treeViewPub').html(graph.DEFINE_MSG.S11);
			window.setTimeout(self.refreshPub, 200);
		});

		$('#viewTreeRefreshPri').click(function(){
			$('#treeViewPri').html(graph.DEFINE_MSG.S11);
			window.setTimeout(self.refreshPri, 200);
		});
	};

	self.refresh = function($container, data, contextMenuItemsFunc){
		var jstree, div;

		div = document.createElement('div');
		$container.html(div);
		jstree = $(div).jstree({

			/* jshint ignore:start */
			core : {
				data : data,
				check_callback : true
			},
			/* jshint ignore:end */

			plugins: ['wholerow', 'contextmenu', 'crrm'],
			contextmenu: {
				items: contextMenuItemsFunc
			}
		}).bind('select_node.jstree', function(event, data) {
			if(data.node.original.view && data.event.which === 1){
				self.openView(data.node.id, data.node.text);
			}
		});
		graph.utils.jstreeEvent($(div));

		return jstree;
	};

	self.refreshPub = function(){
		self.jstreePub = self.refresh($('#treeViewPub'), graph.utils.getTreeDataPub(), pubContextMenuItems);
	};

	self.refreshPri = function(){
		self.jstreePri = self.refresh($('#treeViewPri'), graph.utils.getTreeDataPri(), priContextMenuItems);
	};

	self.openView = function(viewid, viewname){
		var result = graph.api.getView(viewid);
		if(graph.utils.isTrueRet(result)){
			graph.utils.openXml(self.editor, result.data.xml);
			self.editor.viewid = viewid;
			self.editor.viewname = viewname;
			graph.utils.showGraphModel(self);

			graph.setTitle(self.editor);
		}else{
			graph.utils.alert(result.message);
		}
	};

	// graph
	self.graph = function(){
		self.graphContainer = $('#graph-viewManage')[0];

		self.editor = graph.utils.getEditor(
			self.graphContainer,
			self.outlineContainer
		);
	};

	// select
	self.select = function(){
		self.refreshPub();
		self.refreshPri();
		graph.onlineEdit.editor.graph.keyHandler.handler.setEnabled(false);
		self.editor.graph.keyHandler.handler.setEnabled(true);
		graph.onlineEdit.toolbar.hide();
		self.toolbar.show();
		$('#toolbar-viewPortfolio').hide();

		graph.setTitle(self.editor.viewid ? self.editor : '视图管理');
	};

	self.resize = function(){
		self.editor.graph.zoomToCenter();
	};

	// right
	self.contextMenu = {
		vertex: graph.DEFINE_GRAPH_MENU.VIEW_MANAGE_VERTEX,
		edge: graph.DEFINE_GRAPH_MENU.VIEW_MANAGE_EDGE,
		canvas: graph.DEFINE_GRAPH_MENU.VIEW_MANAGE_CANVAS,
		libs: graph.contextMenuLibs
	};

})(nameSpace.reg('graph'), nameSpace.reg('graph.viewManagement'));

(function(graph, self){

	'use strict';

	self.containerID = 'outline';
	self.container = null;

	// init
	self.init = function(){
		self.graphContainer = $('#graph-viewPortfolio');
		self.container = $('#sidebar-viewPortfolio');

		self.initViewList();
		$('#refreshViewCompose').click(self.initViewList);
		self.open3d();
	};

	self.initViewList = function(){
		graph.utils.render('accordion/newViewPortfolio', {
			labelWidth: 4,
			rightWidth: 8,
			configItems: graph.utils.getViewPortfolio()
		}, function(html){
			$('#sidebar-viewPortfolio').html(html);
			self.addEvent();
		});
	};

	self.open3d = function(){
		$('#viewportfolio-3d').click(function(){
			if(self.viewid){
				window.open('webgl.html?view=' + self.viewid);
			}
		});
	};

	self.getElement = function(){
		return self.container;
	};

	self.openView = function(src, fun){
		var iframe = document.createElement('iframe');
		iframe.setAttribute('scrolling', 'no');
		iframe.setAttribute('frameborder', '0');
		iframe.src = src;
		iframe.style.cssText = [
			'width: 100%',
			'height: 100%'
		].join(';');

		self.graphContainer.html(iframe);

		if(typeof fun === 'function'){
			iframe.onload = fun;
		}

		self.iframe = iframe;
		return iframe;
	};

	self.select = function(){
		$('.toolbar-menu').hide();
		graph.viewManagement.toolbar.hide();
		graph.onlineEdit.toolbar.hide();
		$('#toolbar-viewPortfolio').show();

		graph.setTitle(self.viewName ? self.viewName : '组合视图');
	};

	self.get = function(key){
		var o = graph.utils.getViewPortfolio();
		return o[key];
	};

	self.addEvent = function(){

		var outline = self.getElement(),
			tabs = outline.find('.nav-tabs');


		$('#viewPortfolioList').find('>li').each(function(){
			var viewid = $(this).attr('data-viewid'),
				$li = $(this);

			$li.find('.btn-link').click(function(){
				var url = 'outline.html?view=' + viewid;
				self.openView(url);

				self.viewid = viewid;
				self.viewName = $(this).html();
				graph.setTitle(self.viewName);
                // var iframe = self.openView(url);
				// iframe.postMessage(msg, '*');
			});

			$li.find('.remove').click(function(){
				graph.utils.confirm('确认删除操作？', function(){
					var result;
					result = graph.api.delPortfolio(viewid);
					graph.utils.alert(result.message);

					if(graph.utils.isTrueRet(result)){
						$li.remove();
					}
				});
			});
		});
	};


})(nameSpace.reg('graph'), nameSpace.reg('graph.viewPortfolio'));
