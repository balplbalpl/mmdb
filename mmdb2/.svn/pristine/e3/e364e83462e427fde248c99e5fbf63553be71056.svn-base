package com.mmdb.service.info.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.lucene.search.BooleanQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.mmdb.core.framework.neo4j.QueryUtil;
import com.mmdb.core.framework.neo4j.annotation.Transaction;
import com.mmdb.core.framework.neo4j.proxy.AbstractDomain;
import com.mmdb.model.categroy.UserCategory;
import com.mmdb.model.info.UserInformation;
import com.mmdb.model.info.storage.UserInfoStorage;
import com.mmdb.model.relation.storage.UserCiRelStorage;
import com.mmdb.service.info.IUserInfoService;
import com.mmdb.util.Neo4jStringUtils;

/**
 * 视图数据 服务 - 实现类
 * 
 * @author XIE
 */
@Component("userInfoService")
public class UserInfoServiceImpl extends AbstractDomain implements
		IUserInfoService {
	@Autowired
	private UserInfoStorage vInfoStorage;
	@Autowired
	private UserCiRelStorage userCiRelStorage;

	@Override
	@Transaction
	public UserInformation save(UserInformation info) throws Exception {
		UserCategory nc = info.getCategory();
		return vInfoStorage.save(info);
	}

	@Override
	@Transaction
	public void save(List<UserInformation> infos) throws Exception {
		for (UserInformation info : infos) {
			UserCategory nc = info.getCategory();
			if (nc == null) {
				throw new Exception("数据没有所属关系分类");
			}
			vInfoStorage.save(info);
		}
	}

	@Override
	public UserInformation getByProperty(String key, Object value)
			throws Exception {
		List<UserInformation> infos = vInfoStorage.getByProperty(key, value);
		return infos.size() > 0 ? infos.get(0) : null;
	}

	@Override
	public List<UserInformation> getByPropertys(String key, Object value)
			throws Exception {
		List<UserInformation> infos = vInfoStorage.getByProperty(key, value);
		return infos.size() > 0 ? infos : new ArrayList<UserInformation>();
	}

	@Override
	public UserInformation getById(String cateId, String UserId)
			throws Exception {
		return vInfoStorage.getInfoInCate(cateId, UserId);
	}

	@Override
	public UserInformation getById(String jsonId) throws Exception {
		return vInfoStorage.getByJsonId(jsonId);
	}

	@Override
	@Transaction
	public void delete(UserInformation info) throws Exception {
		vInfoStorage.delete(info);
		// Node node = vInfoStorage.getOne(info);
		// Iterable<Relationship> rs = node.getRelationships();
		// for (Relationship r : rs) {
		// String rtype = r.getType().name();
		// if (RelationshipTypes.CI2User.equals(rtype) ||
		// RelationshipTypes.User2CI.equals(rtype)) {
		// CiUserRelation cvRelation = ciUserRelStorage.getOne(r.getId());
		// ciUserRelStorage.delete(cvRelation);
		// }
		// }
		// vInfoStorage.delete(info);
	}

	@Override
	// @Transaction
	public void delete(List<UserInformation> infos) throws Exception {
		vInfoStorage.delete(infos);
		// for (UserInformation info : infos) {
		// Node node = vInfoStorage.getOne(info);
		// Iterable<Relationship> rs = node.getRelationships();
		// for (Relationship r : rs) {
		// String rtype = r.getType().name();
		// if (RelationshipTypes.CI2User.equals(rtype)
		// || RelationshipTypes.User2CI.equals(rtype)) {
		// CiUserRelation cvRelation = ciUserRelStorage.getOne(r.getId());
		// ciUserRelStorage.delete(cvRelation);
		// }
		// }
		// vInfoStorage.delete(info);
		// }
	}

	@Override
	@Transaction
	public UserInformation update(UserInformation information, String password,
			String phone, String email) throws Exception {
		UserInformation info = information;
		info.setPassword(password);
		info.setPhone(phone);
		info.setEmail(email);
		info.setUpdateTime(System.currentTimeMillis());
		return vInfoStorage.update(info);
	}

	@Override
	@Transaction
	public UserInformation update(UserInformation information) throws Exception {
		return vInfoStorage.update(information);
	}

	@Override
	public List<UserInformation> getAll() throws Exception {
		return vInfoStorage.getAll();
	}

	@Override
	public List<UserInformation> qureyFuzzy(String keyWord) throws Exception {
		List<UserInformation> Users = new ArrayList<UserInformation>();
		BooleanQuery bq = QueryUtil.booleanQuery();
		if (keyWord == null || keyWord.equals("") || keyWord.equals("*")) {
			Users = vInfoStorage.getAll();
		} else {
			String[] attrs = { "id", "categoryId", "userName" };
			String trem = "";
			keyWord = Neo4jStringUtils.cypherESC(keyWord);
			if (keyWord.startsWith("*") && keyWord.endsWith("*")) {
				keyWord = keyWord.replace("*", ".*");
			}
			for (int i = 0; i < attrs.length; i++) {
				// bq.add(QueryUtil.wildcardQuery(attr, keyWord.toLowerCase()),
				// Occur.SHOULD.value());
				if (i == attrs.length - 1) {
					trem += "n." + attrs[i] + "=~'" + keyWord + "'";
				} else {
					trem += "n." + attrs[i] + "=~'" + keyWord + "' OR ";

				}
			}
			String CQL = "match (n:User) where " + trem + " return n ";
			System.out.println(CQL);
			// UserInfoStorage vg = new UserInfoStorage();

			Users = vInfoStorage.query(CQL);
			// Users = vInfoStorage.query(CQL);
			// Users = vInfoStorage.query(bq);
		}
		return Users;
	}

	@Override
	public List<UserInformation> qureyByAdvanced(UserCategory category,
			Map<String, String> mustExp, Map<String, String> orExp,
			boolean extend) throws Exception {

		boolean queryAll = true;// 当参数没有值的时候,就查询全部的.
		StringBuffer match = new StringBuffer("match (n:User) where ");
		// 用于判断是否出现继承和是否有categroyid这个条件
		List<String> cgIds = new ArrayList<String>();
		if (category != null) {
			cgIds.add(category.getId().toLowerCase());
			if (extend) {// ciCate是否继承
				List<UserCategory> children = category.getAllChildren();
				for (UserCategory child : children) {
					cgIds.add(child.getId().toLowerCase());
				}
			}
		}

		if (cgIds.size() != 0) {
			queryAll = false;
			match.append("lower(n.categoryId) in [");
			for (String cgid : cgIds) {
				match.append("'");
				match.append(cgid);
				match.append("',");
			}
			match.replace(match.length() - 1, match.length(), "]");
		}

		if (mustExp != null && mustExp.size() > 0) {
			if (!queryAll) {// 出现了categoryid where n.xx =='xx' and
				match.append(" and");
			}
			queryAll = false;

			for (Entry<String, String> entry : mustExp.entrySet()) {
				String key = entry.getKey().trim();
				String value = Neo4jStringUtils.cypherESC(entry.getValue()
						.trim());
				match.append(" n.`");
				match.append(key);
				match.append("`='");
				if ("*".equals(value)) {
					match.append(".");
					match.append(value);
				} else {
					if (value.startsWith("*") && value.endsWith("*")) {
						value = value.substring(1, value.length() - 1);
					}
					match.append(".*");
					match.append(value);
					match.append(".*");
				}
				match.append("' and");
			}

			match.delete(match.length() - 3, match.length());// 去掉一个多余的and
		}

		if (orExp != null && orExp.size() > 0) {
			if (!queryAll) {// 出现了categoryid where n.xx =='xx' and
				// match.append(" or ");
				match.append("with n where ");
			}
			queryAll = false;
			for (Entry<String, String> entry : orExp.entrySet()) {
				String key = entry.getKey().trim();
				String value = Neo4jStringUtils.cypherESC(entry.getValue()
						.trim());
				match.append(" lower(n.`");
				match.append(key);
				match.append("`)=~'");
				if ("*".equals(value)) {
					match.append(".");
					match.append(value);
				} else {
					if (value.startsWith("*") && value.endsWith("*")) {
						value = value.substring(1, value.length() - 1);
					}
					match.append(".*");
					match.append(value.toLowerCase());
					match.append(".*");
				}
				match.append("' or");
			}
			match.delete(match.length() - 2, match.length());// 去掉一个多余的or
		}

		if (queryAll) {
			match.delete(match.length() - 6, match.length());// 将多出的where 删除掉
		}
		match.append("return n");
		return vInfoStorage.query(match.toString());

	}
}