/* global mxRectangle */
/* global mxConstants */


(function(graph, self){

	'use strict';

	self.$pieParent = $('#ci-pie');
	self.ciTables = [];

	var editor,
		blink = [],
		alertStyleWidth = 24,
		alertStyleHeight = 24,
		width = 100,
		height = 80,
		ids = [],
		getColor,
		timelineStartTime,
		timelineEndTime,
		timeline,
		loopMonitor,
		timeout = 1000 * 60 * 5,
		historyState,
		historyData,
		currTimePoint,
		alertStyle = 'ellipse;strokeWidth=none;strokeColor=none;movable=0;';

	var initTimeline = function () {
		timeline = graph.Timeline({
			onload: function () {
				editor.graph.zoomToCenter();
			},
			clickedPoint: function (data, num) {
				if (num === 0) {
					window.clearInterval(loopMonitor);
					loopMonitor = window.setInterval(function () {
						updateMonitor(getData());
					}, timeout);
					updateMonitor(getData());
					historyState = false;
				} else {
					window.clearInterval(loopMonitor);
					loopMonitor = null;
					updateMonitor(data);
					historyState = true;
					historyData = data;
				}
				currTimePoint = num;
			},
			show: function () {
				editor.graph.zoomToCenter();
			},
			hide: function () {
				window.clearInterval(loopMonitor);
				loopMonitor = window.setInterval(function () {
					updateMonitor(getData());
				}, timeout);
				updateMonitor(getData());
				editor.graph.zoomToCenter();
				historyState = false;
			},
			ids: ids,
			container: $(editor.graph.container).parent()[0]
		});

		timeline.show();

		graph.event.reg(graph.DEFINE_EVENT.TIMELINE_POINT_CLICK, function(ev){
			var now;

			if(ev.time === 'current'){
				timelineStartTime = graph.utils.unixToDatetime((new Date).getTime());
				timelineEndTime = null;
			}else{
				timelineStartTime = ev.time;
				now = graph.utils.datetimeToUnix(ev.time) * 1000;
				timelineEndTime = graph.utils.unixToDatetime(now + 60 * 1000 * 5);
			}
		});
	};

	var contextMenu = function(){
		new graph.GraphContextMenu(editor, {
			vertex:[
				graph.DEFINE_MENU.CI_VIEW_DETAIL,
				{name: graph.DEFINE_MENU.VIEW_RELATION_OPEN, aliases: '关联视图'}
			],
			canvas: [
				graph.DEFINE_MENU.BACK_PARENT_VIEW
			],
			libs: graph.contextMenuLibs
		});
	};

	var event = function(){

		graph.event.reg(graph.DEFINE_EVENT.GRAPH_VERTEX_CLICK, function(evt){
			if(evt.editor.graph === editor.graph && graph.utils.isCiCell(evt.cell)){
				new graph.CiInfo({
					id: graph.utils.getCiIdByCell(evt.cell),
					container: editor.graph.container,
					startTime: timelineStartTime,
					endTime: timelineEndTime
				});
				editor.zoomLock = true;
				editor.graph.addLight(evt.cell);
			}
		});

		graph.event.reg(graph.DEFINE_EVENT.GRAPH_OPEN_XML, function(){
			editor.graph.container.style.background = '#FFF';
			editor.graph.container.style.backgroundImage = null;
			$(editor.graph.container).find('svg')[0].style.backgroundColor = 'transparent';
			$(editor.graph.container).find('svg')[0].style.backgroundImage = null;

			//editor.graph.setCellsSelectable(false);
			editor.graph.setCellsMovable(false);
			editor.graph.setCellsCloneable(false);
			editor.graph.setCellsEditable(false);
			editor.graph.setCellsDisconnectable(false);
			editor.graph.setCellsResizable(false);
			editor.graph.setExtendParents(false);
			editor.graph.setConnectable(false);

			timelineStartTime = null;
			timelineEndTime = null;

			if (timeline) {
				timeline.remove();
				timeline = null;
			}

			ids = graph.utils.getGraphCiIds(editor.graph);

			initTimeline();

			graph.utils.graphNav(editor);

			displayMonitor();
			updateMonitor(getData());
		});

		graph.event.reg(graph.DEFINE_EVENT.CI_INFO_CLOSE, function(){
			editor.zoomLock = false;
			editor.graph.removeLight();
		});

		graph.event.reg(graph.DEFINE_EVENT.OPEN_CHILD, function(evt){
			if(editor.graph === evt.graph){
				graph.utils.openChild.apply(graph.utils, [evt.cell, evt.id, evt.rs, evt.term, evt.dir, evt.graph]);
			}
		});

		graph.event.reg(graph.DEFINE_EVENT.HISTORY_BACK, function(evt){
			if(evt.editor.graph === editor.graph){
				editor.nav = {
					name: evt.name,
					id: evt.id,
					xml: evt.xml
				};

				editor.viewid = evt.viewid;
			}
		});

		graph.event.reg(graph.DEFINE_EVENT.VIEW_OPEN, function(){
			if(self.ciEvent){
				self.ciEvent.update(graph.utils.getGraphCiIds(editor.graph));
			}
		});

		graph.event.reg(graph.DEFINE_EVENT.CIEVENT_TR_CLICK, function(ev){
			var cell = editor.graph.getCellByID([graph.DEFINE_CI.GRAPH_PREFIX, ev.id].join(''));

			if(self.lightCell){
				editor.graph.removeCells([self.lightCell]);
			}

			if(cell){
				self.lightCell = editor.graph.addLight(cell, null, '#999');
			}
		});

		graph.event.reg(graph.DEFINE_EVENT.CIEVENT_SHOW, function(ev){
			var height = $(editor.graph.container).height();
			$(editor.graph.container).height(height - ev.containerHeight);
			editor.graph.zoomToCenter();

			if(timeline){
				$(editor.graph.container).parent().append(timeline.mainElement);
			}

			ev.self.alertRows(self.ciTables);
		});

		graph.event.reg(graph.DEFINE_EVENT.CIEVENT_HIDE, function(ev){
			var height = $(editor.graph.container).height();
			$(editor.graph.container).height(height + ev.oriHeight);
			editor.graph.zoomToCenter();
		});

		graph.event.reg(graph.DEFINE_EVENT.TIMELINE_SHOW, function(ev){
			var height = $(editor.graph.container).height();
			$(editor.graph.container).height(height - ev.containerHeight);
		});

		graph.event.reg(graph.DEFINE_EVENT.TIMELINE_RESIZE, function(ev){
			var height;
			if(ev.height > ev.oriHeight){
				height = $(editor.graph.container).height() - (ev.height - ev.oriHeight);
			}else{
				height = $(editor.graph.container).height() + (ev.oriHeight - ev.height);
			}
			$(editor.graph.container).height(height);
		});

		graph.event.reg(graph.DEFINE_EVENT.TIMELINE_POINT_CLICK, function(ev){
			var now;

			if(ev.time === 'current'){
				timelineStartTime = graph.utils.unixToDatetime((new Date).getTime());
				timelineEndTime = null;
			}else{
				timelineStartTime = ev.time;
				now = graph.utils.datetimeToUnix(ev.time) * 1000;
				timelineEndTime = graph.utils.unixToDatetime(now + 60 * 1000 * 5);
			}
		});

		graph.event.reg(graph.DEFINE_EVENT.CIS_ALARM_CHANGE, function(ev){
			graph.utils.showCiAlarmPie('#pie', ev.data);
			self.ciTables = ev.changeList;

			if(self.ciEvent){
				self.ciEvent.alertRows(ev.changeList);
			}
		});
	};

	self.startBlink = function(){
		var isVisible = false;
		var fn = function(){
			var opacity;
			isVisible = !isVisible;
			opacity = isVisible ? 100 : 0;
			editor.graph.setCellStyles(mxConstants.STYLE_OPACITY, opacity, blink);
			editor.graph.refresh();

			self.startBlinkSet = window.setTimeout(fn, 100);
		};
		fn();
	};

	self.stopBlink = function(){
		window.clearTimeout(self.startBlinkSet);
	};

	var getData = function () {
		var obj, result;

		result = graph.api.queryEventPerfByCurrent(ids, 1000*60*5*30, 30);
		if (graph.utils.isTrueRet(result)) {
			obj = result.data[0].data;
		}

		return obj;
	};

	var displayMonitor = function () {
		var cells,
			rectangles = [],
			resizeCells = [];

		cells = editor.graph.getDepCells();
		$.each(cells, function () {
			var _this = this;

			if (_this.vertex && graph.utils.isCiCell(_this) &&
				_this.style &&
				_this.style.indexOf('html=1') === -1 &&
				!_this.children) {
				htmlCell(_this);
				resizeCells.push(_this);
				rectangles.push(new mxRectangle(
					_this.getGeometry().x,
					_this.getGeometry().y,
					width,
					height
				));
			}
		});


		editor.graph.orderCells(true, editor.graph.getDepEdges());
		editor.graph.refresh();
		editor.graph.zoomToCenter();
	};


	var htmlCell = function (cell) {
		editor.graph.insertVertex(
			cell,
			graph.DEFINE_CI.GRAPH_PREFIX_IN + cell.id,
			null,
			-1*(alertStyleWidth / 2),
			-1*(alertStyleHeight / 2),
			alertStyleWidth,
			alertStyleHeight,
			alertStyle
		);
	};

	var updateMonitor = function (obj) {
		var i, cell, style, ret, updateVertices, container, color, ciTables = [];

		blink = [];

		updateVertices = function (cell, container, data) {
			var style, inCell;

			style = alertStyle + 'fillColor=' + getColor(data.alarmLevel).bg + ';fontColor=' + getColor(data.alarmLevel).fc;
			inCell = editor.graph.getCellByID(graph.DEFINE_CI.GRAPH_PREFIX_IN + cell.id);
			if (inCell) {
				if(data.alarmLevel === 6) {
					inCell.setValue(null);
					editor.graph.setCellStyles(mxConstants.STYLE_OPACITY, 0, [inCell]);
				}else{
					blink.push(inCell);
					inCell.setStyle(style);
					inCell.setValue(data.alarm);
				}

				editor.graph.refresh(inCell);
			}
		};

		for (i in obj) {
			cell = editor.graph.getCellByID(graph.DEFINE_CI.GRAPH_PREFIX + i);

			if (cell && cell.vertex) {
				container = $(graph.DEFINE_CI.J_DOM_PREFIX + i);
				updateVertices(cell, container, obj[i]);
			} else if (cell && cell.edge) {
				style = cell.getStyle();
				style = style ? style : '';
				ret = /strokeColor=(#?\w+){1,10}/.exec(style);
				if (ret && ret[0]) {
					style = style.replace(
						ret[0],
						'strokeColor=' + getColor(obj[i].execptLevel).bg
					);
				} else {
					if (style && style[style.length - 1] !== ';') {
						style += ';';
					}
					style += 'strokeColor=' + getColor(obj[i].alarmLevel).bg + ';';
				}

				cell.setStyle(style);
				editor.graph.refresh(cell);
			}


			if(obj[i].alarmLevel !== 6){
				color =getColor(obj[i].alarmLevel);
				ciTables.push({
					id: i,
					bg: color.bg,
					fc: color.fc
				});
			}
		}

		graph.event.trigger(graph.DEFINE_EVENT.CIS_ALARM_CHANGE, {
			changeList: ciTables,
			data: obj
		});
	};

	self.initBtn = function(){
		var $eventBtn = $('#displayEvent'),
			$displayPieBtn = $('#displayPie');


		$displayPieBtn.click(function(){
			if(self.$pieParent.css('visibility') === 'hidden'){
				self.$pieParent.css('visibility', 'visible');
			}else{
				self.$pieParent.css('visibility', 'hidden');
			}
		});

		$eventBtn.click(function(){
			var $main = $('.ci-event');
			if($main.length >= 1){
				if(self.ciEvent){
					self.ciEvent.remove();
					self.ciEvent = null;
				}

				$main.remove();
				$eventBtn.html('显示所有CI 事件/工单/告警/变更单 列表');
			}else{
				self.ciEvent = new graph.CiEvent({
					ids: graph.utils.getGraphCiIds(editor.graph),
					container: $(editor.graph.container).parent()[0]
				});

				$eventBtn.html('关闭所有CI 事件/工单/告警/变更单 列表');
			}
		});
	};

	self.initSvgStyleButton = function(){
		var result = graph.api.imageGetType();
		var $main = $('#style-button');

		if(graph.utils.isTrueRet(result)){

			graph.utils.render('view/button', {list: result.data}, function(html){
				$main.html(html);

				$main.find('button').each(function(){
					$(this).click(function(){
						var type = $(this).attr('data-style');
						self.changeType(type);
					});
				});
			});
		}else{
			graph.utils.alert(result.message);
			throw new Error(result.message);
		}
	};

	self.changeType = function(type){
		var obj = {};
		var svg = [];
		var cells = editor.graph.getSelectionCells();

		if(!cells.length){
			cells = editor.graph.getDepVertexs();
		}

		$.each(cells, function(){
			var cell = this;
			var o = editor.graph.getCellStyle(cell);

			if(o.image && !obj[o.image]){
				obj[o.image] = true;
				svg.push(o.image);
			}
		});

		var result = graph.api.imageGetAllPathBySvgs(svg, type);
		if(graph.utils.isTrueRet(result)){
			var mapping = {};

			$.each(result.data, function(){
				var item = this;
				mapping[item.path] = item.svg;
			});

			$.each(cells, function(){
				var cell = this;
				var o = editor.graph.getCellStyle(cell);

				if(o.image && mapping[o.image]){
					var replaceImagePath = mapping[o.image];
					editor.graph.setCellStyles('image', replaceImagePath, [cell]);
				}
			});

			editor.graph.refresh();
		}else{
			graph.utils.alert(result.message);
			throw new Error(result.message);
		}
	};

	graph.onload = function(){
		var $main;

		getColor = graph.utils.getLevelColor;

		$main = $('#main');
		$main.height($(window).height() - $('#top').outerHeight());
		editor = graph.utils.getEditor($main[0]);

		contextMenu();
		new graph.Autolayout(editor.graph);
		event();

		graph.utils.initUrlView(editor, function(viewid, data){

			editor.viewid = viewid;
			editor.nav = {
				id: viewid,
				name: data.name,
				xml: data.xml
			};

			if(data.containers){
				graph.utils.initContainers(editor.graph, data.containers);
			}

			graph.utils.graphNav(editor);
			graph.utils.viewInfo(editor);
			self.startBlink();
			self.initBtn();
		});

		self.initSvgStyleButton();

		self.editor = editor;
	};

})(nameSpace.reg('graph'), nameSpace.reg('graph.page'));
