package com.mmdb.rest.task;

import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.restlet.Context;
import org.restlet.Request;
import org.restlet.Response;
import org.restlet.data.Form;
import org.restlet.data.Status;
import org.restlet.ext.json.JsonRepresentation;
import org.restlet.representation.Representation;
import org.restlet.resource.Delete;
import org.restlet.resource.Get;
import org.restlet.resource.Post;
import org.restlet.resource.Put;
import org.restlet.resource.ServerResource;

import com.mmdb.core.log.Log;
import com.mmdb.core.log.LogFactory;
import com.mmdb.core.utils.SpringContextUtil;
import com.mmdb.model.mapping.InCiCateMap;
import com.mmdb.model.mapping.PerfToDbMapping;
import com.mmdb.model.mapping.SourceToCategoryMapping;
import com.mmdb.model.mapping.SourceToRelationMapping;
import com.mmdb.model.task.QuartzManager;
import com.mmdb.model.task.Task;
import com.mmdb.model.task.TaskJob;
import com.mmdb.service.mapping.IInCiCateMapService;
import com.mmdb.service.mapping.IPerfDbMapService;
import com.mmdb.service.mapping.ISourceCategoryMapService;
import com.mmdb.service.mapping.ISourceRelationMapService;
import com.mmdb.service.task.ITaskService;
import com.mmdb.service.mq.*;

/**
 * 
 * @author xj
 * 
 */
public class TaskRest extends ServerResource {
	private Log log = LogFactory.getLogger("TaskRest");
	private ITaskService taskService;
	private IInCiCateMapService inCiCateMapService;
	private ISourceCategoryMapService sourceCateMapService;
	private ISourceRelationMapService sourceRelMapService;
	private IPerfDbMapService perfDbMapService;
	private String url = "tcp://localhost:61616";
	private SendToMQ mqService = new SendToMQ();
	@Override
	public void init(Context context, Request request, Response response) {
		super.init(context, request, response);

		taskService = (ITaskService) SpringContextUtil.getApplicationContext()
				.getBean("taskService");
		inCiCateMapService = (IInCiCateMapService) SpringContextUtil.getApplicationContext()
				.getBean("inCiCateMapService");
		sourceCateMapService = (ISourceCategoryMapService) SpringContextUtil.getApplicationContext()
				.getBean("sourceCateMapService");
		sourceRelMapService = (ISourceRelationMapService) SpringContextUtil.getApplicationContext()
				.getBean("sourceRelMapService");
		perfDbMapService = (IPerfDbMapService) SpringContextUtil.getApplicationContext()
				.getBean("perfDbMapService");
		setExisting(true);
		ResourceBundle init = ResourceBundle.getBundle("config.demo.demo-global");
		url = init.getString("amq.url");
				
	}

	@Get
	public Representation getMethod(Representation entity) {
		JSONObject ret = new JSONObject();
		String param1 = (String) getRequestAttributes().get("param1");
		if (param1 != null) {
			try {
				param1 = URLDecoder.decode(param1, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + param1 + "]解析失败");
				getResponse().setStatus(new Status(600));
				return new JsonRepresentation(ret.toString());
			}
		}
		if (param1 == null || "".equals(param1)) {
			return getAll();
		} else {
			return getById(param1);
		}
	}
	
	@Post
	public Representation postMethod(Representation entity) {
		JSONObject ret = new JSONObject();
		String param1 = (String) getRequestAttributes().get("param1");
		if (param1 != null) {
			try {
				param1 = URLDecoder.decode(param1, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + param1 + "]解析失败");
				getResponse().setStatus(new Status(600));
			}
		}

		Form form = entity == null ? null : new Form(entity);
		String operation = null;
		try {
			operation = form.getQueryString();
			operation = URLDecoder.decode(operation, "utf-8");
			operation = new String(operation.getBytes("iso-8859-1"), "utf-8");
			JSONObject params = JSONObject.fromObject(operation);
			if ("run".equals(param1)) {
				return run(params);
			} else if ("setstatus".equals(param1)) {
				return setStatus(params);
			} else {
				return save(params);
			}
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "[" + operation + "]解析失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}
	
	@Put
	public Representation putMethod(Representation entity) throws Exception {
		JSONObject ret = new JSONObject();

		ret.put("message", "参数数量不正确");
		Form form = entity == null ? null : new Form(entity);
		String operation = null;
		try {
			String queryString = form.getQueryString();
			operation = URLDecoder.decode(queryString, "utf-8");
			operation = new String(operation.getBytes("iso-8859-1"), "utf-8");
			JSONObject params = JSONObject.fromObject(operation);
			
			return update(params);
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}

		return new JsonRepresentation(ret.toString());
	}
	
	@Delete
	public Representation delMethod(Representation entity) throws Exception {
		String param1 = (String) getRequestAttributes().get("param1");
		if (param1 != null) {
			param1 = URLDecoder.decode(param1, "utf-8");
		}
		try {
			if (param1 == null || "".equals(param1)) {
				return deleteAll();
			} else {
				return deleteById(param1);
			}
		} catch (Exception e) {
			log.eLog(e);
			throw e;
		}
	}

	/**
	 * 返回一个json格式全部
	 * 
	 * @return
	 * @throws Exception
	 */
	private Representation getAll() {
		JSONObject ret = new JSONObject();
		try {
			log.iLog("getAll");
			List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
			List<Task> tasks = taskService.getAll();
			Map<String, InCiCateMap> inCiCateMapMap = getInCiCateMapMap();
			Map<String, SourceToRelationMapping> sourceToRelationMappingMap = getSourceToRelationMappingMap();
			Map<String, SourceToCategoryMapping> sourceToCategoryMappingMap = getSourceToCategoryMappingMap();
			Map<String, PerfToDbMapping> perfToDbMappingMap = getPerfToDbMappingMap();
			for (Task task : tasks) {
				task = addMultiList(sourceToCategoryMappingMap, sourceToRelationMappingMap, inCiCateMapMap, perfToDbMappingMap, task);
				list.add(task.asMap());
			}
			ret.put("data", list);
			ret.put("message", "获取所有任务成功");
		} catch (Exception e) {
			ret.put("message", "获取所有任务失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	/**
	 * 通过唯一id获取task
	 * 
	 * @param id
	 * @return
	 * @throws Exception
	 */
	@Get
	private Representation getById(String id) {
		JSONObject ret = new JSONObject();
		try {
			Task task = taskService.getById(id);
			if (task != null) {
				Map<String, InCiCateMap> inCiCateMapMap = getInCiCateMapMap();
				Map<String, SourceToRelationMapping> sourceToRelationMappingMap = getSourceToRelationMappingMap();
				Map<String, SourceToCategoryMapping> sourceToCategoryMappingMap = getSourceToCategoryMappingMap();
				Map<String, PerfToDbMapping> perfToDbMappingMap = getPerfToDbMappingMap();
				task = addMultiList(sourceToCategoryMappingMap, sourceToRelationMappingMap, inCiCateMapMap, perfToDbMappingMap, task);
				Map<String, Object> asMap = task.asMap();

				ret.put("data", asMap);
				ret.put("message", "获取任务[" + id + "]成功");
			} else {
				ret.put("message", "获取任务[" + id + "]失败");
				getResponse().setStatus(new Status(600));
			}
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "获取任务[" + id + "]失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	/**
	 * 导出XMl
	 * 
	 * @param entity
	 * @return
	 * @throws Exception
	 */
	private Representation exportData() {
		JSONObject ret = new JSONObject();
//		log.dLog("exportXML");
//		File file = null;

//		try {
//			List<InCiCateMap> relMaps = icmService.getAll();
//			Document document = DocumentHelper.createDocument();
//			// 添加<data>根标签
//			Element rootEle = document.addElement("InCiCateMappers");
//
//			Element inCateMapperEle = rootEle.addElement("InCiCateMapper");
//			Map<String, Object> rMap = new HashMap<String, Object>();
//			for (int i = 0; i < relMaps.size(); i++) {
//				rMap = relMaps.get(i).asMap();
//				Element lineEle = inCateMapperEle.addElement("line");
//				for (String r : rMap.keySet()) {
//					lineEle.addElement(r).addText(rMap.get(r).toString());
//				}
//			}
//			file = FileManager.getInstance().createFile(document.asXML(),
//					"外键关系映射-", "xml");
//
//			JSONObject retData = new JSONObject();
//			retData.put("url", file.getName());
//			ret.put("data", retData);
//		} catch (Exception e) {
//			e.printStackTrace();
//			if (file != null && file.exists()) {
//				file.delete();
//			}
//			log.eLog(e);
//			ret.put("message", "创建文件失败");
//			getResponse().setStatus(new Status(600));
//		}
		return new JsonRepresentation(ret.toString());
	}

	/**
	 * 导入XML
	 * 
	 * @param entity
	 * @return
	 */
	@SuppressWarnings("unchecked")
	private String importData(Representation entity) {
		log.dLog("importXML");
		JSONObject ret = new JSONObject();
		//
//		JSONArray message = new JSONArray();
//		DiskFileItemFactory factory = new DiskFileItemFactory();
//		RestletFileUpload upload = new RestletFileUpload(factory);
//
//		List<FileItem> items = null;
//		try {
//			items = upload.parseRepresentation(entity);
//		} catch (FileUploadException e) {
//			log.eLog(e);
//		}
//
//		String filename = "";
//		FileItem fi = items.get(0);
//		try {
//			filename = fi.getName();
//			if (filename == null || filename.equals("")
//					|| filename.toLowerCase().trim().indexOf(".xml") == -1) {
//				log.eLog("文件格式有误");
//				throw new Exception("文件格式有误");
//			}
//			int num = 0;
//			String info = "";
//			Map<String, List<Map<String, Object>>> xMap = parseInCiCateMapperXMLToMap(fi
//					.getInputStream());
//			for (String id : xMap.keySet()) {
//				if (id.equals("InCiCateMapper")) {
//					log.iLog("解析sheet[" + id + "]...");
//					message.add("解析sheet[" + id + "]...");
//					List<Map<String, Object>> data = xMap.get(id);
//					List<InCiCateMap> datas = new ArrayList<InCiCateMap>();
//					String mName, sCateId, sField, eCateId, eField;
//					String rId;
//					// InCiCateMap icm = null;
//
//					for (Map<String, Object> obj : data) {
//						mName = obj.get("映射名称").toString();
//						// icm = icmService.getByName(mName);
//						rId = obj.get("关系ID").toString();
//						sCateId = obj.get("起点分类ID").toString();
//						sField = obj.get("起点分类字段").toString();
//						eCateId = obj.get("终点分类ID").toString();
//						eField = obj.get("终点分类字段").toString();
//						CiCategory sCate = ciCateService.getById(sCateId);
//						CiCategory eCate = ciCateService.getById(eCateId);
//						RelCategory rc = rcService.getById(rId);
//						// TODO 关系属性值没有处理
//						InCiCateMap mp = new InCiCateMap(mName, rc, null,
//								sCate, eCate, sField, eField);
//						datas.add(mp);
//					}
//					if (datas.size() > 0) {
//						log.iLog("保存/更新数据开始...");
//						message.add("保存/更新数据开始...");
//						for (InCiCateMap im : datas) {
//							if (icmService.exist(im.getName())) {
//								icmService.update(im);
//							} else {
//								icmService.save(im);
//							}
//						}
//						String in = "[" + id + "]保存(" + datas.size() + ")条新数据";
//						log.iLog(in);
//						info = info.equals("") ? info : info + "<br/>";
//						info += in;
//						message.add(in);
//					}
//				}
//			}
//			// util.addFunctionCall("pushInfoMsg", "上传分类完成");
//			message.add("上传内部映射完成");
//			message.add("成功导入内部映射[" + num + "]条");
//			ret.put("message", message);
//			log.dLog("importXML success");
//		} catch (Exception e) {
//			ret.put("message", e.getMessage());
//		}
		return ret.toString();
	}

	private JsonRepresentation save(JSONObject data) {
		JSONObject ret = new JSONObject();
		try {
			log.dLog("save Task");
			if (data == null || data.size() == 0) {
				throw new Exception("Task参数不能空");
			}
			String name = (String) data.get("name");
			if (name == null || name.equals("")) {
				throw new Exception("名称不能空");
			}
			Task task = taskService.getByName(name);
			if(task!=null){
				throw new Exception("任务["+name+"]已存在");
			}

			Task t = new Task();
			t.setName(name);
			t.setOpen(data.getBoolean("open"));
			t.setTimeOut(data.getBoolean("timeOut"));
			JSONObject timing;
			try{
				timing = data.getJSONObject("timing");
			}catch(Exception e){
				timing = new JSONObject();
			}
			t.setTiming(timing);
			JSONArray cateList = null;
			try{
				cateList = data.getJSONArray("dbCiCateMapIds");
				JSONArray cateListNew = new JSONArray();
				for(int i=0;i<cateList.size();i++){
					JSONObject cate = cateList.getJSONObject(i);
					cateListNew.add(cate.getString("id"));
				}
				cateList = cateListNew;
			}catch(Exception e){
				cateList = new JSONArray();
			}
			t.setDbCiCateMapIds(cateList);
			JSONArray relList = null;
			try{
				relList = data.getJSONArray("outCiCateMapIds");
				JSONArray relListNew = new JSONArray();
				for(int i=0;i<relList.size();i++){
					JSONObject rel = relList.getJSONObject(i);
					relListNew.add(rel.getString("id"));
				}
				relList = relListNew;
			}catch(Exception e){
				relList = new JSONArray();
			}
			t.setOutCiCateMapIds(relList);
			JSONArray ciList = null;
			try{
				ciList = data.getJSONArray("inCiCateMapIds");
				JSONArray ciListNew = new JSONArray();
				for(int i=0;i<ciList.size();i++){
					JSONObject ci = ciList.getJSONObject(i);
					ciListNew.add(ci.getString("id"));
				}
				ciList = ciListNew;
			}catch(Exception e){
				ciList = new JSONArray();
			}
			t.setInCiCateMapIds(ciList);
			JSONArray perfList = null;
			try{
				perfList = data.getJSONArray("perfDbMapIds");
				JSONArray perfListNew = new JSONArray();
				for(int i=0;i<perfList.size();i++){
					JSONObject perf = perfList.getJSONObject(i);
					perfListNew.add(perf.getString("id"));
				}
				perfList = perfListNew;
			}catch(Exception e){
				perfList = new JSONArray();
			}
			t.setPerfDbMapIds(perfList);
			t = taskService.save(t);
			Map<String, InCiCateMap> inCiCateMapMap = getInCiCateMapMap();
			Map<String, SourceToRelationMapping> sourceToRelationMappingMap = getSourceToRelationMappingMap();
			Map<String, SourceToCategoryMapping> sourceToCategoryMappingMap = getSourceToCategoryMappingMap();
			Map<String, PerfToDbMapping> perfToDbMappingMap = getPerfToDbMappingMap();
			t = addMultiList(sourceToCategoryMappingMap, sourceToRelationMappingMap, inCiCateMapMap, perfToDbMappingMap, t);
			Map<String, Object> asMap = t.asMap();
			ret.put("data", asMap);
			ret.put("message", "保存成功");
			mqService.sendMessage(data.toString(), url, "task_add");
		} catch (Exception e) { 
			log.eLog(e);
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	private JsonRepresentation update(JSONObject data) {
		JSONObject ret = new JSONObject();
		try {
			log.dLog("update Task");
			if (data == null || data.size() == 0) {
				throw new Exception("Task参数不能空");
			}
			String id = data.getString("id");
			Task t = taskService.getById(id);
			if (t == null) {
				throw new Exception("Task[" + id + "]不存在");
			}
			t.setName(data.containsKey("name") ? data.getString("name"):"");
			t.setOpen(data.getBoolean("open"));
			t.setTimeOut(data.getBoolean("timeOut"));
			JSONObject timing;
			try{
				timing = data.getJSONObject("timing");
			}catch(Exception e){
				timing = new JSONObject();
			}
			t.setTiming(timing);
			JSONArray cateList = null;
			try{
				cateList = data.getJSONArray("dbCiCateMapIds");
				JSONArray cateListNew = new JSONArray();
				for(int i=0;i<cateList.size();i++){
					JSONObject cate = cateList.getJSONObject(i);
					cateListNew.add(cate.getString("id"));
				}
				cateList = cateListNew;
			}catch(Exception e){
				cateList = new JSONArray();
			}
			t.setDbCiCateMapIds(cateList);
			JSONArray relList = null;
			try{
				relList = data.getJSONArray("outCiCateMapIds");
				JSONArray relListNew = new JSONArray();
				for(int i=0;i<relList.size();i++){
					JSONObject rel = relList.getJSONObject(i);
					relListNew.add(rel.getString("id"));
				}
				relList = relListNew;
			}catch(Exception e){
				relList = new JSONArray();
			}
			t.setOutCiCateMapIds(relList);
			JSONArray ciList = null;
			try{
				ciList = data.getJSONArray("inCiCateMapIds");
				JSONArray ciListNew = new JSONArray();
				for(int i=0;i<ciList.size();i++){
					JSONObject ci = ciList.getJSONObject(i);
					ciListNew.add(ci.getString("id"));
				}
				ciList = ciListNew;
			}catch(Exception e){
				ciList = new JSONArray();
			}
			t.setInCiCateMapIds(ciList);
			JSONArray perfList = null;
			try{
				perfList = data.getJSONArray("perfDbMapIds");
				JSONArray perfListNew = new JSONArray();
				for(int i=0;i<perfList.size();i++){
					JSONObject perf = perfList.getJSONObject(i);
					perfListNew.add(perf.getString("id"));
				}
				perfList = perfListNew;
			}catch(Exception e){
				perfList = new JSONArray();
			}
			t.setPerfDbMapIds(perfList);
			t = taskService.update(t);
			Map<String, InCiCateMap> inCiCateMapMap = getInCiCateMapMap();
			Map<String, SourceToRelationMapping> sourceToRelationMappingMap = getSourceToRelationMappingMap();
			Map<String, SourceToCategoryMapping> sourceToCategoryMappingMap = getSourceToCategoryMappingMap();
			Map<String, PerfToDbMapping> perfToDbMappingMap = getPerfToDbMappingMap();
			t = addMultiList(sourceToCategoryMappingMap, sourceToRelationMappingMap, inCiCateMapMap, perfToDbMappingMap, t);
			Map<String, Object> asMap = t.asMap();
			ret.put("data", asMap);
			ret.put("message", "修改成功");
			mqService.sendMessage(data.toString(), url, "task_update");
		} catch (Exception e) { 
			log.eLog(e);
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	/**
	 * 删除全部的ciCate和ci
	 * 
	 * @return
	 * @throws Exception
	 */
	private JsonRepresentation deleteAll() {
		JSONObject ret = new JSONObject();
		try{
			taskService.deleteAll();
			ret.put("message", "删除全部成功");
		}catch(Exception e){
			e.printStackTrace();
			log.eLog(e.getMessage());
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		
		return new JsonRepresentation(ret.toString());
	}

	/**
	 * 删除ciCate和ciCate下的全部ci
	 * 
	 * @param cateId
	 * @return
	 * @throws Exception
	 */
	private JsonRepresentation deleteById(String id) {
		JSONObject ret = new JSONObject();
		try {
			log.dLog("delete");
			if (id == null || id.equals("")) {
				throw new Exception("任务ID不能为空");
			}
			Task task = taskService.getById(id);
			if (task == null) {
				throw new Exception("要删除的任务不存在");
			}
			// Long id = irm.getNeo4jid();	
			taskService.delete(task);
			mqService.sendMessage(JSONObject.fromObject(task).toString(), url, "task_delete");
			ret.put("message", "删除内部映射[" + id + "]成功");
			ret.put("message", "删除[" + task.getName() + "]成功");
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "删除失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}
	
	private Representation run(JSONObject data) {
		JSONObject ret = new JSONObject();
		String id = "";
		try {
			id = data.getString("id");
			Task task = taskService.getById(id);
			if (task != null) {
				Map<String, InCiCateMap> inCiCateMapMap = getInCiCateMapMap();
				Map<String, SourceToRelationMapping> sourceToRelationMappingMap = getSourceToRelationMappingMap();
				Map<String, SourceToCategoryMapping> sourceToCategoryMappingMap = getSourceToCategoryMappingMap();
				Map<String, PerfToDbMapping> perfToDbMappingMap = getPerfToDbMappingMap();
				task = addMultiList(sourceToCategoryMappingMap, sourceToRelationMappingMap, inCiCateMapMap, perfToDbMappingMap, task);
				taskService.runNow(task);
				ret.put("message", "执行任务成功");
			} else {
				ret.put("message", "获取任务[" + id + "]失败");
				getResponse().setStatus(new Status(600));
			}
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "获取任务[" + id + "]失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}
	
	private Representation setStatus(JSONObject data){
		JSONObject ret = new JSONObject();
		try {
            log.dLog("setTasksStatus");
            String name = data.getString("name");
            if (name == null || name.equals("")) {
                throw new Exception("任务ID不能为空");
            }
            Task task = taskService.getByName(name);
            if (task == null) {
                throw new Exception("任务[" + name + "]不存在");
            }
            Map<String, InCiCateMap> inCiCateMapMap = getInCiCateMapMap();
			Map<String, SourceToRelationMapping> sourceToRelationMappingMap = getSourceToRelationMappingMap();
			Map<String, SourceToCategoryMapping> sourceToCategoryMappingMap = getSourceToCategoryMappingMap();
			Map<String, PerfToDbMapping> perfToDbMappingMap = getPerfToDbMappingMap();
			task = addMultiList(sourceToCategoryMappingMap, sourceToRelationMappingMap, inCiCateMapMap, perfToDbMappingMap, task);
            boolean timeOut = false;
            Boolean status = data.getBoolean("status");
            if (status) {
                Map<String, String> tm = task.getTiming();
                if (task.getOpen()) {
                    if (QuartzManager.getJob(task.getName())) {
                        QuartzManager.editJobTime(name, tm.get("runtime"));
                    } else {
                        String type = tm.get("触发频率");
                        if (type.equals("one")) {
                            String time = tm.get("time");
                            SimpleDateFormat sd = new SimpleDateFormat(
                                    "yyyy-MM-dd HH:mm");
                            Date d1 = sd.parse(time);
                            Date d2 = new Date();
                            if (d1.getTime() > d2.getTime()) {
                              /*  QuartzManager.addJob(task.getName(),
                                        TaskJob.class.getName(), tm.get("runtime"));*/
                            } else {
                                timeOut = true;
                                log.dLog("任务已过期");
                            }
                        } else {
                           /* QuartzManager.addJob(task.getName(),
                                    TaskJob.class.getName(), tm.get("runtime"));*/
                        }
                    }
                } else {
                    String type = tm.get("触发频率");
                    if (type.equals("one")) {
                        String time = tm.get("time");
                        SimpleDateFormat sd = new SimpleDateFormat("yyyy-MM-dd HH:mm");
                        Date d1 = sd.parse(time);
                        Date d2 = new Date();
                        if (d1.getTime() > d2.getTime()) {
                           // QuartzManager.addJob(task.getName(), TaskJob.class.getName(), tm.get("runtime"));
                        } else {
                            timeOut = true;
                        }
                    } else {
                       // QuartzManager.addJob(task.getName(), TaskJob.class.getName(), tm.get("runtime"));
                    }
                }
            } else {
                //QuartzManager.removeJob(task.getName());
            }
            task = taskService.setStatus(task, status, timeOut);
            ret.put("data", task.asMap());
            ret.put("message", "任务[" + name + (status ? "]开启" : "]关闭") + "成功");
            log.dLog("setTasksStatus success");
        } catch (Exception me) {
            log.eLog(me);
            ret.put("message", me.getMessage());
            getResponse().setStatus(new Status(600));
        }
		return new JsonRepresentation(ret.toString());
	}

	/**
	 * 解析 内部配置项分类映射 XML
	 * 
	 * @param in
	 * @return
	 * @throws DocumentException
	 */
//	private static Map<String, List<Map<String, Object>>> parseInCiCateMapperXMLToMap(
//			InputStream in) throws DocumentException {
//		Map<String, List<Map<String, Object>>> xMap = new HashMap<String, List<Map<String, Object>>>();
//		SAXReader sax = new SAXReader();
//		Document document = sax.read(in);
//		Element rootEle = document.getRootElement();
//		Iterator<Element> iterator = rootEle.elementIterator();
//		while (iterator.hasNext()) {
//			List<Map<String, Object>> lines = new ArrayList<Map<String, Object>>();
//			Element ele = iterator.next();
//			// 获取<line>标签集
//			List<Element> lineEles = ele.elements();
//			for (Element lineEle : lineEles) {
//				List<Element> lineValEles = lineEle.elements();
//				Map<String, Object> line = new HashMap<String, Object>();
//				for (Element lineValEle : lineValEles) {
//					line.put(lineValEle.getName(), lineValEle.getText());
//				}
//				lines.add(line);
//			}
//			xMap.put(ele.getName(), lines);
//		}
//		return xMap;
//	}

	private Map<String, SourceToCategoryMapping> getSourceToCategoryMappingMap() throws Exception{
		List<SourceToCategoryMapping> list = sourceCateMapService.getAll();
		Map<String, SourceToCategoryMapping> map = new HashMap<String, SourceToCategoryMapping>();
		for(SourceToCategoryMapping m:list){
			map.put(m.getId(), m);
		}
		return map;
	}
	
	private Map<String, SourceToRelationMapping> getSourceToRelationMappingMap() throws Exception{
		List<SourceToRelationMapping> list = sourceRelMapService.getAll();
		Map<String, SourceToRelationMapping> map = new HashMap<String, SourceToRelationMapping>();
		for(SourceToRelationMapping m:list){
			map.put(m.getId(), m);
		}
		return map;
	}
	
	private Map<String, InCiCateMap> getInCiCateMapMap() throws Exception{
		List<InCiCateMap> list = inCiCateMapService.getAll();
		Map<String, InCiCateMap> map = new HashMap<String, InCiCateMap>();
		for(InCiCateMap m:list){
			map.put(m.getId(), m);
		}
		return map;
	}
	
	private Map<String, PerfToDbMapping> getPerfToDbMappingMap() throws Exception{
		List<PerfToDbMapping> list = perfDbMapService.getAll();
		Map<String, PerfToDbMapping> map = new HashMap<String, PerfToDbMapping>();
		for(PerfToDbMapping m:list){
			map.put(m.getId(), m);
		}
		return map;
	}
	
	private Task addMultiList(Map<String, SourceToCategoryMapping> cateMap, Map<String, SourceToRelationMapping> relMap, Map<String, InCiCateMap> ciMap, Map<String, PerfToDbMapping> perfMap, Task task) throws Exception{
		List<SourceToCategoryMapping> cateList = new ArrayList<SourceToCategoryMapping>();
		List<String> cateIds = task.getDbCiCateMapIds();
		for(String id:cateIds){
			SourceToCategoryMapping cate = cateMap.get(id);
			if(cate!=null){
				cateList.add(cate);
			}
		}
		task.setDbCiCateMap(cateList);
		List<SourceToRelationMapping> relList = new ArrayList<SourceToRelationMapping>();
		List<String> relIds = task.getOutCiCateMapIds();
		for(String id:relIds){
			SourceToRelationMapping rel = relMap.get(id);
			if(rel!=null){
				relList.add(rel);
			}
		}
		task.setOutCiCateMap(relList);
		List<InCiCateMap> ciList = new ArrayList<InCiCateMap>();
		List<String> ciIds = task.getInCiCateMapIds();
		for(String id:ciIds){
			InCiCateMap ci = ciMap.get(id);
			if(ci!=null){
				ciList.add(ci);
			}
		}
		task.setInCiCateMap(ciList);
		List<PerfToDbMapping> perfList = new ArrayList<PerfToDbMapping>();
		List<String> perfIds = task.getPerfDbMapIds();
		for(String id:perfIds){
			PerfToDbMapping perf = perfMap.get(id);
			if(perf!=null){
				perfList.add(perf);
			}
		}
		task.setPerfDbMap(perfList);
		return task;
	}
}
