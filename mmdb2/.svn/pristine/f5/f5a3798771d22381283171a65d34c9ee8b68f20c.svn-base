package com.mmdb.rest.category;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.Date;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.restlet.Context;
import org.restlet.Request;
import org.restlet.Response;
import org.restlet.data.Form;
import org.restlet.data.Header;
import org.restlet.data.Status;
import org.restlet.ext.json.JsonRepresentation;
import org.restlet.representation.Representation;
import org.restlet.resource.Delete;
import org.restlet.resource.Get;
import org.restlet.resource.Post;
import org.restlet.resource.Put;
import org.restlet.resource.ServerResource;
import org.restlet.util.Series;

import com.mmdb.core.log.Log;
import com.mmdb.core.log.LogFactory;
import com.mmdb.core.utils.SpringContextUtil;
import com.mmdb.model.bean.User;
import com.mmdb.model.categroy.ViewCategory;
import com.mmdb.service.category.IViewCateService;
import com.mmdb.service.info.IViewInfoService;
import com.mmdb.service.role.IRoleService;
import com.mmdb.service.role.IUserService;
import com.mmdb.util.des.Des;

/**
 * 对外提供的View视图分类接口类
 * 
 * @author XIE
 */
public class ViewCateRest extends ServerResource {
	private Log log = LogFactory.getLogger("ViewCateRest");
	/**
	 * 确认权限时使用的动作,删除动作
	 */
	private final int DELETE = 0;
	/**
	 * 确认权限时使用的动作,添加动作
	 */
	private final int ADD = 1;
	/**
	 * 确认权限时使用的动作,更新动作
	 */
	private final int UPDATE = 2;
	/**
	 * 确认权限时使用的动作,查看动作
	 */
	private final int SEE = 4;

	private IViewCateService vCateService;
	private IViewInfoService vInfoService;
	private IUserService userService;
	private IRoleService roleService;

	@Override
	public void init(Context context, Request request, Response response) {
		super.init(context, request, response);
		vCateService = (IViewCateService) SpringContextUtil
				.getApplicationContext().getBean("viewCateService");

		vInfoService = (IViewInfoService) SpringContextUtil
				.getApplicationContext().getBean("viewInfoService");

		userService = (IUserService) SpringContextUtil.getApplicationContext()
				.getBean("userService");

		roleService = (IRoleService) SpringContextUtil.getApplicationContext()
				.getBean("roleService");

		setExisting(true);
	}

	@Get
	public Representation getMethod(Representation entity) {
		JSONObject ret = new JSONObject();
		String param1 = (String) getRequestAttributes().get("param1");
		if (param1 != null) {
			try {
				param1 = URLDecoder.decode(param1, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + param1 + "]解析失败");
				getResponse().setStatus(new Status(600));
				return new JsonRepresentation(ret.toString());
			}
		}

		if (param1 == null || "".equals(param1)) {
			return getAll(null);
		} else if ("private".equals(param1)) {
			return getAll(false);
		} else if ("public".equals(param1)) {
			return getAll(true);
		} else {
			return getById(param1);
		}
	}

	@Post
	public Representation postMethod(Representation entity) {
		JSONObject ret = new JSONObject();
		String param1 = (String) getRequestAttributes().get("param1");
		if (param1 != null) {
			try {
				param1 = URLDecoder.decode(param1, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + param1 + "]解析失败");
				getResponse().setStatus(new Status(600));
			}
		}

		String operation = null;
		try {

			Form form = entity == null ? null : new Form(entity);
			operation = form.getQueryString();
			operation = URLDecoder.decode(operation, "utf-8");
			operation = new String(operation.getBytes("iso-8859-1"), "utf-8");

			JSONObject params = JSONObject.fromObject(operation);
			return save(params);
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "[" + operation + "]解析失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	@Put
	public Representation putMethod(Representation entity) {
		JSONObject ret = new JSONObject();

		Form form = entity == null ? null : new Form(entity);
		String operation = null;
		try {
			operation = form.getQueryString();
			operation = URLDecoder.decode(operation, "utf-8");
			operation = new String(operation.getBytes("iso-8859-1"), "utf-8");
			JSONObject params = JSONObject.fromObject(operation);
			return edit(params);
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "[" + operation + "]解析失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	@Delete
	public Representation delMethod(Representation entity) {
		JSONObject ret = new JSONObject();

		String param1 = (String) getRequestAttributes().get("param1");
		if (param1 != null) {
			try {
				param1 = URLDecoder.decode(param1, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + param1 + "]解析失败");
				getResponse().setStatus(new Status(600));
				return new JsonRepresentation(ret.toString());
			}
		}
		if (param1 == null || "".equals(param1)) {
			return deleteAll(null);
		} else if ("private".equals(param1)) {
			return deleteAll(false);
		} else if ("public".equals(param1)) {
			return deleteAll(true);
		} else {
			return deleteById(param1);
		}
	}

	private Representation getById(String id) {
		JSONObject ret = new JSONObject();
		log.dLog("getById");
		try {
			ViewCategory viewCate = vCateService.getById(id);
			if (viewCate != null) {
				Map<String, Object> asMap = viewCate.asMapForRest();
				ret.put("data", asMap);
				ret.put("message", "获取视图分类成功");
			} else {
				ret.put("message", "获取视图分类失败");
				getResponse().setStatus(new Status(600));
			}
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "获取视图分类失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	private Representation getAll(Boolean open) {
		log.dLog("getAll");
		JSONObject ret = new JSONObject();
		try {
			List<ViewCategory> list = null;
			if (open == null) {
				list = vCateService.getAll();
			} else if (open) {
				list = vCateService.getAllOpenViewCate();
			} else {
				list = vCateService.getAllByUser(getUser());
			}
			JSONArray data = new JSONArray();
			for (ViewCategory viewCategory : list) {
				Map<String, Object> asMap = viewCategory.asMapForRest();
				data.add(asMap);
			}

			ret.put("data", data);
			ret.put("message", "获取视图分类成功");
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "获取视图分类失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	private Representation save(JSONObject params) {
		log.dLog("save");
		JSONObject ret = new JSONObject();
		boolean open = false;
		String parentId = null;
		String cateName = null;
		try {
			open = params.getBoolean("open");
		} catch (Exception e) {
			log.eLog("save", e);
			ret.put("message", "必须参数[open]不存在");
		}

		try {
			parentId = params.getString("parent");
		} catch (Exception e) {
			log.eLog("save", e);
			ret.put("message", "必须参数[parent]不存在");
		}

		try {
			cateName = params.getString("name");
		} catch (Exception e) {
			log.eLog("save", e);
			ret.put("message", "必须参数[name]不存在");
		}

		if (ret.containsKey("message")) {
			getResponse().setStatus(new Status(600));
			return new JsonRepresentation(ret.toString());
		}

		try {
			if (open) {
				checkAuth(ADD, cateName);
			}

			if (cateName == null || "".equals(cateName)) {
				throw new Exception("视图分类名称不能为空");
			}

			User user = getUser();
			ViewCategory nCategory = null;
			if (parentId == null || parentId.equals("")) {
				if (vCateService.exist(open, cateName, parentId)) {
					throw new Exception("视图分类[" + cateName + "]已存在");
				}
				nCategory = new ViewCategory(null, cateName,
						user.getLoginName(), open);
			} else {
				ViewCategory category = vCateService.getById(parentId);
				if (category == null) {
					throw new Exception("父类[" + parentId + "]不存在");
				}
				List<ViewCategory> childrens = category.getAllChildren();
				for (ViewCategory viewCategory : childrens) {
					if (viewCategory.getName().equals(cateName)) {
						throw new Exception("视图分类[" + cateName + "]已存在");
					}
				}
				nCategory = new ViewCategory(null, cateName,
						user.getLoginName(), open, category);
			}

			ViewCategory nc = vCateService.save(nCategory);
			ret.put("message", "保存视图分类[" + cateName + "]成功");
			ret.put("data", nc.asMapForRest());
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}

		return new JsonRepresentation(ret.toString());
	}

	private Representation edit(JSONObject params) {
		JSONObject ret = new JSONObject();
		log.dLog("edit");
		String cateId = null;
		String name = null;
		String parent = null;
		boolean open = false;
		try {
			cateId = params.getString("id");
		} catch (Exception e) {
			log.eLog("save", e);
			ret.put("message", "必须参数[id]不存在");
		}

		try {
			name = params.getString("name");
		} catch (Exception e) {
			log.eLog("save", e);
			ret.put("message", "必须参数[name]不存在");
		}

		try {
			parent = params.getString("parent");
		} catch (Exception e) {
			log.eLog("save", e);
			ret.put("message", "必须参数[parent]不存在");
		}

		if (ret.containsKey("message")) {
			getResponse().setStatus(new Status(600));
			return new JsonRepresentation(ret.toString());
		}
		try {
			ViewCategory vCategory = null;
			List<ViewCategory> allCate = vCateService.getAll();

			ViewCategory parentCate = null;
			for (ViewCategory viewCategory : allCate) {
				if (viewCategory.getId().equals(cateId)) {
					vCategory = viewCategory;
				}
				if (viewCategory.getId().equals(parent)) {
					parentCate = viewCategory;
				}
			}
			open = vCategory.getOpen();

			if (open)
				checkAuth(UPDATE, name);

			if (vCategory.getParent() != null) {
				if (vCategory.getParent().getId().equals(parent)) {
					// 父亲没改变
					if (!vCategory.getName().equals(name)) {
						List<ViewCategory> children = vCategory.getParent()
								.getChildren();
						int i = 0;
						for (ViewCategory viewCategory : children) {
							if (viewCategory.getName().equals(name)) {
								i++;
							}
						}
						if (i > 1) {
							throw new Exception("视图分类[" + name + "]已存在");
						}
					}
				} else {
					// 父亲改变
					if (parentCate != null) {
						List<ViewCategory> children = parentCate.getChildren();
						int i = 0;
						for (ViewCategory viewCategory : children) {
							if (viewCategory.getName().equals(name)) {
								i++;
							}
						}
						if (i > 1) {
							throw new Exception("视图分类[" + name + "]已存在");
						}
					}
					vCategory.setParent(parentCate);
				}
			} else {
				if (parentCate != null) {
					List<ViewCategory> children = parentCate.getChildren();
					int i = 0;
					for (ViewCategory viewCategory : children) {
						if (viewCategory.getName().equals(name)) {
							i++;
						}
					}
					if (i > 1) {
						throw new Exception("视图分类[" + name + "]已存在");
					}
					vCategory.setParent(parentCate);
				} else if (!vCategory.getName().equals(name))
					for (ViewCategory viewCategory : allCate) {
						if (viewCategory.getParent() == null
								&& viewCategory.getName().equals(name)) {
							throw new Exception("视图分类[" + name + "]已存在");
						}
					}
			}

			vCategory.setName(name);
			vCategory.setUpdateTime(new Date().getTime());
			ViewCategory update = vCateService.update(vCategory);
			ret.put("data", update.asMapForRest());
			ret.put("message", "更新分类[" + update.getName() + "成功");
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}

		return new JsonRepresentation(ret.toString());
	}

	private Representation deleteAll(Boolean open) {
		JSONObject ret = new JSONObject();
		log.dLog("deleteAllViewCategory");
		try {
			ret.put("message", "不支持此功能");
		} catch (Exception e) {
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	private Representation deleteById(String cateId) {
		log.dLog("deleteById");
		JSONObject ret = new JSONObject();
		try {
			ViewCategory viewCate = vCateService.getById(cateId);
			String name = viewCate.getName();
			List<String> viewIds = vInfoService.getViewIdsByCate(viewCate
					.getId());
			if (viewIds != null && viewIds.size() > 0) {
				throw new Exception("此分类有视图,请先删除视图!");
			}
			
			List<ViewCategory> children = viewCate.getChildren();
			if (children != null && children.size() != 0) {
				throw new Exception("此分类有继承的子类,需要先删除子类");
			}

			vCateService.deleteById(cateId);
			ret.put("message", "删除分类[" + name + "]成功");
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	/**
	 * 判断用户是否有操作该目录的权限
	 * 
	 * @param method
	 *            上面定义的几个final 变量 DELETE,ADD,UPDATE,SEE
	 * @param viewCateName
	 *            要添加的视图名称
	 * @return
	 */
	private void checkAuth(int method, String viewCateName) throws Exception {

		if (method == ADD || method == DELETE|| method == UPDATE) {
			User user = getUser();
			String ownerRoles = user.getOwnerRoles();
			String[] roles = ownerRoles.split(",");
			boolean flag = false;
			for (String role : roles) {
				if ("管理员".equals(role)) {
					flag = true;
					break;
				}
			}
			if (!flag) {
				throw new Exception("权限不足");
			}
			return;
		}
		if (method == 100) {
			log.eLog("权限不足");
			throw new Exception("权限不足");
		}
	}

	public User getUser() {
		Series<Header> headers = getRequest().getHeaders();
		String values = headers.getValues("token");
		if (values == null || "".equals(values))
			return null;
		Des des = new Des();
		String decrypt = des.decrypt(values);
		String[] split = decrypt.split("\\|");
		return userService.getUserByLoginName(split[0]);

		// User user = new User();
		// user.setUserName("admin");
		// user.setLoginName("admin");
		// return user;
	}

}
