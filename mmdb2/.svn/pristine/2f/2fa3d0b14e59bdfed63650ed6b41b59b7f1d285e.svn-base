package com.mmdb.service.info.impl;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.imageio.ImageIO;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.mmdb.core.utils.ProjectInfo;
import com.mmdb.core.utils.SvgUtil;
import com.mmdb.core.utils.SysProperties;
import com.mmdb.model.bean.Page;
import com.mmdb.model.bean.User;
import com.mmdb.model.categroy.ViewCategory;
import com.mmdb.model.icon.ViewIcon;
import com.mmdb.model.icon.storage.BackgroundStorage;
import com.mmdb.model.info.ViewInformation;
import com.mmdb.model.info.storage.ViewInfoStorage;
import com.mmdb.model.relation.storage.CiViewRelStorage;
import com.mmdb.ruleEngine.Tool;
import com.mmdb.service.info.IViewInfoService;
import com.mmdb.service.subscription.ISubscriptionService;
import com.mmdb.util.FileManager;

/**
 * 视图数据 服务 - 实现类
 * 
 * @author XIE
 */
@Component("viewInfoService")
public class ViewInfoServiceImpl implements IViewInfoService {

	@Autowired
	private ViewInfoStorage vInfoStorage;
	@Autowired
	private CiViewRelStorage ciViewRelStorage;
	@Autowired
	private BackgroundStorage backgroundStorage;
	@Autowired
	private ISubscriptionService subscription;
	
	@Override
	public ViewInformation save(ViewInformation info) throws Exception {
		return vInfoStorage.save(info);
	}

	@Override
	public ViewInformation update(ViewInformation info) throws Exception {
		return vInfoStorage.update(info);
	}

	@Override
	public boolean exist(String cateId, String name) throws Exception {
		return vInfoStorage.exist(cateId, name);
	}

	@Override
	public ViewInformation getById(String id) throws Exception {
		return vInfoStorage.getById(id);
	}

	@Override
	public ViewInformation getByName(String cateId, String name)
			throws Exception {
		return vInfoStorage.getByName(cateId, name);
	}

	@Override
	public List<ViewInformation> getAll() throws Exception {
		return vInfoStorage.getAll();
	}

	@Override
	public List<ViewInformation> getAllPrivateViewByUser(User user)
			throws Exception {
		return vInfoStorage.getAllPrivateViewByUser(user.getLoginName());
	}

	@Override
	public List<ViewInformation> getByids(List<String> ids) throws Exception {
		if (ids == null || ids.size() == 0)
			return null;
		StringBuffer sql = new StringBuffer("select * from Views where ");
		for (int i = 0, length = ids.size(); i < length; i++) {
			sql.append(" _id = '");
			sql.append(ids.get(i));
			sql.append("' or");
		}
		sql.delete(sql.length() - 2, sql.length());
		return vInfoStorage.query(sql.toString(), null);
	}

	@Override
	public List<ViewInformation> getAllOpenInfo() throws Exception {
		return vInfoStorage.getAllOpenInfo();
	}
	
	@Override
	public List<String> getAllOpenViewAuthor() throws Exception {
		return vInfoStorage.getAllOpenViewAuthor();
	}
	
	@Override
	public List<ViewInformation> getOpenViewByUser(String userName)
			throws Exception {
		return vInfoStorage.getOpenViewByUser(userName);
	}
	
//	@Override
//	public void deleteAll() throws Exception {
//		vInfoStorage.deleteAll();
//	}
//
//	@Override
//	public void deleteAllOpenView() throws Exception {
//		vInfoStorage.deleteAllOpenView();
//	}
//
//	@Override
//	public void deleteAllPrivateViewByUser(User user) throws Exception {
//		vInfoStorage.deleteAllPrivateViewByUser(user.getLoginName());
//	}

	@Override
	public void deleteById(String id) throws Exception {
		vInfoStorage.deleteById(id);
		ciViewRelStorage.deleteByView(id);
		subscription.delete(id, true);
	}

	@Override
	public void deleteByViewCategory(List<ViewCategory> vCates)
			throws Exception {
		if(vCates!=null){
			//清除相关联的订阅
			for (ViewCategory viewCategory : vCates) {
				List<String> viewIds = vInfoStorage.getViewIdsByCategoryId(viewCategory.getId());
				for (String viewId : viewIds) {
					ciViewRelStorage.deleteByView(viewId);
					subscription.delete(viewId, true);
				}
			}
			vInfoStorage.deleteByViewCategory(vCates);
		}
	}

	@Override
	public List<ViewInformation> qureyByAdvanced(ViewCategory category,
			Map<String, String> mustExp, Map<String, String> orExp,
			boolean extend, User user) throws Exception {
		boolean queryAll = true;// 当参数没有值的时候,就查询全部的.
		StringBuffer match = new StringBuffer("select * from Views where ");
		// 用于判断是否出现继承和是否有categroyid这个条件
		List<String> cgIds = new ArrayList<String>();
		if (category != null) {
			cgIds.add(category.getId());
			if (extend) {// ciCate是否继承
				List<ViewCategory> children = category.getAllChildren();
				for (ViewCategory child : children) {
					cgIds.add(child.getId());
				}
			}
		}

		if (cgIds.size() != 0) {
			queryAll = false;
			for (String cgid : cgIds) {
				match.append(" categoryId = '");
				match.append(cgid);
				match.append("' or");
			}
			match.delete(match.length() - 2, match.length());
		}

		// 必要字段
		if (mustExp != null && mustExp.size() > 0) {
			if (!queryAll) {// 出现了categoryid where n.xx =='xx' and
				match.append(" and");
			}
			queryAll = false;
			for (Entry<String, String> entry : mustExp.entrySet()) {
				String key = entry.getKey().trim();

			}
			match.delete(match.length() - 3, match.length());// 去掉一个多余的and
		}//

		if (orExp != null && orExp.size() > 0) {
			if (!queryAll) {// 出现了categoryid where n.xx =='xx' and
				if (!"*".equals(orExp.get("*"))) {
					match.append(" and( ");
				} else {
					match.append("  ");
				}
			}
			queryAll = false;
			for (Entry<String, String> entry : orExp.entrySet()) {
				match.append("'");
				match.append(entry.getKey());
				match.append("' like ");
				match.append(entry.getValue());
			}
			match.delete(match.length() - 2, match.length());// 去掉一个多余的or
			match.append(")");
		}

		if (queryAll) {
			match.delete(match.length() - 6, match.length());// 将多出的where 删除掉
		}
		// match.append("return n");
		return vInfoStorage.query(match.toString(), null);
	}

	@Override
	public List<ViewInformation> qureyFuzzy(String keyWord, User user)
			throws Exception {
		List<ViewInformation> views = null;
		if (keyWord == null || keyWord.equals("") || keyWord.equals("*")) {
			if (user == null) {
				views = vInfoStorage.getAll();
			} else {
				List<Object> params = new ArrayList<Object>();
				params.add(true);
				params.add(false);
				params.add(user.getLoginName());
				String CQL = "select * from Views where isOpen = ? or isOpen = ? and userName = ?";
				views = vInfoStorage.getViewsBySql(CQL, params, null);
			}
		} else {
			String[] attrs = { "name" };
			String trem = "";
			List<Object> params = new ArrayList<Object>();
			params.add(true);
			params.add(false);
			params.add(user.getLoginName());

			if (keyWord.startsWith("*") && keyWord.endsWith("*")) {
				keyWord = keyWord.replace("*", "%");
			}

			if (!keyWord.startsWith("%") && !keyWord.endsWith("%")) {
				keyWord = "%" + keyWord + "%";
			}

			for (int i = 0; i < attrs.length; i++) {
				if (i == attrs.length - 1) {
					trem += attrs[i] + " like ? ";
				} else {
					trem += attrs[i] + " like ? or ";
				}
				params.add(keyWord);
			}
			String CQL = "select * from Views where (isOpen = ? or isOpen = ? and userName = ?) and ";
			CQL += trem;
			views = vInfoStorage.getViewsBySql(CQL, params, null);
		}
		return views;
	}

	public String createSvg(String Hexname, String svg) throws IOException {
		String url = SysProperties.get("svg.url");
		String path;
		if (url.equals("resource")) {
			url = "/" + ProjectInfo.getProjectRealPathConvert();
			svg = this.regex(url, svg);
			path = "resource/thumbnail";
			url += path;
			path = "/" + path;
		} else {
			svg = this.regex(url, svg);
			path = "/thumbnail";
			url += path;
		}
		File file = new File(url);
		if (!file.exists() && !file.isDirectory()) {
			file.mkdir();
		}
		// String Hexname = HexString.encode(HexString.json2Str(nc.getName(),
		// name));
		url += "/" + Hexname + ".png";
		path = "/" + path + "/" + Hexname + ".png";
		if (path.indexOf("//") == 0) {
			path = path.substring(1);
		}
		InputStream ins = new ByteArrayInputStream(svg.getBytes("utf-8"));
		url = url.replace("resourceresource", "resource");
		if (path.indexOf("resource") == -1) {
			path = path.replace("thumbnail", "resource/thumbnail");
		}
		File destFile = new File(url);
		destFile.createNewFile();
		try {
			SvgUtil.convertSvgFile2Png(ins, destFile, 400, 300);
		} catch (Exception e) {
		}
		return path;
	}

	// /---------------------------------------------------------------------------------//
	// /---------------------------------------------------------------------------------//
	// /--------------------------------背景图片管理----------------------------------------//
	// /---------------------------------------------------------------------------------//

	@Override
	public ViewIcon saveBackground(ViewIcon icon) throws IOException {
		File ownIconPath = getBackgroundPath(icon.getUsername());
		File file = new File(ownIconPath, icon.getName());
		FileManager.getInstance().copyFile(file, (byte[]) icon.getContent());
		return backgroundStorage.save(icon);
	}

	@Override
	public File getBackgroundPath(String userName) {
		String realPath = Tool.getRealPath();
		realPath = realPath + "resource/background/" + userName + "/";
		File file = new File(realPath);
		if (!file.exists())
			file.mkdirs();
		return file;
	}

	@Override
	public void deleteBackgroundByName(String name, String userName)
			throws Exception {
		File ownIconPath = getBackgroundPath(userName);
		File file = new File(ownIconPath, name);
		file.delete();
		backgroundStorage.delete(name, userName);
	}

	@Override
	public ViewIcon getBackgroundByName(String filename, String loginName)
			throws Exception {
		return backgroundStorage.getByName(filename, loginName);
	}

	@Override
	public Page<Map<String, Object>> fuzzyQueryBackground(String name,
			int page, int pageSize, String userName) throws Exception {
		name = name.trim().toLowerCase();
		File ownFile = getBackgroundPath(userName);

		File[] list = ownFile.listFiles();
		if (list.length == 0
				|| list.length < backgroundStorage.getCount(userName)) {
			refreshBackground(userName);
			list = ownFile.listFiles();
		}

		List<Map<String, Object>> svgs = new ArrayList<Map<String, Object>>(
				list.length);
		for (File file : list) {
			String fileName = file.getName();
			String lowerName = fileName.toLowerCase();

			if (lowerName.indexOf(name.toLowerCase()) != -1 || "".equals(name)) {
				Map<String, Object> data = new HashMap<String, Object>();
				data.put("url", "/resource/background/" + userName + "/"
						+ fileName);
				int[] widthAndHeight = backgroundStorage.getWidthAndHeight(
						fileName, userName);
				data.put("width", widthAndHeight[0]);
				data.put("heigth", widthAndHeight[1]);
				svgs.add(data);
			}
		}
		Collections.sort(svgs, new Comparator<Map<String, Object>>() {
			public int compare(Map<String, Object> o1, Map<String, Object> o2) {
				String name1 = (String) o1.get("url");
				String name2 = (String) o2.get("url");
				return name1.compareTo(name2);
			};
		});
		int count = svgs.size();
		int start = (page - 1) * pageSize;
		start = start < 0 ? 0 : start;
		int end = page * pageSize;
		start = start > count ? count : start;
		end = end > count ? count : end;
		svgs = svgs.subList(start, end);

		Page<Map<String, Object>> ret = new Page<Map<String, Object>>();

		ret.setCount(svgs.size());
		ret.setDatas(svgs);
		ret.setPageSize(pageSize);
		ret.setStart(page);
		ret.setTotalCount(count);
		return ret;
	}

	@Override
	public List<String> getViewIdsByCate(String id) throws Exception {
		return vInfoStorage.getViewIdsByCategoryId(id);
	}
	
	@Override
	public void refreshBackground(String userName) {
		try {
			List<ViewIcon> byUser = backgroundStorage.getByUser(userName);
			File backgroundPath = getBackgroundPath(userName);
			FileManager.getInstance().deleteAll(backgroundPath);
			backgroundPath.mkdirs();
			for (ViewIcon viewIcon : byUser) {
				File file = new File(backgroundPath, viewIcon.getName());
				FileManager.getInstance().copyFile(file,
						(byte[]) viewIcon.getContent());
			}
		} catch (Exception e) {
		}
	}

	/**
	 * 正则去替换svg的路径
	 * 
	 * @param str
	 * @return
	 */
	private String regex(String url, String str) throws IOException {
		String gifUrl = url;
		url = "file:///" + url;
		Pattern pattern = Pattern.compile("xlink:href=\"(.*?)\"");
		Matcher matcher = pattern.matcher(str);
		StringBuffer sb = new StringBuffer();
		while (matcher.find()) {
			String st = matcher.group(1);
			if (st.indexOf("resource") != -1) {
				if (st.indexOf("resource/svg/") != -1) {
					st = st.substring(st.indexOf("resource/svg/"));
				} else if (st.indexOf("resource/ownsvg/") != -1) {
					st = st.substring(st.indexOf("resource/ownsvg/"));
				} else if (st.indexOf("resource/background/") != -1) {
					st = st.substring(st.indexOf("resource/background/"));
				}
			} else if (st.indexOf("mxGraph") != -1) {
				st = st.substring(st.indexOf("graph/plugins/"));
			} else if (st.indexOf("graph/images") != -1) {
				st = st.substring(st.indexOf("graph/"));
			}
			String fileurl;
			if (st.substring(st.length() - 3).toLowerCase().equals("gif")) {
				String filePath = ProjectInfo.getProjectRealPathConvert()
						+ "resource/thumbnail/" + System.currentTimeMillis()
						+ ".png";
				ImageIO.write(ImageIO.read(new File(gifUrl + st)), "png",
						new File(filePath));
				fileurl = "file:////" + filePath;
			} else {
				fileurl = url + st;
			}
			fileurl = fileurl.replace("resourceresource", "resource");
			matcher.appendReplacement(sb, "xlink:href=\"" + fileurl + "\"");
		}
		matcher.appendTail(sb);
		return sb.toString();
	}

	// @Override
	// public ViewInformation getByProperty(String key, Object value,
	// UserInformation user, List<ViewCategory> all) throws Exception {
	// List<ViewInformation> infos = vInfoStorage.getByProperty(key, value,
	// user, all);
	// return infos.size() > 0 ? infos.get(0) : null;
	// }

	// @Override
	// public List<ViewInformation> getByPropertys(String key, Object value,
	// UserInformation user, List<ViewCategory> all) throws Exception {
	// List<ViewInformation> infos = vInfoStorage.getByProperty(key, value,
	// user, all);
	// return infos.size() > 0 ? infos : new ArrayList<ViewInformation>();
	// }
	//
	// @Override
	// public ViewInformation getById(String cateId, String viewId,
	// UserInformation user, List<ViewCategory> all) throws Exception {
	// return vInfoStorage.getInfoInCate(cateId, viewId, user, all);
	// }
	//
	// @Override
	// public ViewInformation getById(String jsonId, UserInformation user,
	// List<ViewCategory> all) {
	// ViewInformation view = null;
	// try {
	// view = vInfoStorage.getOne(jsonId, user, all);
	// } catch (Exception e) {
	// System.out.println(e.getMessage());
	// }
	// return view;
	// }

	// @Override
	// public ViewInformation getById(String jsonId,UserInformation user) throws
	// Exception {
	// JSONArray jsonObject = JSONArray.fromObject(jsonId);
	// if (jsonObject.size() == 2) {
	// String cid = jsonObject.getString(0),
	// id = jsonObject.getString(1);
	//
	// return vInfoStorage.getInfoInCate(cid, id,user);
	// } else {
	// throw new Exception("参数[" + jsonId + "]不是JSON");
	// }
	// if(jsonId != null && !"".equals(jsonId)){
	// return vInfoStorage.getOne(Long.parseLong(jsonId));
	// }else {
	// throw new Exception("参数[" + jsonId + "]不能为空");
	// }
	// }

	// @Override
	// public void delete(ViewInformation info) throws Exception {
	// vInfoStorage.delete(info);

	// Node node = vInfoStorage.getOne(info);
	// Iterable<Relationship> rs = node.getRelationships();
	// for (Relationship r : rs) {
	// String rtype = r.getType().name();
	// if (RelationshipTypes.CI2VIEW.equals(rtype) ||
	// RelationshipTypes.VIEW2CI.equals(rtype)) {
	// CiViewRelation cvRelation = ciViewRelStorage.getOne(r.getId());
	// ciViewRelStorage.delete(cvRelation);
	// }
	// }
	// vInfoStorage.delete(info);
	// }

	// @Override
	// //
	// public void delete(List<ViewInformation> infos) throws Exception {
	// vInfoStorage.delete(infos);
	// }
	//
	// @Override
	// public void deleteByViewCategory(List<ViewCategory> vCates)
	// throws Exception {
	// // vInfoStorage.de
	// }

	// @Override
	// public ViewInformation update(ViewInformation information, String xml,
	// String svg, String open, UserInformation user) throws Exception {
	// ViewInformation info = information;
	// info.setXml(xml);
	// info.setSvg(svg);
	// info.setOpen(open);
	// info.setVersion(info.getVersion() + 1);
	// info.setUpdateTime(System.currentTimeMillis());
	// return vInfoStorage.update(info, user);
	// }

	// @Override
	// public ViewInformation update(ViewInformation information,
	// UserInformation user) throws Exception {
	// return vInfoStorage.update(information, user);
	// }
	//
	// @Override
	// public List<ViewInformation> getAll(UserInformation user,
	// List<ViewCategory> all) throws Exception {
	// return vInfoStorage.getAll(user, all);
	// }

	// @Override
	// public List<ViewInformation> qureyFuzzy(String keyWord,
	// UserInformation user, List<ViewCategory> all) throws Exception {
	// List<ViewInformation> views = new ArrayList<ViewInformation>();
	// BooleanQuery bq = QueryUtil.booleanQuery();
	// if (keyWord == null || keyWord.equals("") || keyWord.equals("*")) {
	// views = vInfoStorage.getAll(user, all);
	// } else {
	// String[] attrs = { "id", "categoryId", "userName" };
	// String trem = "";
	// List<String> params = new ArrayList<String>();
	// // keyWord = Neo4jStringUtils.cypherESC(keyWord);
	// if (keyWord.startsWith("*") && keyWord.endsWith("*")) {
	// keyWord = keyWord.replace("*", "%");
	// }
	// for (int i = 0; i < attrs.length; i++) {
	// // bq.add(QueryUtil.wildcardQuery(attr, keyWord.toLowerCase()),
	// // Occur.SHOULD.value());
	// if (i == attrs.length - 1) {
	// trem += attrs[i] + " like ? ";
	// } else {
	// trem += attrs[i] + " like ? or ";
	// }
	// params.add(keyWord);
	// }
	// String CQL = "select * from Views where " + trem;
	// // System.out.println(CQL);
	// // ViewInfoStorage vg = new ViewInfoStorage();
	// views = vInfoStorage.getViewsBySql(CQL, params, user, all);
	// // views = vInfoStorage.query(CQL);
	// // views = vInfoStorage.query(bq);
	// }
	// return views;
	// }

	// @Override
	// public List<ViewInformation> qureyByAdvanced(ViewCategory category,
	// Map<String, String> mustExp, Map<String, String> orExp,
	// boolean extend, List<ViewCategory> all) throws Exception {
	// List<String> params = new ArrayList<String>();
	// // 用于判断是否出现继承和是否有categroyid这个条件
	// List<String> cgIds = new ArrayList<String>();
	// if (category != null) {
	// cgIds.add(category.getId());
	// if (extend) {// ciCate是否继承
	// List<ViewCategory> children = category.getAllChildren();
	// for (ViewCategory child : children) {
	// cgIds.add(child.getId());
	// }
	// }
	// }
	//
	// StringBuffer categoryIdMatch = new StringBuffer("");
	// if (cgIds.size() != 0) {
	// int i = 0;
	// for (String cgid : cgIds) {
	// if (i == cgIds.size() - 1) {
	// categoryIdMatch.append(" categoryId like ? ");
	// } else {
	// categoryIdMatch.append(" categoryId like ? or ");
	// }
	// params.add(cgid);
	// i++;
	// }
	// }
	//
	// StringBuffer mustMatch = new StringBuffer("");
	// if (mustExp != null && mustExp.size() > 0) {
	// int i = 0;
	// for (Entry<String, String> entry : mustExp.entrySet()) {
	// String key = entry.getKey().trim();
	// String value = entry.getValue().trim();
	// if (i == mustExp.size() - 1) {
	// mustMatch.append(" " + key + " = ? ");
	// } else {
	// mustMatch.append(" " + key + " = ? and ");
	// }
	// params.add(value);
	// i++;
	// }
	// }
	//
	// StringBuffer orMatch = new StringBuffer("");
	// if (orExp != null && orExp.size() > 0) {
	// int i = 0;
	// for (Entry<String, String> entry : orExp.entrySet()) {
	// String key = entry.getKey().trim();
	// String value = entry.getValue().trim();
	// if (i == orExp.size() - 1) {
	// orMatch.append(" " + key + " like ? ");
	// } else {
	// orMatch.append(" " + key + " like ? or ");
	// }
	// params.add(value.toLowerCase().replace("*", "%"));
	// i++;
	// }
	// }
	// String match = "select * from Views ";
	// if (mustMatch.length() > 0) {
	// match = match + "where " + categoryIdMatch.toString();
	// }
	// if (categoryIdMatch.length() > 0) {
	// if (match.endsWith("Views ")) {
	// match = match + "where " + categoryIdMatch;
	// } else {
	// match = match + " and (" + categoryIdMatch + ") ";
	// }
	// }
	// if (orMatch.length() > 0) {
	// if (match.endsWith("Views ")) {
	// match = match + "where " + orMatch;
	// } else if (match.endsWith(") ")) {
	// match = match + " or (" + orMatch + ") ";
	// } else {
	// match = match + " and (" + orMatch + ") ";
	// }
	// }
	// System.out.println(match);
	//
	// return vInfoStorage.getViewsBySql(match.toString(), params, all);
	// }
	//
	// @Override
	// public void save(List<ViewInformation> infos) throws Exception {
	// // TODO Auto-generated method stub
	//
	// }
	//
	// @Override
	// public void deleteAllOpenView() throws Exception {
	// // TODO Auto-generated method stub
	//
	// }
	//
	// @Override
	// public void deleteById(String id) throws Exception {
	// // TODO Auto-generated method stub
	//
	// }
	//
	// /*
	// * public List<ViewInformation> qureyByAdvanced(ViewCategory
	// * category,Map<String, String> mustExp, Map<String, String> orExp,
	// boolean
	// * extend,Map<String,ViewCategory> vcM,UserInformation user) throws
	// * Exception {
	// *
	// * boolean queryAll = true;// 当参数没有值的时候,就查询全部的. // StringBuffer match =
	// new
	// * StringBuffer("match (n:View) where "); StringBuffer match = new
	// * StringBuffer
	// * ("match (a:User {username:'"+user.getUsername()+"',categoryId:'"
	// * +user.getCategoryId
	// * ()+"'}) optional match (a)-[:User2View]->(m:View) with m " +
	// * "match (n:View) where (n.userName = '"
	// * +user.getUsername()+"' or n.id = m.id ) and  ("); //
	// * 用于判断是否出现继承和是否有categroyid这个条件 List<String> cgIds = new
	// * ArrayList<String>(); if (category != null) {
	// * cgIds.add(category.getId().toLowerCase()); if (extend) {// ciCate是否继承
	// * List<ViewCategory> children = category.getAllChildren(); for
	// * (ViewCategory child : children) {
	// cgIds.add(child.getId().toLowerCase());
	// * } } }
	// *
	// * if (cgIds.size() != 0) { queryAll = false;
	// * match.append("lower(n.categoryId) in ["); for (String cgid : cgIds) {
	// * match.append("'"); match.append(cgid); match.append("',"); }
	// * match.replace(match.length() - 1, match.length(), "]"); }
	// *
	// * if (mustExp != null && mustExp.size() > 0) { if (!queryAll) {//
	// * 出现了categoryid where n.xx =='xx' and match.append(" and"); } queryAll =
	// * false;
	// *
	// * for (Entry<String, String> entry : mustExp.entrySet()) { String key =
	// * entry.getKey().trim(); String value =
	// * Neo4jStringUtils.cypherESC(entry.getValue().trim());
	// * match.append(" n.`"); match.append(key); match.append("`='"); if
	// * ("*".equals(value)) { match.append("."); match.append(value); } else {
	// if
	// * (value.startsWith("*") && value.endsWith("*")) { value =
	// * value.substring(1, value.length() - 1); } match.append(".*");
	// * match.append(value); match.append(".*"); } match.append("' and"); }
	// *
	// * match.delete(match.length() - 3, match.length());// 去掉一个多余的and }
	// *
	// * if (orExp != null && orExp.size() > 0) { if (!queryAll) {//
	// 出现了categoryid
	// * where n.xx =='xx' and // match.append(" or ");
	// * match.append("with n where "); } queryAll = false; for (Entry<String,
	// * String> entry : orExp.entrySet()) { String key = entry.getKey().trim();
	// * String value = Neo4jStringUtils.cypherESC(entry.getValue() .trim());
	// * match.append(" lower(n.`"); match.append(key); match.append("`)=~'");
	// if
	// * ("*".equals(value)) { match.append("."); match.append(value); } else {
	// if
	// * (value.startsWith("*") && value.endsWith("*")) { value =
	// * value.substring(1, value.length() - 1); } match.append(".*");
	// * match.append(value.toLowerCase()); match.append(".*"); }
	// * match.append("' or"); } match.delete(match.length() - 2,
	// * match.length());// 去掉一个多余的or }
	// *
	// * if (queryAll) { match.delete(match.length() - 6, match.length());//
	// * 将多出的where 删除掉 } match.append(") return n"); return
	// * vInfoStorage.query(match.toString(),vcM); }
	// */
}