package com.mmdb.buz.db.impl;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import jdbc.JdbcConnection;

import org.directwebremoting.annotations.RemoteMethod;
import org.directwebremoting.annotations.RemoteProxy;
import org.directwebremoting.io.FileTransfer;
import org.springframework.beans.factory.annotation.Autowired;

import com.mmdb.buz.db.IHandleDataBase;
import com.mmdb.buz.db.JdbcOtherTools;
import com.mmdb.core.log.Log;
import com.mmdb.core.log.LogFactory;
import com.mmdb.core.utils.JsonUtil;
import com.mmdb.core.utils.Return;
import com.mmdb.core.utils.TimeUtil;
import com.mmdb.model.database.bean.DataBaseConfig;
import com.mmdb.model.database.bean.DataBaseSelf;
import com.mmdb.model.database.bean.DataSourcePool;
import com.mmdb.model.database.bean.Field;
import com.mmdb.service.db.IDataBaseConfigService;
import com.mmdb.service.db.IDataSourceService;
import com.mmdb.service.mapping.ISourceCategoryMapService;
import com.mmdb.service.mapping.ISourceRelationMapService;
import com.mmdb.util.MappingXMLUtil;

@RemoteProxy(name = "dataBaseBuz")
public class HandleDataBaseImpl implements IHandleDataBase {
	private Log log = LogFactory.getLogger("HandleDataBaseImpl");
	@Autowired
	private IDataSourceService dbSourceService;
	@Autowired
	private IDataBaseConfigService dbConfigService;
	@Autowired
	private ISourceCategoryMapService scMapService;
	@Autowired
	private ISourceRelationMapService srMapService;

	@Override
	@RemoteMethod
	public Return testing(Map<String, String> dbMap) {
		Return ret = new Return();
		Connection connection = null;
		try {
			log.dLog("testing");
			if (dbMap == null || dbMap.size() == 0) {
				throw new Exception("数据库配置参数不能空");
			}
			boolean isRac = false;
			String rac = dbMap.get("isRac");
			if (rac != null && rac.equals("true")) {
				isRac = true;
			}
			// {type:'mysql/sqlserver/oracle/oraclerac/db2',url:'',url:'',port:'',database:'',username:'',password:''}
			new DataBaseConfig(isRac, dbMap);
			connection = JdbcOtherTools.getConnection(isRac, dbMap);
			if (connection == null) {
				throw new Exception("数据库连接失败");
			}
			ret.setData(dbMap).setMessage("连接成功");
			log.dLog("testing success");
		} catch (Exception e) {
			log.eLog(e);
			ret.setSuccess(false).setMessage(e.getMessage());
		} finally {
			JdbcOtherTools.closeConnection(connection);
		}
		return ret;
	}

	@Override
	@RemoteMethod
	public Return saveDataBaseConfig(Map<String, String> dbMap) {
		Return ret = new Return();
		Connection connection = null;
		try {
			log.dLog("saveDataBaseConfig");
			if (dbMap == null || dbMap.size() == 0) {
				throw new Exception("DataSource参数不能空");
			}
			String id = dbMap.get("id");
			if (id == null || id.equals("")) {
				throw new Exception("ID不能空");
			}
			// 增加id处理防止重复
			String type = dbMap.get("type");
			if (type != null) {
				id = type + "_" + id;
			}
			DataBaseConfig dc = dbConfigService.getById(id);
			if (dc != null) {
				throw new Exception("DataSource[" + id + "]已存在");
			}
			boolean isRac = false;
			String rac = dbMap.get("isRac");
			if (rac != null && rac.equals("true")) {
				isRac = true;
			}
			dc = new DataBaseConfig(isRac, dbMap);
			dc.setId(id);
			connection = JdbcOtherTools.getConnection(isRac, dbMap);
			if (connection == null) {
				throw new Exception("数据库连接失败");
			}
			dc = dbConfigService.save(dc);
			ret.setData(dc.asMap()).setMessage("保存成功");
			log.dLog("saveDataBaseConfig success");
		} catch (Exception e) {
			log.eLog(e);
			ret.setSuccess(false).setMessage(e.getMessage());
		} finally {
			JdbcOtherTools.closeConnection(connection);
		}
		return ret;
	}

	@Override
	@RemoteMethod
	public Return updateDataBaseConfig(String id, Map<String, String> dbMap) {
		Return ret = new Return();
		Connection connection = null;
		try {
			log.dLog("updateDataBaseConfig");
			if (dbMap == null || dbMap.size() == 0) {
				throw new Exception("DataSource参数不能空");
			}
			DataBaseConfig dc = dbConfigService.getById(id);
			if (dc == null) {
				throw new Exception("DataSource[" + id + "]不存在");
			}
			boolean isRac = false;
			String rac = dbMap.get("isRac");
			if (rac != null && rac.equals("true")) {
				isRac = true;
			}
			new DataBaseConfig(isRac, dbMap);
			connection = JdbcOtherTools.getConnection(isRac, dbMap);
			if (connection == null) {
				throw new Exception("数据库连接失败");
			}
//			dc = dc.unLazy();
			dc.setType(dbMap.get("type"));
			dc.setRac(isRac);
			if (isRac) {
				dc.setRacAddress(dbMap.get("url"));
			} else {
				dc.setDatabaseName(dbMap.get("database"));
				dc.setPort(Integer.valueOf(dbMap.get("port")));
				dc.setHostName(dbMap.get("url"));
			}
			dc.setUsername(dbMap.get("username"));
			dc.setPassword(dbMap.get("password"));
			dc = dbConfigService.update(dc);
			ret.setData(dc.asMap()).setMessage("更新成功");
			log.dLog("updateDataBaseConfig success");
		} catch (Exception e) {
			log.eLog(e);
			ret.setSuccess(false).setMessage(e.getMessage());
		} finally {
			JdbcOtherTools.closeConnection(connection);
		}
		return ret;
	}

	@Override
	@RemoteMethod
	public Return getDataBaseConfigById(String id) {
		Return ret = new Return();
		try {
			log.dLog("getDataBaseConfigById");
			if (id == null || id.equals("")) {
				List<Map<String, String>> list = new ArrayList<Map<String, String>>();
				List<DataBaseConfig> dcs = dbConfigService.getAll();
				for (DataBaseConfig dc : dcs) {
					list.add(dc.asMap());
				}
				ret.setData(list).setMessage("查询成功");
			} else {
				DataBaseConfig dc = dbConfigService.getById(id);
				if (dc == null) {
					throw new Exception("DataSource[" + id + "]不存在");
				}
				ret.setData(dc.asMap()).setMessage("查询成功");
			}
			log.dLog("getDataBaseConfigById success");
		} catch (Exception e) {
			log.eLog(e);
			ret.setSuccess(false).setMessage(e.getMessage());
		}
		return ret;
	}

	@Override
	@RemoteMethod
	public Return getDataBaseConfigTree() {
		Return ret = new Return();
		try {
			log.dLog("getDataBaseConfigTree");
			List<Map<String, Object>> tree = new ArrayList<Map<String, Object>>();
			List<DataBaseConfig> dcs = dbConfigService.getAll();
			for (DataBaseConfig dc : dcs) {
				Map<String, Object> map = new HashMap<String, Object>();
				Map<String, Object> map2 = new HashMap<String, Object>();
				String type = dc.getType();
				map.put("id", type);
//				map.put("name", type);
				map.put("open", true);
//				map.put("pId", 0);
				map.put("text", type);
				map.put("parent", "#");
				if (!tree.contains(map)) {
					tree.add(map);
				}
				map2.put("parent", type);
				String id = dc.getId();
				map2.put("id", id);
				if (id.startsWith(type + "_")) {
					id = id.substring(type.length() + 1);
				}
//				map2.put("name", dc.getId());
				map2.put("text", id);

//				map2.put("pId", type);
				map2.put("id", dc.getId());
				map2.put("type", "leaf");

				tree.add(map2);
			}
			ret.setData(tree).setMessage("获取DataSource树成功");
			log.dLog("getDataBaseConfigTree success");
		} catch (Exception e) {
			log.eLog(e);
			ret.setSuccess(false).setMessage(e.getMessage());
		}
		return ret;
	}

	@Override
	@RemoteMethod
	public Return deleteDataBaseConfigById(String id) {
		Return ret = new Return();
		try {
			log.dLog("deleteDataBaseConfigById");
			if (id == null || id.equals("")) {
				throw new Exception("参数不能空");
			}
			DataBaseConfig dc = dbConfigService.getById(id);
			if (dc == null) {
				throw new Exception("DataSource[" + id + "]不存在");
			}
			if (dbSourceService.getDataConfigIds().contains(dc.getId())) {
				throw new Exception("该DataSource已被配置成DataSet，请先删除DataSet");
			}
			dbConfigService.delete(dc);
			ret.setMessage("删除成功");
			log.dLog("deleteDataBaseConfigById success");
		} catch (Exception e) {
			log.eLog(e);
			ret.setSuccess(false).setMessage(e.getMessage());
		}
		return ret;
	}

	@Override
	@RemoteMethod
	public Return getSchemaNames(String dcId) {
		Return ret = new Return();
		Connection connection = null;
		try {
			log.dLog("getSchemaNames");
			if (dcId == null || dcId.equals("")) {
				throw new Exception("参数不能空");
			}
			DataBaseConfig dc = dbConfigService.getById(dcId);
			if (dc == null) {
				throw new Exception("DataSource[" + dcId + "]不存在");
			}
			connection = JdbcOtherTools.getConnection(dc.getRac(), dc.asMap());
			if (connection == null) {
				throw new Exception("数据库连接失败");
			}
			List<String> schemas = JdbcConnection.getDatabases(connection);
			ret.setData(schemas).setMessage("获取schema成功");
			log.dLog("getSchemaNames success");
		} catch (Exception e) {
			log.eLog(e);
			ret.setSuccess(false).setMessage(e.getMessage());
		} finally {
			JdbcOtherTools.closeConnection(connection);
		}
		return ret;
	}

	@Override
	@RemoteMethod
	public Return getTableNameBySchema(String dcId, String schemaName) {
		Return ret = new Return();
		Connection connection = null;
		try {
			log.dLog("getTableNameBySchema");
			if (dcId == null || dcId.equals("")) {
				throw new Exception("参数不能空");
			}
			if (schemaName == null || schemaName.equals("")) {
				throw new Exception("Schema不能为空");
			}
			DataBaseConfig dc = dbConfigService.getById(dcId);
			if (dc == null) {
				throw new Exception("DataSource[" + dcId + "]不存在");
			}
			connection = JdbcOtherTools.getConnection(dc.getRac(), dc.asMap());
			if (connection == null) {
				throw new Exception("数据库连接失败");
			}
			Map<String, List<String>> tables = JdbcConnection.getTables(
					connection, schemaName);
			if (tables == null) {
				throw new Exception("获取数据库表失败");
			}
			ret.setMessage("获取表名成功").setData(tables);
			log.dLog("getTableNameBySchema success");
		} catch (Exception e) {
			log.eLog(e);
			ret.setSuccess(false).setMessage(e.getMessage());
		} finally {
			JdbcOtherTools.closeConnection(connection);
		}
		return ret;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.mmdb.buz.db.IHandleDataBase#getFieldNameByTable(java.lang.String,
	 * java.util.Map)
	 */
	@Override
	@RemoteMethod
	public Return getFieldNameByTable(String dcId, Map<String, String> selfMap) {
		Return ret = new Return();
		Connection connection = null;
		try {
			log.dLog("getFieldNameByTable");
			if (dcId == null || dcId.equals("")) {
				throw new Exception("参数不能为空");
			}
			DataBaseConfig dc = dbConfigService.getById(dcId);
			if (dc == null) {
				throw new Exception("DataSource[" + dcId + "]不存在");
			}
			// List<Map<String, String>> retCols = new ArrayList<Map<String,
			// String>>();
			Map<String, Map<String, String>> columns;
			connection = JdbcOtherTools.getConnection(dc.getRac(), dc.asMap());
			if (connection == null) {
				throw new Exception("数据库连接失败");
			}
			String isSelf = selfMap.get("isSelf"), schema = selfMap
					.get("schema"), table = selfMap.get("table"), customSql = selfMap
					.get("customSql");

			if (table == null || table.equals("")) {
				if (customSql == null || customSql.equals("")) {
					throw new Exception("table和自定义SQL不能同时为空");
				}
			} else if (schema == null || "".equals(schema)) {
				throw new Exception("schema不能为空");
			}
			if (Boolean.valueOf(isSelf)) {
				columns = JdbcConnection.getColumns(connection, schema, "",
						customSql);
			} else {
				columns = JdbcConnection.getColumns(connection, schema, table,
						"");
			}
			if (columns == null) {
				throw new Exception("获取DataSource字段失败");
			}
			ret.setMessage("获取字段名成功").setData(columns);
			log.dLog("getFieldNameByTable success");
		} catch (Exception e) {
			log.eLog(e);
			ret.setSuccess(false).setMessage(e.getMessage());
		} finally {
			JdbcOtherTools.closeConnection(connection);
		}
		return ret;
	}

	@Override
	@RemoteMethod
	public Return getFieldNameByDataSet(String dpId) {
		Return ret = new Return();
//		Connection connection = null;
//		try {
//			log.dLog("getFieldNameByDataSet");
//			if (dpId == null || dpId.equals("")) {
//				throw new Exception("参数不能为空");
//			}
//			DataSourcePool dp = dbSourceService.getById(dpId);
//			if (dp == null) {
//				throw new Exception("DataSet[" + dpId + "]不存在");
//			}
//			Map<String, Map<String, String>> columns;
//			connection = JdbcOtherTools.getConnection(dp.getDc().getRac(), dp
//					.getDc().asMap());
//			if (connection == null) {
//				throw new Exception("数据库连接失败");
//			}
//			DataBaseSelf ds = dp.getDs();
//			if (ds.isSelf()) {
//				columns = JdbcConnection.getColumns(connection, ds.getSchema(),
//						"", ds.getCustomSql());
//			} else {
//				columns = JdbcConnection.getColumns(connection, ds.getSchema(),
//						ds.getTable(), "");
//			}
//			if (columns == null) {
//				throw new Exception("获取DataSource字段失败");
//			}
//			Map<String, Map<String, Object>> fieldsMap = dp.getDs()
//					.coventFields();
//
//			Iterator<Map.Entry<String, Map<String, String>>> iterator = columns
//					.entrySet().iterator();
//			while (iterator.hasNext()) {
//				Map.Entry<String, Map<String, String>> entry = iterator.next();
//				String key = entry.getKey();
//				Map<String, String> map = entry.getValue();
//				if (fieldsMap.containsKey(key)) {
//					if (fieldsMap.get("hide").equals("true")) {
//						iterator.remove();
//					} else {
//						map.put(entry.getValue().get("customName"),
//								map.get(key));
//						map.remove(key);
//					}
//				}
//			}
//			ret.setMessage("获取字段名成功").setData(columns);
//			log.dLog("getFieldNameByDataSet success");
//		} catch (Exception e) {
//			log.eLog(e);
//			ret.setSuccess(false).setMessage(e.getMessage());
//		} finally {
//			JdbcOtherTools.closeConnection(connection);
//		}
		return ret;
	}

	@Override
	@RemoteMethod
	public Return getMetaDataByTable(String dcId, Map<String, String> selfMap,
			String fieldsMapJson, int page, int pageSize) {
		Return ret = new Return();
		Connection connection = null;
		try {
			log.dLog("getMetaDataByTable");
			if (dcId == null || dcId.equals("")) {
				throw new Exception("参数不能为空");
			}
			List<Map<String, Object>> data;
			DataBaseConfig dc = dbConfigService.getById(dcId);
			if (dc == null) {
				throw new Exception("DataSource[" + dcId + "]不存在");
			}
			connection = JdbcOtherTools.getConnection(dc.getRac(), dc.asMap());
			if (connection == null) {
				throw new Exception("数据库连接失败");
			}
			String isSelf = selfMap.get("isSelf"), schema = selfMap
					.get("schema"), table = selfMap.get("table"), customSql = selfMap
					.get("customSql");
			if (schema == null || "".equals(schema)) {
				throw new Exception("schema不能为空");
			} else {
				if (table == null || table.equals("")) {
					if (customSql == null || customSql.equals("")) {
						throw new Exception("table和自定义SQL不能同时为空");
					}
				}
			}
			if (fieldsMapJson == null || fieldsMapJson.equals("")) {
				throw new Exception("字段映射不能为空");
			}
			Map<String, Map<String, String>> fm = JsonUtil.decodeByJackSon(
					fieldsMapJson, Map.class);
			Map<String, String> f = new HashMap<String, String>();
			Iterator<Map.Entry<String, Map<String, String>>> iterator = fm
					.entrySet().iterator();
			while (iterator.hasNext()) {
				Map.Entry<String, Map<String, String>> entry = iterator.next();
				f.put(entry.getKey(), entry.getValue().get("customName"));
			}
			DataBaseSelf ds = new DataBaseSelf(Boolean.valueOf(isSelf),
					selfMap, null);
			if (Boolean.valueOf(isSelf)) {
				data = JdbcConnection.getDataByTable(connection, schema, "",
						customSql, (page - 1) * pageSize + 1, page * pageSize);
			} else {
				data = JdbcConnection.getDataByTable(connection, schema, table,
						"", (page - 1) * pageSize + 1, page * pageSize);
			}
			if (data == null) {
				throw new Exception("获取数据库表数据失败");
			}
			// if (f.size() > 0) {
			// for (Map<String, Object> m : data) {
			// Iterator<Map.Entry<String, String>> it = f.entrySet().iterator();
			// while (iterator.hasNext()) {
			// Map.Entry<String, String> entry = it.next();
			// m.put(entry.getValue(), m.get(entry.getKey()));
			// }
			// }
			// }
			// RouteDataSource rds = new RouteDataSource(dc);
			// rds.getMetaDatasByPage(ds,2,2);
			// data = rds.getMetaDatasByPage(ds, (page - 1) * pageSize + 1, page
			// * pageSize);
			int count = JdbcConnection.getCountSize(connection, schema, table,
					customSql);
			// int count = rds.getCount(ds);
			Map<String, Object> retMap = new HashMap<String, Object>();
			retMap.put("count", count);
			retMap.put("page", page);
			retMap.put("pageSize", pageSize);
			retMap.put("datas", data);
			ret.setMessage("获取表数据成功").setData(retMap);
			log.dLog("getMetaDataByTable success");
		} catch (Exception e) {
			log.eLog(e);
			ret.setSuccess(false).setMessage(e.getMessage());
		} finally {
			JdbcOtherTools.closeConnection(connection);
		}
		return ret;
	}

	@Override
	@RemoteMethod
	public Return saveDataBasePool(String id, String dcId,
			Map<String, String> selfMap, String fieldsMapJson) {
		Return ret = new Return();
//		Connection connection = null;
//		try {
//			log.dLog("saveDataBasePool");
//			if (id == null || id.equals("")) {
//				throw new Exception("参数不能空");
//			}
//			if (dcId == null || dcId.equals("")) {
//				throw new Exception("DataSource不能空");
//			}
//			DataBaseConfig dc = dbConfigService.getById(dcId);
//			if (dc == null) {
//				throw new Exception("DataSet[" + dcId + "]不存在");
//			}
//			if (selfMap == null || selfMap.size() == 0) {
//				throw new Exception("DataSet配置不能空");
//			}
//			if (fieldsMapJson == null || fieldsMapJson.equals("")) {
//				throw new Exception("DataSet字段映射不能空");
//			}
//			Map<String, Map<String, String>> fm = JsonUtil.decodeByJackSon(
//					fieldsMapJson, Map.class);
//			List<Field> fields = new ArrayList<Field>();
//			Iterator<Map.Entry<String, Map<String, String>>> iterator = fm
//					.entrySet().iterator();
//			while (iterator.hasNext()) {
//				Map.Entry<String, Map<String, String>> entry = iterator.next();
//				Field field = new Field(entry.getKey(), entry.getValue().get(
//						"customName"), Boolean.valueOf(entry.getValue().get(
//						"hide")));
//				fields.add(field);
//			}
//			DataBaseSelf ds = new DataBaseSelf(Boolean.valueOf(selfMap
//					.get("isSelf")), selfMap, fields);
//			if (dbSourceService.getById(id) != null) {
//				throw new Exception("DataSet[" + id + "]已存在");
//			}
//			connection = JdbcOtherTools.getConnection(dc.getRac(), dc.asMap());
//			if (connection == null) {
//				throw new Exception("数据库连接失败");
//			}
//			DataSourcePool dp = new DataSourcePool(id, dc, ds);
//			dp = dbSourceService.save(dp);
//			ret.setData(dp.asMap()).setMessage("保存成功");
//			log.dLog("saveDataBasePool success");
//		} catch (Exception e) {
//			log.eLog(e);
//			ret.setSuccess(false).setMessage(e.getMessage());
//		} finally {
//			JdbcOtherTools.closeConnection(connection);
//		}
		return ret;
	}

	@Override
	@RemoteMethod
	public Return updateDataBasePool(String id, Map<String, String> selfMap,
			String fieldsMapJson) {
		Return ret = new Return();
//		try {
//			log.dLog("updateDataBasePool");
//			if (id == null || id.equals("")) {
//				throw new Exception("参数不能空");
//			}
//			DataSourcePool dp = dbSourceService.getById(id);
//			if (dp == null) {
//				throw new Exception("DataSet[" + id + "]不存在");
//			}
////			dp = dp.unLazy();
//			if (selfMap == null || selfMap.size() == 0) {
//				throw new Exception("DataSet配置不能空");
//			}
//			if (fieldsMapJson == null || fieldsMapJson.equals("")) {
//				throw new Exception("DataSet字段映射不能空");
//			}
//			String isSelf = selfMap.get("isSelf"), schema = selfMap
//					.get("schema"), table = selfMap.get("table"), customSql = selfMap
//					.get("customSql");
//			new DataBaseSelf(Boolean.valueOf(isSelf), selfMap, null);
//			Map<String, Map<String, String>> fm = JsonUtil.decodeByJackSon(
//					fieldsMapJson, Map.class);
//			List<Field> fields = new ArrayList<Field>();
//			Iterator<Map.Entry<String, Map<String, String>>> iterator = fm
//					.entrySet().iterator();
//			while (iterator.hasNext()) {
//				Map.Entry<String, Map<String, String>> entry = iterator.next();
//				Field field = new Field(entry.getKey(), entry.getValue().get(
//						"customName"), Boolean.valueOf(entry.getValue().get(
//						"hide")));
//				fields.add(field);
//			}
//			DataBaseSelf ds = dp.getDs();
//			ds.setSelf(Boolean.valueOf(isSelf));
//			if (Boolean.valueOf(isSelf)) {
//				ds.setCustomSql(customSql);
//			} else {
//				ds.setSchema(schema);
//				ds.setTable(table);
//			}
//			List<Field> fields_original = ds.getFields();
//			List<Field> fields_final = new ArrayList<Field>();
//			for (Field field_ : fields_original) { // 存储的Fields
//				boolean flag = true;
//				for (Field field : fields) { // 参数Fields
//					if (fields_final != null && !fields_final.contains(field)) {
//						fields_final.add(field);
//					}
//					if (field.getName().equals(field_.getName())) {
//						flag = false;
//					}
//				}
//				if (flag) {
//					fields_final.add(field_);
//				}
//			}
//			ds.setFields(fields_final);
//			dp.setDs(ds);
//			dp = dbSourceService.update(dp);
//			ret.setData(dp.asMap()).setMessage("更新成功");
//			log.dLog("updateDataBasePool success");
//		} catch (Exception e) {
//			log.eLog(e);
//			ret.setSuccess(false).setMessage(e.getMessage());
//		}
		return ret;
	}

	@Override
	@RemoteMethod
	public Return getDataBasePoolById(String id) {
		Return ret = new Return();
		try {
			log.dLog("getDataBasePoolById");
			if (id == null || id.equals("")) {
				List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
				List<DataSourcePool> dcs = dbSourceService.getAll();
				for (DataSourcePool dc : dcs) {
					list.add(dc.asMap());
				}
				ret.setData(list).setMessage("查询成功");
			} else {
				DataSourcePool dp = dbSourceService.getById(id);
				if (dp == null) {
					throw new Exception("DataSource[" + id + "]不存在");
				}
				ret.setData(dp.asMap()).setMessage("查询成功");
			}
			log.dLog("getDataBasePoolById success");
		} catch (Exception e) {
			log.eLog(e);
			ret.setSuccess(false).setMessage(e.getMessage());
		}
		return ret;
	}

	@Override
	@RemoteMethod
	public Return getDataBasePoolTree() {
		Return ret = new Return();
//		try {
//			log.dLog("getDataBasePoolTree");
//			List<Map<String, Object>> tree = new ArrayList<Map<String, Object>>();
//			List<DataSourcePool> dps = dbSourceService.getAll();
//			for (DataSourcePool dp : dps) {
//				Map<String, Object> map = new HashMap<String, Object>();
//				Map<String, Object> map2 = new HashMap<String, Object>();
//				String type = dp.getDc().getType();
//				map.put("id", type);
//				map.put("name", type);
//				map.put("open", true);
//				map.put("pId", 0);
//				if (!tree.contains(map)) {
//					tree.add(map);
//				}
//				map2.put("pId", type);
//				map2.put("id", dp.getId());
//				map2.put("name", dp.getId());
//				map2.put("type", "leaf");
//				tree.add(map2);
//			}
//			ret.setData(tree).setMessage("获取DataSet树成功");
//			log.dLog("getDataBasePoolTree success");
//		} catch (Exception e) {
//			log.eLog(e);
//			ret.setSuccess(false).setMessage(e.getMessage());
//		}
		return ret;
	}

	@Override
	@RemoteMethod
	public Return deleteDataBasePoolById(String id) {
		Return ret = new Return();
		try {
			log.dLog("deleteDataBasePoolById");
			if (id == null || id.equals("")) {
				throw new Exception("参数ID不能空");
			}
			DataSourcePool dp = dbSourceService.getById(id);
			if (dp == null) {
				throw new Exception("DataSet[" + id + "]不存在");
			}
			if (scMapService.getMappingBySourcePool(dp).size() > 0) {
				throw new Exception("DataSet[" + id + "]已在数据映射中使用");
			}
			if (srMapService.getMappingBySourcePool(dp).size() > 0) {
				throw new Exception("DataSet[" + id + "]已在关系映射中使用");
			}
			dbSourceService.delete(dp);
			ret.setMessage("删除成功");
			log.dLog("deleteDataBasePoolById success");
		} catch (Exception e) {
			log.eLog(e);
			ret.setSuccess(false).setMessage(e.getMessage());
		}
		return ret;
	}

	@Override
	@RemoteMethod
	public FileTransfer exportDataBaseConfig() throws Exception {
		log.dLog("exportDataBaseConfig");
		List<DataBaseConfig> dbConfigs = dbConfigService.getAll();
		Map<String, Map<String, String>> retMap = new HashMap<String, Map<String, String>>();
		for (DataBaseConfig nc : dbConfigs) {
			retMap.put(nc.getId(), nc.asMap());
		}
		String json = JsonUtil.encodeByJackSon(retMap);
		InputStream inputStream = new ByteArrayInputStream(json.getBytes());
		String filename = "数据库配置-"
				+ TimeUtil.getTime(TimeUtil.YMDHMS) + ".json";
		log.dLog("exportDataBaseConfig success");
		return new FileTransfer(new String(filename.getBytes("GBK"),
				"iso8859-1"), "application/json", inputStream);
	}

	@Override
	@RemoteMethod
	public FileTransfer exportDataBaseConfigXML() throws Exception {
		return MappingXMLUtil.exportDataBaseConfigToXML(dbConfigService);
	}

	/**
	 * inputStream2String
	 * 
	 * @param is
	 * @return
	 * @throws java.io.IOException
	 */
	private String inputStream2String(InputStream is) throws IOException {
		BufferedReader in = new BufferedReader(new InputStreamReader(is));
		StringBuffer buffer = new StringBuffer();
		String line = "";
		while ((line = in.readLine()) != null) {
			buffer.append(line);
		}
		return buffer.toString();
	}

	@Override
	@RemoteMethod
	public Return importDataBaseConfig(FileTransfer ftf) throws Exception {
		Return ret = new Return();
		try {
			log.dLog("importDataBaseConfig");
			if (ftf.getFilename() == null
					|| ftf.getFilename().equals("")
					|| ftf.getFilename().toLowerCase().trim().indexOf(".json") == -1) {
				throw new Exception("文件格式有误");
			}
			Map<String, Map<String, String>> xMap = JsonUtil.decodeByJackSon(
					inputStream2String(ftf.getInputStream()), Map.class);
			Iterator<Entry<String, Map<String, String>>> iter = xMap.entrySet()
					.iterator();
			while (iter.hasNext()) {
				Entry<String, Map<String, String>> entry = iter.next();
				String key = entry.getKey();
				Map<String, String> val = entry.getValue();
				boolean rac = Boolean.valueOf(val.get("isRac").toString());
				DataBaseConfig dc = dbConfigService.getById(key);
				if (dc == null) {
					dc = new DataBaseConfig(rac, val);
					dc.setId(key);
					dbConfigService.save(dc);
				} else {
					String type = val.get("type");
					String username = val.get("username");
					String password = val.get("password");
					if (rac) {
						String addressUrl = val.get("url");
						dc.setRacAddress(addressUrl);
					} else {
						String hostName = val.get("url");
						int port = Integer.valueOf(val.get("port"));
						String dataBaseName = val.get("database");
						dc.setHostName(hostName);
						if (type.equals("oracle") || type.equals("db2")) {
							if (dataBaseName == null || dataBaseName.equals("")) {
								throw new Exception("数据库[" + key + "]实例不能为空");
							}
							dc.setDatabaseName(dataBaseName);
						}
						dc.setPort(port);
					}
					dc.setRac(rac);
					dc.setType(type);
					dc.setUsername(username);
					dc.setPassword(password);
					dbConfigService.update(dc);
				}
			}
			ret.setMessage("导入数据库配置成功");
			log.dLog("importDataBaseConfig success");
		} catch (Exception e) {
			log.eLog(e);
			ret.setSuccess(false).setMessage(e.getMessage());
		}
		return ret;
	}

	@Override
	@RemoteMethod
	public Return importDataBaseConfigXML(FileTransfer ftf) throws Exception {
		return MappingXMLUtil.importDataBaseConfigXML(dbConfigService, ftf);
	}

	@Override
	@RemoteMethod
	public FileTransfer exportDataBasePool() throws Exception {
		log.dLog("exportDataBasePool");
		List<DataSourcePool> dcs = dbSourceService.getAll();
		Map<String, Map<String, Object>> retMap = new HashMap<String, Map<String, Object>>();
		for (DataSourcePool nc : dcs) {
			Map<String, Object> params = nc.asMap();
			params.put("dcId", ((Map) params.get("dbMap")).get("id"));
			params.remove("dbMap");
			retMap.put(nc.getId(), params);

		}
		String json = JsonUtil.encodeByJackSon(retMap);
		InputStream inputStream = new ByteArrayInputStream(json.getBytes());
		String filename = "数据集-" + TimeUtil.getTime(TimeUtil.YMDHMS)
				+ ".json";
		log.dLog("exportDataBasePool success");
		return new FileTransfer(new String(filename.getBytes("GBK"),
				"iso8859-1"), "application/json", inputStream);
	}

	@Override
	@RemoteMethod
	public FileTransfer exportDataBasePoolXML() throws Exception {
		return MappingXMLUtil.exportDataBasePoolToXML(dbSourceService);
	}

	@Override
	@RemoteMethod
	public Return importDataBasePool(FileTransfer ftf) throws Exception {
		Return ret = new Return();
//		try {
//			log.dLog("importDataBasePool");
//			if (ftf.getFilename() == null
//					|| ftf.getFilename().equals("")
//					|| ftf.getFilename().toLowerCase().trim().indexOf(".json") == -1) {
//				throw new Exception("文件格式有误");
//			}
//			Map<String, Map<String, Object>> xMap = JsonUtil.decodeByJackSon(
//					inputStream2String(ftf.getInputStream()), Map.class);
//			Iterator<Entry<String, Map<String, Object>>> iter = xMap.entrySet()
//					.iterator();
//			while (iter.hasNext()) {
//				Entry<String, Map<String, Object>> entry = iter.next();
//				Map<String, Object> val = entry.getValue();
//				String id = val.get("id").toString();
//				String dcId = val.get("dcId").toString();
//				DataBaseConfig dc = dbConfigService.getById(dcId);
//				if (dc == null) {
//					throw new Exception("DataSource[" + dcId + "]不存在");
//				}
//				Map<String, Object> selfMap_ = (Map<String, Object>) val
//						.get("selfMap");
//				Map<String, Map<String, Object>> fieldMap = (Map<String, Map<String, Object>>) selfMap_
//						.get("fields");
//				selfMap_.remove("fields");
//				Map<String, String> selfMap = new HashMap<String, String>();
//				for (String key : selfMap_.keySet()) {
//					selfMap.put(key, selfMap_.get(key) + "");
//				}
//				List<Field> fields = new ArrayList<Field>();
//				if (fieldMap != null) {
//					Iterator<Map.Entry<String, Map<String, Object>>> iterator = fieldMap
//							.entrySet().iterator();
//					while (iterator.hasNext()) {
//						Map.Entry<String, Map<String, Object>> ent = iterator
//								.next();
//						Field field = new Field(entry.getKey(), (String) ent
//								.getValue().get("customName"), (Boolean) ent
//								.getValue().get("hide"));
//						fields.add(field);
//					}
//				}
//				boolean isSelf = Boolean.valueOf(((Map) val.get("selfMap"))
//						.get("isSelf").toString());
//				DataBaseSelf ds = new DataBaseSelf(isSelf, selfMap, fields);
//				DataSourcePool dp = dbSourceService.getById(id);
//				if (dp == null) {
//					dp = new DataSourcePool(id, dc, ds);
//					dbSourceService.save(dp);
//				} else {
//					dp.setDc(dc);
//					dp.setDs(ds);
//					dbSourceService.update(dp);
//				}
//			}
//			ret.setMessage("导入DataSet配置成功");
//			log.dLog("importDataBasePool success");
//		} catch (Exception e) {
//			log.eLog(e);
//			ret.setSuccess(false).setMessage(e.getMessage());
//		}
		return ret;
	}

	@Override
	@RemoteMethod
	public Return importDataBasePoolXML(FileTransfer ftf) throws Exception {
		return MappingXMLUtil.importDataBasePoolXML(dbConfigService,
				dbSourceService, ftf);
	}

}