package com.mmdb.rest.info;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.restlet.Context;
import org.restlet.Request;
import org.restlet.Response;
import org.restlet.data.Form;
import org.restlet.data.Header;
import org.restlet.data.Status;
import org.restlet.ext.json.JsonRepresentation;
import org.restlet.representation.Representation;
import org.restlet.resource.Delete;
import org.restlet.resource.Get;
import org.restlet.resource.Post;
import org.restlet.resource.Put;
import org.restlet.resource.ServerResource;
import org.restlet.util.Series;

import com.mmdb.core.log.Log;
import com.mmdb.core.log.LogFactory;
import com.mmdb.core.utils.SpringContextUtil;
import com.mmdb.model.bean.User;
import com.mmdb.model.info.ViewPortfolio;
import com.mmdb.service.info.IViewPortfolioService;
import com.mmdb.service.relation.IViewViewProtfolioRelService;
import com.mmdb.service.role.IUserService;
import com.mmdb.service.role.impl.UserService;
import com.mmdb.util.des.Des;

public class ViewPortfolioRest extends ServerResource {
	private Log log = LogFactory.getLogger("ViewPortfolioRest");
	/**
	 * 确认权限时使用的动作,删除动作
	 */
	private final int DELETE = 0;
	/**
	 * 确认权限时使用的动作,添加动作
	 */
	private final int ADD = 1;
	/**
	 * 确认权限时使用的动作,更新动作
	 */
	private final int UPDATE = 2;
	/**
	 * 确认权限时使用的动作,查看动作
	 */
	private final int SEE = 4;

	private IViewPortfolioService viewPorService;
	private IViewViewProtfolioRelService viewRelToProtService;
	private IUserService userService;
	
	@Override
	public void init(Context context, Request request, Response response) {
		super.init(context, request, response);
		viewPorService = (IViewPortfolioService) SpringContextUtil
				.getApplicationContext().getBean("viewPortfolioService");
		viewRelToProtService = (IViewViewProtfolioRelService) SpringContextUtil
				.getApplicationContext().getBean(
						"viewViewProtfolioRelServiceImpl");
		userService = new UserService();
	}

	@Get
	public Representation getMethod(Representation entity) {
		JSONObject ret = new JSONObject();
		String param1 = (String) getRequestAttributes().get("param1");
		if (param1 != null) {
			try {
				param1 = URLDecoder.decode(param1, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + param1 + "]解析失败");
				getResponse().setStatus(new Status(600));
				return new JsonRepresentation(ret.toString());
			}
		}

		if (param1 == null || "".equals(param1)) {
			return getAll(null);
		} else if ("private".equals(param1)) {
			return getAll(false);
		} else if ("public".equals(param1)) {
			return getAll(true);
		} else {
			return getById(param1);
		}
	}

	@Post
	public Representation postMethod(Representation entity) {
		JSONObject ret = new JSONObject();
		String param1 = (String) getRequestAttributes().get("param1");
		if (param1 != null) {
			try {
				param1 = URLDecoder.decode(param1, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + param1 + "]解析失败");
				getResponse().setStatus(new Status(600));
			}
		}

		String operation = null;
		try {

			Form form = entity == null ? null : new Form(entity);
			operation = form.getQueryString();
			operation = URLDecoder.decode(operation, "utf-8");
			operation = new String(operation.getBytes("iso-8859-1"), "utf-8");

			JSONObject params = JSONObject.fromObject(operation);
			return save(params);
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "[" + operation + "]解析失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	@Put
	public Representation putMethod(Representation entity) {
		JSONObject ret = new JSONObject();

		Form form = entity == null ? null : new Form(entity);
		String operation = null;
		try {
			operation = form.getQueryString();
			operation = URLDecoder.decode(operation, "utf-8");
			operation = new String(operation.getBytes("iso-8859-1"), "utf-8");
			JSONObject params = JSONObject.fromObject(operation);
			return edit(params);
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "[" + operation + "]解析失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	@Delete
	public Representation delMethod(Representation entity) {
		JSONObject ret = new JSONObject();

		String param1 = (String) getRequestAttributes().get("param1");
		if (param1 != null) {
			try {
				param1 = URLDecoder.decode(param1, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + param1 + "]解析失败");
				getResponse().setStatus(new Status(600));
				return new JsonRepresentation(ret.toString());
			}
		}
		if (param1 == null || "".equals(param1)) {
			return deleteAll(null);
		} else if ("private".equals(param1)) {
			return deleteAll(false);
		} else if ("public".equals(param1)) {
			return deleteAll(true);
		} else {
			return deleteById(param1);
		}
	}

	private Representation getById(String id) {
		JSONObject ret = new JSONObject();
		log.dLog("getById");
		try {
			ViewPortfolio viewProt = viewPorService.getById(id);
			if (viewProt != null) {
				Map<String, Object> asMap = viewProt.asMap();
				ret.put("data", asMap);
				ret.put("message", "获取视图分类成功");
			} else {
				ret.put("message", "获取视图分类失败");
				getResponse().setStatus(new Status(600));
			}
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "获取视图分类失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	private Representation getAll(Boolean open) {
		JSONObject ret = new JSONObject();
		try {
			List<ViewPortfolio> list = null;
			if (open == null) {
				list = viewPorService.getAllOpenViewPort();
			} else if (open) {
				list = viewPorService.getAllOpenViewPort();
			} else {
				list = viewPorService.getAllByUser(getUser());
			}
			JSONArray data = new JSONArray();
			for (ViewPortfolio viewCategory : list) {
				Map<String, Object> asMap = viewCategory.asMap();
				data.add(asMap);
			}
//			if (open != null && open) {
//				Map<String, List<Map<String, Object>>> retData2 = new HashMap<String, List<Map<String, Object>>>();
//				for (Map<String, Object> map : data) {
//					Object key = map.get("userName");
//					List<Map<String, Object>> list2 = retData2.get(key);
//					if (list2 == null) {
//						list2 = new ArrayList<Map<String, Object>>();
//						retData2.put(key.toString(), list2);
//					}
//					list2.add(map);
//				}
//			}
			
			
			ret.put("data", data);
			ret.put("message", "获取全部组合视图成功");
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "获取全部组合视图失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	private Representation save(JSONObject params) {
		log.dLog("save");
		JSONObject ret = new JSONObject();
		boolean open = true;
		String content = null;
		String name = null;
		JSONArray viewIds = null;
		try {
			open = params.getBoolean("open");
		} catch (Exception e) {
		}

		try {
			content = params.getString("content");
		} catch (Exception e) {
			log.eLog("save", e);
			ret.put("message", "必须参数[content]不存在");
		}

		try {
			name = params.getString("name");
		} catch (Exception e) {
			log.eLog("save", e);
			ret.put("message", "必须参数[name]不存在");
		}

		try {
			viewIds = params.getJSONArray("views");
		} catch (Exception e) {
			log.eLog("save", e);
			ret.put("message", "必须参数[views]不存在");
		}
		if (ret.containsKey("message")) {
			getResponse().setStatus(new Status(600));
			return new JsonRepresentation(ret.toString());
		}

		try {
			if (open) {
				checkAuth(ADD, name);
			}

			if (name == null || "".equals(name)) {
				throw new Exception("组合视图名称不能为空");
			}

			User user = getUser();
			boolean isExist = false;
			if (open) {
				isExist = viewPorService.exist(true, name, null);
			} else {
				isExist = viewPorService
						.exist(false, name, user.getLoginName());
			}
			if (isExist) {
				throw new Exception("组合视图[" + name + "]已存在");
			}
			ViewPortfolio nv = new ViewPortfolio();
			nv.setContent(content);
			nv.setName(name);
			nv.setOpen(open);
			nv.setTime(new Date().getTime());
			nv.setUserName(user.getLoginName());
			ViewPortfolio save = viewPorService.save(nv);
			// 保存视图与组合视图的关系
			viewRelToProtService.save(save.getId(), viewIds);

			ret.put("message", "保存视图分类[" + name + "]成功");
			ret.put("data", save.asMap());
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}

		return new JsonRepresentation(ret.toString());
	}

	@SuppressWarnings("unchecked")
	private Representation edit(JSONObject params) {
		JSONObject ret = new JSONObject();
		log.dLog("edit");
		String id = null;
		String name = null;
		String content = null;
		boolean open = true;
		JSONArray viewIds = null;
		try {
			open = params.getBoolean("open");
		} catch (Exception e) {
		}

		try {
			id = params.getString("id");
		} catch (Exception e) {
			log.eLog("save", e);
			ret.put("message", "必须参数[id]不存在");
		}

		try {
			name = params.getString("name");
		} catch (Exception e) {
			log.eLog("save", e);
			ret.put("message", "必须参数[name]不存在");
		}

		try {
			content = params.getString("content");
		} catch (Exception e) {
			log.eLog("save", e);
			ret.put("message", "必须参数[content]不存在");
		}

		try {
			viewIds = params.getJSONArray("views");
		} catch (Exception e) {
			log.eLog("save", e);
			ret.put("message", "必须参数[views]不存在");
		}

		if (ret.containsKey("message")) {
			getResponse().setStatus(new Status(600));
			return new JsonRepresentation(ret.toString());
		}

		try {
			if (open)
				checkAuth(UPDATE, name);

			ViewPortfolio viewp = viewPorService.getById(id);
			if (viewp == null) {
				throw new Exception("组合视图不存在");
			}
			viewp.setContent(content);
			viewp.setName(name);
			viewp.setTime(new Date().getTime());
			viewp.setOpen(open);
			ViewPortfolio update = viewPorService.update(viewp);
			// 更新视图与组合视图的关系
			viewRelToProtService.update(update.getId(), viewIds);

			ret.put("data", update.asMap());
			ret.put("message", "更新组合视图[" + update.getName() + "成功");
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}

		return new JsonRepresentation(ret.toString());
	}

	private Representation deleteAll(Boolean open) {
		JSONObject ret = new JSONObject();
		log.dLog("deleteAll");
		try {
			if (open == null) {
				viewPorService.deleteAll();
			} else if (open) {
				viewPorService.deleteAllOpenViewPort();
			} else {
				viewPorService.deleteAllByUser(getUser());
			}
			ret.put("message", "清除成功");
		} catch (Exception e) {
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	private Representation deleteById(String id) {
		JSONObject ret = new JSONObject();
		try {
			log.dLog("deleteById");
			ViewPortfolio view = viewPorService.getById(id);
			if (view == null) {
				throw new Exception("组合视图不存在");
			}
			viewPorService.deleteById(id);
			ret.put("message", "删除成功");
		} catch (Exception e) {
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	/**
	 * 判断用户是否有操作该目录的权限
	 * 
	 * @param method
	 *            上面定义的几个final 变量 DELETE,ADD,UPDATE,SEE
	 * @param viewCateName
	 *            要添加的视图名称
	 * @return
	 */
	private void checkAuth(int method, String viewCateName) throws Exception {
		if (method == 100) {
			log.eLog("权限不足");
			throw new Exception("权限不足");
		}
	}

	public User getUser() {
//		Series<Header> headers = getRequest().getHeaders();
//		String values = headers.getValues("token");
//		if (values == null || "".equals(values))
//			return null;
//		Des des = new Des();
//		String decrypt = des.decrypt(values);
//		System.out.println(decrypt);
//		String[] split = decrypt.split("\\|");
//		return userService.getUserByLoginName(split[0]);
		User user = new User();
		user.setUserName("admin");
		user.setLoginName("admin");
		return user;
	}
}
