package com.mmdb.rest.relation;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.List;
import java.util.Map;

import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.restlet.Context;
import org.restlet.Request;
import org.restlet.Response;
import org.restlet.data.Form;
import org.restlet.data.Status;
import org.restlet.ext.fileupload.RestletFileUpload;
import org.restlet.ext.json.JsonRepresentation;
import org.restlet.representation.Representation;
import org.restlet.resource.Delete;
import org.restlet.resource.Get;
import org.restlet.resource.Post;
import org.restlet.resource.ServerResource;

import com.mmdb.core.log.Log;
import com.mmdb.core.log.LogFactory;
import com.mmdb.core.utils.ExcleJxlReadUtil;
import com.mmdb.core.utils.ExcleJxlReadUtil.Sublist;
import com.mmdb.core.utils.ExcleJxlReadUtil.Table;
import com.mmdb.core.utils.SpringContextUtil;
import com.mmdb.model.categroy.CiCategory;
import com.mmdb.model.categroy.KpiCategory;
import com.mmdb.model.info.KpiInformation;
import com.mmdb.service.relation.ICiKpiRelService;
import com.mmdb.util.FileManager;
import com.mmdb.websocket.MessageResult;

public class CiKpiRest extends ServerResource{
	private Log log = LogFactory.getLogger("CiKpiRest");
	
	private ICiKpiRelService ciKpiRelService;
	
	@Override
	public void init(Context context, Request request, Response response) {
		super.init(context, request, response);
		ciKpiRelService = (ICiKpiRelService) SpringContextUtil
				.getApplicationContext().getBean("ciKpiRelService");
	}
	
	@Get
	public Representation getMethod(Representation entity) {
		JSONObject ret = new JSONObject();
		String param1 = (String) getRequestAttributes().get("param1");
		String id = (String) getRequestAttributes().get("param2");
		if (param1 != null) {
			try {
				param1 = URLDecoder.decode(param1, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + param1 + "]解析失败");
				getResponse().setStatus(new Status(600));
				return new JsonRepresentation(ret.toString());
			}
		}
		if (id != null) {
			try {
				id = URLDecoder.decode(id, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + id + "]解析失败");
				getResponse().setStatus(new Status(600));
				return new JsonRepresentation(ret.toString());
			}
		}
		if (param1 == null || "".equals(param1)) {
			ret.put("message", "缺少CI参数");
			getResponse().setStatus(new Status(600));
			return new JsonRepresentation(ret.toString());
		} else if ("kpiCate".equals(param1)) {
			return getKpiCateById(id);
		} else if ("kpi".equals(param1)) {
			String kpiCateId = (String) getRequestAttributes().get("param3");
			if (kpiCateId != null) {
				try {
					kpiCateId = URLDecoder.decode(id, "utf-8");
				} catch (UnsupportedEncodingException e) {
					log.eLog(e);
					ret.put("message", "[" + kpiCateId + "]解析失败");
					getResponse().setStatus(new Status(600));
					return new JsonRepresentation(ret.toString());
				}
			}
			return getKpiByKpiCate(id,kpiCateId);
		} else{
			return getById(id);
		}
	}

	@Post
	public Representation postMethod(Representation entity) {
		JSONObject ret = new JSONObject();
		String param1 = (String) getRequestAttributes().get("param1");
		if (param1 != null) {
			try {
				param1 = URLDecoder.decode(param1, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + param1 + "]解析失败");
				getResponse().setStatus(new Status(600));
			}
		}

		String operation = null;
		try {
			if ("import".equals(param1)) {
				return new JsonRepresentation(importData(entity));
			}

			Form form = entity == null ? null : new Form(entity);
			operation = form.getQueryString();
			operation = URLDecoder.decode(operation, "utf-8");
			operation = new String(operation.getBytes("iso-8859-1"), "utf-8");

			JSONObject params = JSONObject.fromObject(operation);
			if ("delete".equals(param1)) {
				return delete(params);
			} else if ("export".equals(param1)) {
				return exportData(params);
			} else{
				return save(params);
			}
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "[" + operation + "]解析失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}
	
	@Delete
	public Representation delMethod(Representation entity) {
		JSONObject ret = new JSONObject();

		String param1 = (String) getRequestAttributes().get("param1");
		if (param1 != null) {
			try {
				param1 = URLDecoder.decode(param1, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + param1 + "]解析失败");
				getResponse().setStatus(new Status(600));
				return new JsonRepresentation(ret.toString());
			}
		}
		Form form = entity == null ? null : new Form(entity);
		JSONObject params = null;
		try {
			String operation = form.getQueryString();
			operation = URLDecoder.decode(operation, "utf-8");
			operation = new String(operation.getBytes("iso-8859-1"), "utf-8");
			params = JSONObject.fromObject(operation);
		} catch (Exception e) {

		}
		
		if (param1 == null || "".equals(param1)) {
			if (params != null) {
				return delete(params);
			}
			
		} else {
			//return delete(param1);
		}
		ret.put("message", "未知参数异常");
		getResponse().setStatus(new Status(600));
		return new JsonRepresentation(ret.toString());
	}
		
	/**
	 * 获取到指定CI下的KPI信息列表
	 * 
	 * @param id CI的ID
	 * @return jsonArray
	 */
	private Representation getById(String ciId) {
		JSONObject ret = new JSONObject();
		try {
			JSONArray list = new JSONArray();
			//取出符合指定ci的关系Map放入到返回列表中
			List<Map<String,String>> relList = ciKpiRelService.getRelByCiId(ciId);
			for(Map<String,String> ciKpiMap:relList){
					list.add(ciKpiMap);
			}
			ret.put("data", list);
			ret.put("message", "获取CI KPI分类数据成功");
		}  catch (Exception e) {
			log.eLog(e);
			ret.put("message", "获取CI KPI关系[" + ciId + "]失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}
	
	/**
	 * 获取到指定CI下的KPI分类
	 * 
	 * @param id CI的ID
	 * @return jsonArray
	 */
	private Representation getKpiCateById(String ciId) {
		JSONObject ret = new JSONObject();
		try {
			JSONArray list = new JSONArray();
			//取出符合指定ci的关系Map放入到返回列表中
			List<KpiCategory> relList = ciKpiRelService.getKpiCateByCiId(ciId);
			for(KpiCategory kpiCate:relList){
				list.add(kpiCate.toMap());
			}
			ret.put("data", list);
			ret.put("message", "获取CI KPI分类数据成功");
		}  catch (Exception e) {
			log.eLog(e);
			ret.put("message", "获取CI KPI关系[" + ciId + "]失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}
	
	/**
	 * 获取到指定CI下的KPI分类
	 * 
	 * @param ciId CI的ID
	 * @param kpiCateId kpi分类
	 * @return jsonArray
	 */
	private Representation getKpiByKpiCate(String ciId,String kpiCateId) {
		JSONObject ret = new JSONObject();
		try {
			JSONArray list = new JSONArray();
			//取出符合指定ci的关系Map放入到返回列表中
			List<KpiInformation> relList = ciKpiRelService.getKpiByKpiCate(ciId, kpiCateId);
			for(KpiInformation kpi:relList){
				list.add(kpi.toMap());
			}
			ret.put("data", list);
			ret.put("message", "获取KPI数据成功");
		}  catch (Exception e) {
			log.eLog(e);
			ret.put("message", "获KPI数据[" + ciId + "]失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}
	
	/**
	 * 保存CI和KPI的关系
	 * 
	 * @param obj
	 * @return
	 */
	private Representation save(JSONObject obj) {
		JSONObject ret = new JSONObject();
		
		 try {
			log.dLog("save");
			if (obj == null || obj.size() == 0) {
				throw new Exception("save参数不能空");
			}
			String ciId = obj.getString("ciId");
			if (ciId == null || ciId.equals("")) {
				throw new Exception("CI不能空");
			}
			
			String kpiIds = obj.getString("kpiIds");
			if (kpiIds == null || kpiIds.equals("")) {
				throw new Exception("KPI不能空");
			}
			
			List<String> ciIdList = JSONArray.fromObject(ciId);
			
			List<String> kpiIdList = JSONArray.fromObject(kpiIds);
			
			ciKpiRelService.saveCiKpiRel(ciIdList, kpiIdList);
			
			ret.put("message", "保存成功");
		} catch (Exception e) { 
			log.eLog(e);
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}
	
	/**
	 * 删除CI KPI关系
	 * 
	 * @param obj{ciId:'',kpiIds:[]}
	 * @return
	 */
	private Representation delete(JSONObject obj) {
		JSONObject ret = new JSONObject();
		
		 try {
			log.dLog("delete");
			if (obj == null || obj.size() == 0) {
				throw new Exception("删除参数不能空");
			}
			String ciId = obj.getString("ciId");
			if (ciId == null || ciId.equals("")) {
				throw new Exception("CI不能空");
			}
			String kpiIds = obj.getString("kpiIds");
			if (kpiIds == null || kpiIds.equals("")) {
				throw new Exception("KPI不能空");
			}
			List<String> kpiIdList = JSONArray.fromObject(kpiIds);
			
			ciKpiRelService.delCiKpiRel(ciId, kpiIdList);
			
			ret.put("message", "删除成功");
		} catch (Exception e) { 
			log.eLog(e);
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}
	
	private Representation exportData(JSONObject params) {
		JSONObject ret = new JSONObject();
		log.dLog("exportKpiCi");
		File file = FileManager.getInstance().createFile("CIKPI映射", "xls");
		if (!file.exists()) {
			try {
				file.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		try {
			WritableWorkbook wb = Workbook.createWorkbook(file);
			WritableSheet ws = wb.createSheet("Sheet1", 0);
			Label ciCateL = new Label(0, 0, "CI分类");
			ws.addCell(ciCateL);
			Label ciAttrL = new Label(1, 0, "CI字段");
			ws.addCell(ciAttrL);
			Label ciL = new Label(2, 0, "CI值");
			ws.addCell(ciL);
			Label kpiCateL = new Label(3, 0, "KPI分类");
			ws.addCell(kpiCateL);
			Label kpiL = new Label(4, 0, "KPI");
			ws.addCell(kpiL);
			Label autoRelationL = new Label(5, 0, "自动关联");
			ws.addCell(autoRelationL);
			Label hasDataL = new Label(6, 0, "是否有数据");
			ws.addCell(hasDataL);
			
			List<String> cateIds = params.containsKey("ids") ? (params.getJSONArray("ids").size()==0 ? null:params.getJSONArray("ids")):null;
			Boolean hasChildren = params.containsKey("hasData") ? params.getBoolean("hasData"):false;
			List<Map<String, String>> rels = ciKpiRelService.getAllCiKpiRel(cateIds, hasChildren);
			int i = 1;
			for(Map<String, String> rel:rels){
				Label ciCate_l = new Label(0, i, rel.get("ciCate"));
				ws.addCell(ciCate_l);
				Label ciAttr_l = new Label(1, i, rel.get("ciAttr"));
				ws.addCell(ciAttr_l);
				Label ci_l = new Label(2, i, rel.get("ci"));
				ws.addCell(ci_l);
				Label kpiCate_l = new Label(3, i, rel.get("kpiCate"));
				ws.addCell(kpiCate_l);
				Label kpi_l = new Label(4, i, rel.get("kpi"));
				ws.addCell(kpi_l);
				Label autoRelation_l = new Label(5, i, rel.get("autoRelation"));
				ws.addCell(autoRelation_l);
				Label hasData_l = new Label(6, i, rel.get("hasData"));
				ws.addCell(hasData_l);
				i++;
			}
			
			wb.write();
			wb.close();
			ret.put("message", "下载CIKPI映射数据成功");
			JSONObject retData = new JSONObject();
			retData.put("url", file.getName());
			ret.put("data", retData);
		} catch (Exception e) {
			e.printStackTrace();
			if (file != null && file.exists()) {
				file.delete();
			}
			log.eLog(e);
			ret.put("message", "创建文件失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}
	
	private String importData(Representation entity) {
		log.dLog("importKpiCi");
		JSONObject ret = new JSONObject();
		//
		DiskFileItemFactory factory = new DiskFileItemFactory();
		RestletFileUpload upload = new RestletFileUpload(factory);

		List<FileItem> items = null;
		try {
			items = upload.parseRepresentation(entity);
		} catch (FileUploadException e) {
			log.eLog(e);
		}

		String filename = "";
		FileItem fi = items.get(0);
		try {
			filename = fi.getName();
			if (filename == null || filename.equals("")
					|| filename.toLowerCase().trim().indexOf("xls") == -1) {
				log.eLog("文件格式有误");
				throw new Exception("文件格式有误");
			}
			MessageResult.broadcast("正在解析EXCEL，请等待...", 0.1d);
			Integer count = ciKpiRelService.getCiKpiRelCount();
			ExcleJxlReadUtil ejr = new ExcleJxlReadUtil(fi.getInputStream());
			Table table = ejr.getTable();
			List<Sublist> sublist = table.getSublist();
			Map<String, CiCategory> ciCateMap = ciKpiRelService.getCiCateMap();
			MessageResult.broadcast("开始建立CIKPI映射，请等待...", 0.2d);

			int totle = 0;
			for (Sublist sl : sublist) {
				totle += sl.getData().size();
			}
			double flag = 0.8d / totle;
			double progress = 0.2d;

			Double i = 1D;
			for (Sublist sl : sublist) {
				List<Map<String, Object>> data = sl.getData();
				for(Map<String, Object> datum:data){
					ciKpiRelService.addCiKpiRel(datum, ciCateMap);
					MessageResult.broadcast("", progress+flag*i);
					i++;
				}
			}
			MessageResult.broadcast("上传CIKPI映射完成", 1d);
			MessageResult.broadcast("成功新增CIKPI映射[" + (ciKpiRelService.getCiKpiRelCount()-count) + "]条", 1d);
			ret.put("message", "上传完成");
			log.dLog("importKpiCi success");
		} catch (Exception e) {
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return ret.toString();
	}
}
