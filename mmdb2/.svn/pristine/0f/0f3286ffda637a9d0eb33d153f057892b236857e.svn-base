package com.mmdb.model.task;

import com.mmdb.core.log.Log;
import com.mmdb.core.log.LogFactory;
import org.quartz.*;
import org.quartz.impl.StdSchedulerFactory;

/**
 * 定时任务管理类
 * 
 * @author XIE
 */
public class QuartzManager {
	private static Log log = LogFactory.getLogger("QuartzManager");
	/**
	 * 调度工厂
	 */
	private static SchedulerFactory gSchedulerFactory = new StdSchedulerFactory();

	/**
	 * 添加一个定时任务，使用默认的任务组名，触发器名，触发器组名
	 * 
	 * @param jobName
	 *            任务名
	 * @param time
	 *            时间设置，参考quartz说明文档
	 * @throws SchedulerException
	 * @throws java.text.ParseException
	 */
	public static void addJob(String jobName, String jobClass, String time) {
		try {
			// Scheduler 调度器 四种状态: stand-by, start, pause, shutdown
			Scheduler sched = gSchedulerFactory.getScheduler();
			JobDetail job = JobBuilder
					.newJob((Class<? extends Job>) Class.forName(jobClass))
					.withIdentity(jobName).build();// 任务名，任务组，任务执行类
			// 触发器, 使用cron表达式
			CronTrigger trigger = TriggerBuilder.newTrigger()
					.withIdentity(jobName)
					.withSchedule(CronScheduleBuilder.cronSchedule(time))// "0/2 * * * * ?"
					.build();// 触发器名,触发器组
			// 调度器绑定Job 和 Trigger
			// TriggerKey trk = new TriggerKey(jobName);
			// JobKey jKey = new JobKey(jobName);
			// if (sched.checkExists(jKey) && sched.checkExists(trk)) {
			sched.scheduleJob(job, trigger);// 返回Job运行的时间
			// 启动
			if (!sched.isShutdown()) {
				sched.start();
				log.dLog("任务[" + jobName + "]加载成功");
			}
			// }
		} catch (Exception e) {
			e.printStackTrace();
			log.eLog(e);
			throw new RuntimeException(e);
		}
	}

	/**
	 * 验证job是否存在
	 * 
	 * @param jobName
	 * @return
	 */
	public static boolean getJob(String jobName) {
		boolean bool = true;
		try {
			Scheduler sched = gSchedulerFactory.getScheduler();
			TriggerKey trk = new TriggerKey(jobName);
			CronTrigger trigger = (CronTrigger) sched.getTrigger(trk);
			if (trigger == null) {
				bool = false;
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.eLog(e);
			throw new RuntimeException(e);
		}
		return bool;
	}

	/**
	 * 修改一个任务的触发时间(使用默认的任务组名，触发器名，触发器组名)
	 * 
	 * @param jobName
	 * @param time
	 */
	public static void editJobTime(String jobName, String time) {
		try {
			Scheduler sched = gSchedulerFactory.getScheduler();
			TriggerKey trk = new TriggerKey(jobName);
			JobKey jKey = new JobKey(jobName);
			CronTrigger trigger = (CronTrigger) sched.getTrigger(trk);
			if (trigger == null) {
				return;
			}
			String oldTime = trigger.getCronExpression();
			if (!oldTime.equalsIgnoreCase(time)) {
				JobDetail jobDetail = sched.getJobDetail(jKey);
				Class<? extends Job> objJobClass = jobDetail.getJobClass();
				String jobClass = objJobClass.getName();
				removeJob(jobName);
				addJob(jobName, jobClass, time);
				log.dLog("任务[" + jobName + "]编辑时间成功");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.eLog(e);
			throw new RuntimeException(e);
		}
	}

	/**
	 * 移除一个任务(使用默认的任务组名，触发器名，触发器组名)
	 * 
	 * @param jobName
	 */
	public static void removeJob(String jobName) {
		try {
			TriggerKey trk = new TriggerKey(jobName);
			JobKey jKey = new JobKey(jobName);
			Scheduler sched = gSchedulerFactory.getScheduler();
			if (sched.checkExists(jKey) && sched.checkExists(trk)) {
				sched.pauseTrigger(trk);// 停止触发器
				sched.unscheduleJob(trk);// 移除触发器
				sched.deleteJob(jKey);// 删除任务
				log.dLog("任务[" + jobName + "]删除成功");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.eLog("注销任务失败：" + e);
			throw new RuntimeException(e);
		}
	}

	/**
	 * 启动所有定时任务
	 */
	public static void startJobs() {
		try {
			Scheduler sched = gSchedulerFactory.getScheduler();
			sched.start();
			log.iLog("启动任务管理成功");
		} catch (Exception e) {
			e.printStackTrace();
			log.eLog("启动任务失败：" + e);
			throw new RuntimeException(e);
		}
	}

	/**
	 * 关闭所有定时任务
	 */
	public static void shutdownJobs() {
		try {
			Scheduler sched = gSchedulerFactory.getScheduler();
			if (!sched.isShutdown()) {
				sched.shutdown();
				log.iLog("注销任务管理成功");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.eLog("注销任务失败：" + e);
			throw new RuntimeException(e);
		}
	}
}
