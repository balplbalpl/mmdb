package com.mmdb.buz.task;

import com.mmdb.core.log.Log;
import com.mmdb.core.log.LogFactory;
import com.mmdb.core.utils.JsonUtil;
import com.mmdb.core.utils.Return;
import com.mmdb.model.mapping.InCiCateMap;
import com.mmdb.model.mapping.SourceToCategoryMapping;
import com.mmdb.model.mapping.SourceToRelationMapping;
import com.mmdb.model.task.QuartzManager;
import com.mmdb.model.task.Task;
import com.mmdb.model.task.TaskJob;
import com.mmdb.service.mapping.IInCiCateMapService;
import com.mmdb.service.mapping.ISourceCategoryMapService;
import com.mmdb.service.mapping.ISourceRelationMapService;
import com.mmdb.service.task.ITaskService;
import org.directwebremoting.annotations.RemoteProxy;
import org.springframework.beans.factory.annotation.Autowired;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * 对外提供的定时数据同步接口类，包括分类和数据的同步
 *
 * @author XIE
 */
@RemoteProxy(name = "taskBuz")
public class TaskBuzImpl implements ITaskBuz {
    private Log log = LogFactory.getLogger("TaskBuzImpl");
    @Autowired
    private ITaskService taskService;
    @Autowired
    private ISourceCategoryMapService dbService;
    @Autowired
    private IInCiCateMapService icmService;
    @Autowired
    private ISourceRelationMapService ocmService;

    @Override
    public Return get(String name) {
        Return ret = new Return();
        try {
            log.dLog("get");
            if (name == null || "".equals(name)) {
                List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
                List<Task> tasks = taskService.getAll();
                for (Task task : tasks) {
                    list.add(task.asMap());
                }
                ret.setData(list).setMessage("获取成功");
            } else {
                Task task = taskService.getByName(name);
                if (task == null) {
                    throw new Exception("任务[" + name + "]不存在");
                }
                ret.setData(task.asMap()).setMessage("获取成功");
            }
            log.dLog("get success");
        } catch (Exception me) {
            log.eLog(me);
            ret.setSuccess(false).setMessage(me.getMessage());
        }
        return ret;
    }

    /**
     * 拆分 页面传递过来的参数
     *
     * @param map  可能包含数据库，CI内/外部，KPI外部映射
     * @param dbms 数据库映射
     * @param icms CI内部映射
     * @param ocms CI外部映射
     * @throws Exception
     */
    private void splitParameter(Map<String, List<String>> map,
                                List<SourceToCategoryMapping> dbms, List<InCiCateMap> icms,
                                List<SourceToRelationMapping> ocms) throws Exception {
        int num = 0;
        if (map.containsKey("dbCiMap")) {
            List<String> ids = map.get("dbCiMap");
            for (String id : ids) {
                SourceToCategoryMapping m = dbService.getById(id);
                if (m == null) {
                    throw new Exception("配置项数据映射[" + id + "]不存在");
                } else {
                    dbms.add(m);
                }
            }
            num++;
        }
        if (map.containsKey("inCiMap")) {
            List<String> ids = map.get("inCiMap");
            for (String id : ids) {
                InCiCateMap m = icmService.getByName(id);
                if (m == null) {
                    throw new Exception("配置项内部映射[" + id + "]不存在");
                } else {
                    icms.add(m);
                }
            }
            num++;
        }
        if (map.containsKey("outCiMap")) {
            List<String> ids = map.get("outCiMap");
            for (String id : ids) {
                SourceToRelationMapping m = ocmService.getById(id);
                if (m == null) {
                    throw new Exception("配置项外部映射[" + id + "]不存在");
                } else {
                    ocms.add(m);
                }
            }
            num++;
        }
        if (num == 0) {
            throw new Exception("映射参数不符合要求");
        }
    }

    @Override
    public Return save(String name, String timing, String mapping) {
        Return ret = new Return();
        try {
            log.dLog("save");
            if (name == null || name.equals("")) {
                throw new Exception("任务名称不能为空");
            }
            if (timing == null || timing.equals("")) {
                throw new Exception("执行时间不能为空");
            }
            if (mapping == null || mapping.equals("")) {
                throw new Exception("映射不能为空");
            }
            if (taskService.getByName(name) != null) {
                throw new Exception("任务[" + name + "]已存在");
            }
            Map<String, String> time = JsonUtil.decodeByJackSon(timing, Map.class);
            Map<String, List<String>> map = JsonUtil.decodeByJackSon(mapping, Map.class);
            if (map == null || map.size() == 0) {
                throw new Exception("分类映射为空");
            }
            List<SourceToCategoryMapping> dbms = new ArrayList<SourceToCategoryMapping>();
            List<InCiCateMap> icms = new ArrayList<InCiCateMap>();
            List<SourceToRelationMapping> ocms = new ArrayList<SourceToRelationMapping>();
            this.splitParameter(map, dbms, icms, ocms);
            Task task = new Task(name, time, dbms, icms, ocms);
            ret.setData(taskService.save(task).asMap()).setMessage("保存成功");
            log.dLog("save success");
        } catch (Exception me) {
            log.eLog(me);
            ret.setSuccess(false).setMessage(me.getMessage());
        }
        return ret;
    }

    @Override
    public Return update(String name, String timing, String mapping) {
        Return ret = new Return();
        try {
            log.dLog("update");
            if (name == null || name.equals("")) {
                throw new Exception("任务名称不能为空");
            }
            if (timing == null || timing.equals("")) {
                throw new Exception("执行时间不能为空");
            }
            if (mapping == null || mapping.equals("")) {
                throw new Exception("映射不能为空");
            }
            Map<String, String> time = JsonUtil.decodeByJackSon(timing, Map.class);
            Map<String, List<String>> map = JsonUtil.decodeByJackSon(mapping, Map.class);
            Task task = taskService.getByName(name);
            if (task == null) {
                throw new Exception("任务[" + name + "]不存在");
            }
            if (map == null || map.size() == 0) {
                throw new Exception("分类映射名称不能为空");
            }
            List<SourceToCategoryMapping> dbms = new ArrayList<SourceToCategoryMapping>();
            List<InCiCateMap> icms = new ArrayList<InCiCateMap>();
            List<SourceToRelationMapping> ocms = new ArrayList<SourceToRelationMapping>();
            this.splitParameter(map, dbms, icms, ocms);
            if (!task.getTiming().equals(timing)) {
                QuartzManager.editJobTime(name, time.get("runtime"));
            }
//            task = task.unLazy();
            task.setTiming(time);
            task.setDbCiCateMap(dbms);
            task.setOutCiCateMap(ocms);
            task.setInCiCateMap(icms);
            ret.setData(taskService.update(task).asMap()).setMessage("编辑成功");
            log.dLog("update success");
        } catch (Exception me) {
            log.eLog(me);
            ret.setSuccess(false).setMessage(me.getMessage());
        }
        return ret;
    }

    @Override
    public Return setTasksStatus(String name, boolean status) {
        Return ret = new Return();
        try {
            log.dLog("setTasksStatus");
            if (name == null || name.equals("")) {
                throw new Exception("任务名称不能为空");
            }
            Task task = taskService.getByName(name);
            if (task == null) {
                throw new Exception("任务[" + name + "]不存在");
            }
            boolean timeOut = false;
            if (status) {
                Map<String, String> tm = task.getTiming();
                if (task.getOpen()) {
                    if (QuartzManager.getJob(task.getName())) {
                        QuartzManager.editJobTime(name, tm.get("runtime"));
                    } else {
                        String type = tm.get("触发频率");
                        if (type.equals("one")) {
                            String time = tm.get("time");
                            SimpleDateFormat sd = new SimpleDateFormat(
                                    "yyyy-MM-dd HH:mm");
                            Date d1 = sd.parse(time);
                            Date d2 = new Date();
                            if (d1.getTime() > d2.getTime()) {
                                QuartzManager.addJob(task.getName(),
                                        TaskJob.class.getName(), tm.get("runtime"));
                            } else {
                                timeOut = true;
                                log.dLog("任务已过期");
                            }
                        } else {
                            QuartzManager.addJob(task.getName(),
                                    TaskJob.class.getName(), tm.get("runtime"));
                        }
                    }
                } else {
                    String type = tm.get("触发频率");
                    if (type.equals("one")) {
                        String time = tm.get("time");
                        SimpleDateFormat sd = new SimpleDateFormat("yyyy-MM-dd HH:mm");
                        Date d1 = sd.parse(time);
                        Date d2 = new Date();
                        if (d1.getTime() > d2.getTime()) {
                            QuartzManager.addJob(task.getName(), TaskJob.class.getName(), tm.get("runtime"));
                        } else {
                            timeOut = true;
                        }
                    } else {
                        QuartzManager.addJob(task.getName(), TaskJob.class.getName(), tm.get("runtime"));
                    }
                }
            } else {
                QuartzManager.removeJob(task.getName());
            }
            task = taskService.setStatus(task, status, timeOut);
            ret.setData(task.asMap()).setMessage(
                    "任务[" + name + (status ? "]开启" : "]关闭") + "成功");
            log.dLog("setTasksStatus success");
        } catch (Exception me) {
            log.eLog(me);
            ret.setSuccess(false).setMessage(me.getMessage());
        }
        return ret;
    }

    @Override
    public Return deleteTask(String name) {
        Return ret = new Return();
        try {
            log.dLog("deleteTask");
            Task task = taskService.getByName(name);
            if (task == null) {
                throw new Exception("任务[" + name + "]不存在");
            }
            QuartzManager.removeJob(name);
            taskService.delete(task);
            ret.setMessage("删除成功");
            log.dLog("deleteTask success");
        } catch (Exception me) {
            log.eLog(me);
            ret.setSuccess(false).setMessage(me.getMessage());
        }
        return ret;
    }

    @Override
    public Return runNow(String name) {
        Return ret = new Return();
        try {
            log.dLog("runNow");
            Task task = taskService.getByName(name);
            if (task == null) {
                throw new Exception("任务[" + name + "]不存在");
            }
            taskService.runNow(task);
            ret.setMessage("任务执行成功");
            log.dLog("runNow success");
        } catch (Exception me) {
            log.eLog(me);
            ret.setSuccess(false).setMessage(me.getMessage());
        }
        return ret;
    }

}
