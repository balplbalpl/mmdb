package com.mmdb.rest.jmx;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.sf.json.JSONObject;

import org.restlet.Context;
import org.restlet.Request;
import org.restlet.Response;
import org.restlet.data.Status;
import org.restlet.ext.json.JsonRepresentation;
import org.restlet.representation.Representation;
import org.restlet.resource.Delete;
import org.restlet.resource.Get;
import org.restlet.resource.ServerResource;

import com.mmdb.core.utils.SpringContextUtil;
import com.mmdb.service.mq.MonitorActiveMqService;

/***
 * activemq队列监控管理
 * <p>
 * activemq.xml中配置 <borker useJmx="true"> <managementContext> <managementContext
 * connectorPort="1211" jmxDomainName="test"
 * connectorPath="/jmxrmi"></managementContext> </managementContext> </borker>
 * <p>
 * 
 * @author xiongjian
 * 
 */
public class MonitorActiveMq extends ServerResource {

	private MonitorActiveMqService mqService;

	@Override
	public void init(Context context, Request request, Response response) {
		super.init(context, request, response);
		// 获取jmx的配置信息
		mqService = (MonitorActiveMqService) SpringContextUtil
				.getBean("monitorActiveMqService");
	}

	@Get
	public Representation getMethod(Representation entity) {
		JSONObject ret = new JSONObject();
		try {
			Map<String, List<Map<String, String>>> queuesData = mqService
					.getQueuesData();
			List<Map<String, String>> retData = new ArrayList<Map<String, String>>();
			Set<String> keySet = queuesData.keySet();
			for (String key : keySet) {
				List<Map<String, String>> list = queuesData.get(key);
				for (Map<String, String> map : list) {
					map.put("brokerName", key);
					retData.add(map);
				}
			}
			ret.put("data", retData);
		} catch (Exception e) {

		}
		return new JsonRepresentation(ret.toString());
	}

	@Delete
	public Representation delMethod(Representation entity) {
		JSONObject ret = new JSONObject();
		String param1 = (String) getRequestAttributes().get("param1");
		if (param1 != null) {
			try {
				param1 = URLDecoder.decode(param1, "utf-8");
			} catch (UnsupportedEncodingException e) {
				getResponse().setStatus(new Status(600));
				return new JsonRepresentation(ret.toString());
			}
		}
		String param2 = (String) getRequestAttributes().get("param2");
		if (param2 != null) {
			try {
				param2 = URLDecoder.decode(param2, "utf-8");
			} catch (UnsupportedEncodingException e) {
				getResponse().setStatus(new Status(600));
				return new JsonRepresentation(ret.toString());
			}
		}
		try {
			mqService.delQueue(param1, param2);
			ret.put("message", "删除成功!");
		} catch (Exception e) {
			e.printStackTrace();
			getResponse().setStatus(new Status(404));
			ret.put("message", e.getMessage());
		}
		return new JsonRepresentation(ret.toString());
	}

	public static void main(String[] args) {

	}
}
