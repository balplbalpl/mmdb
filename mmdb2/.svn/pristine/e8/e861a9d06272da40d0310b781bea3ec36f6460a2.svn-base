package com.mmdb.model.security;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mmdb.core.framework.neo4j.annotation.Space;
import com.mmdb.core.framework.neo4j.annotation.Uuid;
import com.mmdb.core.framework.neo4j.entity.NodeEntity;
import com.mmdb.core.utils.TimeUtil;

/**
 * 权限
 *
 * @author XIE
 */
@Space("authorize")
public class Authorize extends NodeEntity {
    private static final long serialVersionUID = -7833976638080573883L;
    /**
     * 权限id（当前分类中唯一,目前是自动生成的）
     */
    @Uuid
    private String id;

    private List<Long> views = new ArrayList<Long>();

    /**
     * 视图权限描述
     */
    private String description;

    /**
     * 最后修改时间
     */
    private String lastEditTime;

    public Authorize() {
        super();
    }

    public Authorize(String id, List<Long> views) {
        this.id = id;
        this.views = views;
        this.lastEditTime = TimeUtil.getTime(TimeUtil.YMDHMS);
    }

    public Authorize(String id, List<Long> views, String description) {
        this(id, views);
        this.description = description;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public List<Long> getViews() {
        return views;
    }

    public void setViews(List<Long> views) {
        this.views = views;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getLastEditTime() {
        return lastEditTime;
    }

    public void setLastEditTime(String lastEditTime) {
        this.lastEditTime = lastEditTime;
    }

    public Map<String, Object> asMap() {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("_id_", this.getId());
        map.put("_neo4jid_", this.getId());
        map.put("id", this.getId());
        map.put("view", this.getViews());
        map.put("description", this.getDescription());
        map.put("lastEditTime", this.getLastEditTime());
        return map;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        if (!super.equals(o)) return false;

        Authorize authorize = (Authorize) o;

        if (id != null ? !id.equals(authorize.id) : authorize.id != null) return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = super.hashCode();
        result = 31 * result + (id != null ? id.hashCode() : 0);
        return result;
    }
}
