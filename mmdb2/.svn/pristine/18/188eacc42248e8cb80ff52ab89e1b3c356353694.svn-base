!function(e){"use strict";var t=function(e){return new t.fn.init(e)};t.fn=t.prototype={constructor:t,init:function(e){var t=this;t.timeout=3e5,t.graduationItems=[],t.points=[],t.graduationSpaceWidth=10,t.num=150,t.labelItems=[],t.options=e,t.container=e.container,t.getTimeData(),t.buildUI(),t.rawGraduation(),t.rawTimeline(),t.onload(),t.event()}},t.fn.init.prototype=t.fn,t.fn.buildUI=function(){var e,t,i,n,a,r,l,o,s,u,c=this;i=$(c.container),i.find(".timeline").remove(),e=document.createElement("div"),e.className="timeline",t=document.createElement("div"),t.className="timeline-collspace timeline-collspace-top",t.onclick=function(){$(s).is(":visible")?c.hide():c.show()},u=document.createElement("div"),u.className="timeline-graph-time-label",e.appendChild(u),s=document.createElement("div"),s.className="timeline-graph-line-box",n=document.createElement("div"),n.className="timeline-graph-line clear",l=document.createElement("div"),l.className="timeline-graph-line-rule",n.appendChild(l),a=document.createElement("div"),a.className="timeline-graph-line-points",n.appendChild(a),o=document.createElement("div"),o.className="timeline-graph-labels",n.appendChild(o),r=document.createElement("div"),r.className="timeline-graph-line-graduations clear",n.appendChild(r),s.appendChild(n),e.appendChild(t),e.appendChild(s),i.append(e),c.mainElement=e,c.lineGraphContainer=n,c.lineGraphContainerRule=l,c.pointsContainer=a,c.graduationsContainer=r,c.collspaceElement=t,c.labelsContainer=o,c.lineGraphBoxContainer=s,c.timeLabelContainer=u,i.resize(function(){c.resize()})},t.fn.event=function(){var t=this;e.event.trigger(e.DEFINE_EVENT.TIMELINE_SHOW,{$container:t.mainElement,containerHeight:$(t.mainElement).outerHeight()})},t.fn.getTime=function(t){var i,n=this;return i=n.options.endtime-6e4*t,{label:e.utils.unixToDatetime(i).substr(11,5),time:i,point:t,isCurrPoint:t%n.options.range===0}},t.fn.getTimeData=function(){var t,i=this,n=0;if(t=e.api.queryEventPerfByCurrent(i.options.ids,9e6,30),e.utils.isTrueRet(t)){for(n=0;n<t.data.length;n++)t.data[n].time=5*(t.data[n].time+1);t.data.unshift({time:0,level:6,title:"实时"}),i.timeData=t.data}else i.timeData=[]},t.fn.hide=function(){var t,i=this;t=$(i.mainElement).outerHeight(),i.stopUpdateInterval(),i.collspaceElement.className="timeline-collspace timeline-collspace-top",$(i.lineGraphBoxContainer).hide(),$(i.lineGraphContainer).hide(),e.event.trigger(e.DEFINE_EVENT.TIMELINE_RESIZE,{oriHeight:t,height:$(i.mainElement).outerHeight()}),i.options.hide&&i.options.hide()},t.fn.remove=function(){var e=this;e.stopUpdateInterval(),$(e.mainElement).remove()},t.fn.onload=function(){var t,i=this;e.event.trigger(e.DEFINE_EVENT.TIMELINE_ONLOAD,{data:i.timeData[1].data}),i.options.onload&&i.options.onload(),$(window).resize(function(){t&&clearTimeout(t),t=setTimeout(function(){i.resize()},200)})},t.fn.rawGraduation=function(){var t,i,n,a,r=this,l=null,o=5,s=(new Date).getTime();for(r.nowTime=s,l=function(t){var i={},n=null,a=0;return 0===t?(i.reValue="实时",i.full="current"):(n=new Date(s-6e4*t),a=n.getMinutes(),i.reValue=[n.getHours(),a>=10?a:"0"+a].join(":"),i.full=e.utils.unixToDatetime(n.getTime())),i},t=function(e,t,i){var n,a,o,s=null,u=null;o=l(i),n=document.createElement("div"),n.className="timeline-graph-line-graduations-item",n.style.width=e+"px",n.style.left=e*(r.num-i)+"px",n.setAttribute("data-num",i),n.setAttribute("time",o.reValue),n.setAttribute("data-full",o.full),a=document.createElement("div"),a.className="timeline-graph-line-graduations-item-v",a.style.width=t+"px",n.appendChild(a),r.graduationsContainer.appendChild(n),r.graduationItems.push(n),2===t&&(u=document.createElement("div"),u.className="timeline-graph-line-graduations-label",u.setAttribute("data-num",i),u.innerHTML=o.reValue,s=$(n).position(),u.style.width=5*e+"px",u.style.left=s.left-2*e+"px",r.labelsContainer.appendChild(u),r.labelItems.push(u))},i=$(r.lineGraphContainer).width(),n=(i-r.graduationSpaceWidth)/r.num,r.graduationItemWidth=n,a=r.num;a>=0;a--)0===a||a%o===0?t(n,2,a):t(n,1,a)},t.fn.rawTimeline=function(){var t=null,i=null,n=this;t=function(t){var a,r=null,l=null;a=document.createElement("div"),a.className="timeline-graph-line-point",a.style.left=n.graduationItemWidth*(n.num-t.time)+"px",a.style.width=n.graduationItemWidth+"px",a.setAttribute("time",t.time),t.level&&(r=e.utils.getLevelColor(t.level),a.style.backgroundColor=r.bg),t.title&&(a.title=t.title),a.onclick=function(){var a;i&&$(i).removeClass("ok"),i=this,$(this).addClass("ok"),0===t.time?($(n.timeLabelContainer).show().html("实时"),a="current"):(l=$(n.graduationsContainer).find("*[data-num="+t.time+"]"),$(n.timeLabelContainer).show().html(l.attr("time")),a=l.attr("data-full")),e.event.trigger(e.DEFINE_EVENT.TIMELINE_POINT_CLICK,{time:a,data:t.data}),n.options.clickedPoint&&n.options.clickedPoint(t.data,t.time)},n.pointsContainer.appendChild(a),n.points.push(a)},$.each(n.timeData,function(){t(this)})},t.fn.remove=function(){var t,i=this;t=$(i.mainElement).outerHeight(),i.stopUpdateInterval(),$(i.mainElement).remove(),e.event.trigger(e.DEFINE_EVENT.TIMELINE_RESIZE,{oriHeight:t,height:0})},t.fn.resize=function(){var e,t=this,i=0;e=$(t.lineGraphContainer).width(),i=(e-t.graduationSpaceWidth)/t.num,t.graduationItemWidth=i,$.each(t.graduationItems,function(e){this.style.width=i+"px",this.style.left=i*e+"px"}),$.each(t.points,function(){var e;e=Number(this.getAttribute("time")),this.style.left=i*(t.num-e)+"px"}),$.each(t.labelItems,function(){var e,n,a=this.getAttribute("data-num");e=$(t.graduationsContainer).find("[data-num="+a+"]"),n=e.position(),this.style.width=5*i+"px",this.style.left=n.left-2*i+"px"})},t.fn.show=function(){var t,i=this;t=$(i.mainElement).outerHeight(),i.collspaceElement.className="timeline-collspace timeline-collspace-bottom",$(i.lineGraphBoxContainer).show(),$(i.lineGraphContainer).show(),e.event.trigger(e.DEFINE_EVENT.TIMELINE_RESIZE,{oriHeight:t,height:$(i.mainElement).outerHeight()}),i.updateInterval(),i.options.show&&i.options.show()},t.fn.stopUpdateInterval=function(){var e=this;window.clearInterval(e.oUpdateInterval),e.oUpdateInterval=null},t.fn.updateInterval=function(){var e=this;e.oUpdateInterval=window.setInterval(function(){$.each(e.points,function(){$(this).remove()}),e.getTimeData(),e.rawTimeline()},e.timeout)},e.Timeline=t}(nameSpace.reg("graph")),function(e,t,i){"use strict";t[i.BACKGROUND_IMG_SET]=function(){var t,i=this,n=null;t=document.createElement("input"),t.type="file",n=e.dialog(e.DEFINE_MSG.S12,t.outerHTML,function(t){var a=t.find("input[type=file]")[0];e.api.uploadImg(a,function(t){var a,r="";$(".modal-backdrop").remove(),e.utils.isTrueRet(t)?(r="../"+t.data,a=document.createElement("img"),a.src=r,a.onload=function(){var e;e=new mxImage(r,this.width,this.height),i.graph.setBackgroundImage(e),i.graph.view.validate(),n.removeElement()},a.onerror=function(){e.utils.alert(e.DEFINE_MSG.E4),n.removeElement()}):e.utils.alert(t.message)})})},t[i.BACKGROUND_IMG_RM]=function(){var e=this;e.graph.setBackgroundImage(null),e.graph.view.validate()},t[i.BACK_PARENT_VIEW]=function(){this.history&&this.history.back&&this.history.back()},t[i.CELL_DELETE]=function(e,t){var i;i=this.graph.getSelectionCells(),0===i.length&&i.push(t),this.graph.removeCells(i)},t[i.CELL_COPY]=function(){mxClipboard.copy(this.graph)},t[i.CELL_CUT]=function(){mxClipboard.cut(this.graph)},t[i.CELL_PASTE]=function(){mxClipboard.paste(this.graph)},t[i.CHANGE_IMAGE]=function(){var t,i=[],n=null,a=this;n=function(e,t){$.each(t,function(){var t,i="",n=!1,a=this;n=!1,t=a.getGeometry(),i=a.getStyle()||"",""!==i&&";"===i.charAt(i.length-1)&&(i=i.substring(0,i.length-2)),i=""===i?[]:i.split(";"),$.each(i,function(t){var a=this.split("=");return"image"===$.trim(a[0])&&a[1]?(a[1]=e,n=!0,i[t]=a.join("="),!0):void 0}),n||i.push(["shape=label","image="+e,"imageAlign=center","imageVerticalAlign=center","imageWidth="+t.width,"imageHeight="+t.height].join(";")),i=i.join(";"),a.setStyle(i)})},t=this.graph.getSelectionCells(),$.each(t,function(){this.vertex&&i.push(this)}),e.utils.selectIcon(function(e){n(e,i),a.graph.refresh()})},t[i.CI_CREATE]=function(t,i){var n,a,r,l=this;i.vertex&&i.value?(n=e.api.getCiCateByName(i.value),e.utils.isTrueRet(n)?(a=e.utils.render("share/attr.html",{list:n.data.attributes}),r=e.dialog(e.DEFINE_MSG.S13,a,function(t){var n,a=[],o={};t.find(".form-group input[name]").each(function(){var t,i,n;t=$(this).attr("name"),i=$(this).val().trim(),n="1"===$(this).attr("required"),o[t]=i,n&&!i&&a.push(t+"："+e.DEFINE_MSG.S14)}),0===a.length?(n=e.api.saveCi(i.value,o),e.utils.isTrueRet(n)?(r.hide(),i.setId([e.DEFINE_CI.GRAPH_PREFIX,n.data._neo4jid_].join("_")),i.setValue(n.data._name_),l.graph.refresh()):e.utils.alert(n.message)):e.utils.alert(a.join("\r\n"))})):e.utils.alert(n.message)):e.utils.alert(e.DEFINE_MSG.E5)},t[i.CI_DETAIL]=function(t,i){var n,a,r,l,o,s=[],u=0,c=this;if(l=function(e){var t;for(t=0;t<r.data.attributes.length;t++)if(r.data.attributes[0].name===e&&r.data.attributes[0].required)return!0;return!1},o=e.api.getCi(e.utils.getCiIdByCell(i)),r=e.api.getCiCateByName(o.data._categoryId_),e.utils.isTrueRet(o)&&e.utils.isTrueRet(r)){for(u in o.data)"_"!==u.substr(0,1)&&s.push({name:u,defaultVal:o.data[u],required:l(u),disabled:r.data.major.name===u});n=e.utils.render("share/attr",{list:s}),a=e.dialog(e.DEFINE_MSG.S13,n,function(t){var n,r=[],l={};t.find(".form-group input[name]").each(function(){var t,i,n;t=$(this).attr("name"),i=$(this).val().trim(),n="1"===$(this).attr("required"),l[t]=i,n&&!i&&r.push(t+"："+e.DEFINE_MSG.S14)}),0===r.length?(n=e.api.updateCi(i.id.split("_")[1],l),e.utils.isTrueRet(n)&&(a.hide(),i.setValue(n.data._name_),c.graph.refresh(i)),e.utils.alert(n.message)):e.utils.alert(r.join("\r\n"))})}else e.utils.alert(o.message)},t[i.CI_INFO]=function(n,a){var r=this;e.utils.isCiCell(a)&&e.utils.isCiHeader(a)&&(a=e.utils.getCiByCell(r.graph,a)),e.utils.isCiCell(a)?t[i.CI_DETAIL].apply(r,[n,a]):e.utils.isCiRelation(a)?t[i.CI_RELATION].apply(r,arguments):t[i.CI_CREATE].apply(r,[n,a])},t[i.CI_RELATION]=function(t,i){var n,a,r,l,o,s,u=[];if(l=i.id.split("_"),l.shift(),o=l.join("_"),s=e.api.getCiRelation(o),e.utils.isTrueRet(s)){for(a in s.data.relValue)"_"!==a.substr(0,1)&&u.push({name:a,defaultVal:s.data.relValue[a],required:a===e.DEFINE_CI.ATTR_REQUIRE_FIELD});n=e.utils.render("share/attr.html",{list:u}),r=e.dialog(e.DEFINE_CI.S13,n,function(t){var i=[],n=null,a={};t.find(".attr-edit input[name]").each(function(){var t,n,r;t=$(this).attr("name"),n=$(this).val().trim(),r="1"===$(this).attr("required"),a[t]=n,r&&!n&&i.push(t+"："+e.DEFINE_CI.S14)}),0===i.length?(n=e.api.updateCiRelation(o,a),e.utils.isTrueRet(n)&&r.hide(),e.utils.alert(n.message)):e.utils.alert(i.join("\r\n"))})}else e.utils.alert(s.message)},t[i.CI_RELATION_VIEW]=function(t,i){var n,a,r=this,l={},o={};e.utils.isCiCell(i)?(a=e.utils.getCiIdByCell(i),n=e.api.getViewByCiNeoIds(a),l.views=[],e.utils.isTrueRet(n)&&$.each(n.data[a],function(){var e=this;e._neo4jid_!==r.viewid&&(o[e._neo4jid_]=e,l.views.push(e))}),e.utils.render("utils/ciRelationView",l,function(t){var i;i=e.dialog(e.DEFINE_MSG.S29,t,function(){}),i.element.find("button").each(function(){$(this).click(function(){var t;t=o[$(this).attr("data-id")],r.history.push(r.nav?r.nav.name:r.viewname),r.viewid=t._neo4jid_,e.utils.openXml(r,t.xml),r.nav={id:e.utils.randstr(),name:t.name,xml:t.xml},i.hide()})})})):e.utils.alert(e.DEFINE_MSG.E24)},t[i.CI_RELATION_VIEW_TAB]=function(t,i){var n,a,r=this,l={};e.utils.isCiCell(i)?(a=e.utils.getCiIdByCell(i),n=e.api.getViewByCiNeoIds(a),l.views=[],e.utils.isTrueRet(n)&&$.each(n.data[a],function(){var e=this;e._neo4jid_!==r.viewid&&l.views.push(e)}),e.utils.render("utils/ciRelationView",l,function(t){var i;i=e.dialog(e.DEFINE_MSG.S29,t,function(){}),i.element.find("button").each(function(){$(this).click(function(){window.open("view.html?viewid="+$(this).attr("data-id")),i.hide()})})})):e.utils.alert(e.DEFINE_MSG.E24)},t[i.CI_VIEW_DETAIL]=function(t,i){var n,a,r,l=[],o=0;if(e.utils.isCiCell(i))if(r=e.api.getCi(e.utils.getCiIdByCell(i)),a=e.api.getCiCateByName(r.data._categoryId_),e.utils.isTrueRet(r)&&e.utils.isTrueRet(a)){for(o in r.data)"_"!==o.substr(0,1)&&l.push({name:o,defaultVal:r.data[o],required:o===e.DEFINE_CI.ATTR_REQUIRE_FIELD,disabled:a.data.major.name===o});n=e.utils.render("share/attr.html",{list:l}),e.dialog(e.DEFINE_MSG.S13,n,function(e,t){t.hide()})}else e.utils.alert(r.message);else e.utils.alert("错误：选择的对象不是一个CI！")},t[i.STROKE_COLOR]=function(){e.utils.colorDialog(this.graph,"strokeColor",i.STROKE_COLOR)},t[i.FONT_COLOR]=function(){e.utils.colorDialog(this.graph,"fontColor",i.FONT_COLOR)},t[i.FILL_COLOR]=function(){e.utils.colorDialog(this.graph,"fillColor",i.FILL_COLOR)},t[i.CONTAINER_FILTER_SET]=function(){e.utils.render("share/filterSet.html",null,function(t){e.dialog(e.DEFINE_MSG.S15,t)})},t[i.EDIT_URL]=function(){var t,i,n,a=this;t=a.graph.getSelectionCells(),n=a.graph.getLinkForCell(t[0],"link"),n=n?n:"",i=window.prompt(e.DEFINE_MSG.S10,n),i&&$.each(t,function(){a.graph.setLinkForCell(this,i)})},t[i.EXPORT_PNG]=function(){var t,i=this;t=e.utils.svgToExportFormat(i.graph),e.api.exportPng(null,null,t)},t[i.EXPORT_PDF]=function(){var t,i=this;t=e.utils.svgToExportFormat(i.graph),e.api.exportPdf(null,null,t)},t[i.EXPORT_XML]=function(){var t,i,n=this;i="mxGraph_"+Date.now()+".xml",t=e.utils.getXml(n),"function"==typeof Blob?saveAs(new Blob([t],{type:"text/plain;charset=utf-8"}),i):e.utils.alert(e.DEFINE_MSG.E6)},t[i.EXPORT_SVG]=function(){var t,i,n=this;i="mxGraph_"+Date.now()+".svg",t=e.utils.svgToExportFormat(n.graph),"function"==typeof Blob?saveAs(new Blob([t],{type:"text/plain;charset=utf-8"}),i):e.utils.alert(e.DEFINE_MSG.E6)},t[i.FONT_FAMILY]=function(){var t,i,n,a=this,r=[];r=a.graph.getSelectionCells(),r.length>=1&&(n=e.utils.getStyleForAttr(r[0],"fontFamily"),n=""!==n?n:"Georgia",i=e.utils.render("style/family.html",{family:n}),t=e.dialog(e.DEFINE_MSG.S16,i,function(){var e=$("#family").val();a.graph.setCellStyles("fontFamily",e,r),t.hide()}))},t[i.FONT_SIZE]=function(){var t,i,n,a,r,l,o=this,s=[];s=o.graph.getSelectionCells(),s.length>=1&&(n=e.utils.getStyleForAttr(s[0],"fontSize"),n=""!==n?window.parseInt(n,10):12,i=e.utils.render("style/fontsize.html",{size:n}),t=e.dialog(e.DEFINE_MSG.S17,i,function(){var e=l.val();o.graph.setCellStyles("fontSize",e,s),t.hide()}),a=t.element.find("#fontSizeExample"),r=t.element.find("#fontSizeSliderVal"),l=t.element.find("#fontSize"),l.slider(),l.on("slide",function(e){r.text(e.value),a.css("font-size",e.value+"px")}))},t[i.GRAPH_CLEAR]=function(){t[i.BACKGROUND_IMG_RM].apply(this),this.graph.removeCells(this.graph.getChildCells())},t[i.LAYOUT_H]=function(){var t=this;e.utils.executeLayout(t.graph,new mxHierarchicalLayout(t.graph,mxConstants.DIRECTION_WEST),!0,!0),t.graph.zoomToCenter()},t[i.LAYOUT_V]=function(){var t=this;e.utils.executeLayout(t.graph,new mxHierarchicalLayout(t.graph,mxConstants.DIRECTION_NORTH),!0,!0),t.graph.zoomToCenter()},t[i.LAYOUT_C]=function(){var t=this;e.utils.executeLayout(t.graph,new mxCircleLayout(t.graph),!0,!0),t.graph.zoomToCenter()},t[i.LAYOUT_O]=function(){var t=this;e.utils.executeLayout(t.graph,new mxFastOrganicLayout(t.graph),!0,!0),t.graph.zoomToCenter()},t[i.LAYOUT_L]=function(){var t=this;e.utils.executeLayout(t.graph,new mxParallelEdgeLayout(t.graph),!0,!0),t.graph.zoomToCenter()},t[i.LAYOUT_SV]=function(){var t=this;e.utils.executeLayout(t.graph,new mxStackLayout(t.graph,!0),!0,!0),t.graph.zoomToCenter()},t[i.LAYOUT_SH]=function(){var t=this;e.utils.executeLayout(t.graph,new mxStackLayout(t.graph,!1),!0,!0),t.graph.zoomToCenter()},t[i.MODULE_ORI]=function(){var t,i=this;t=i.graph.getDepCells(),$.each(t,function(){this.vertex&&!e.utils.isCiIn(this)&&(this.setStyle(i.graph.getOriStyle(this)),i.graph.refresh(this))})},t[i.MODULE_TAG]=function(){var t,i=this;t=i.graph.getDepCells(),$.each(t,function(){this.vertex&&!e.utils.isCiIn(this)&&(i.graph.setOriStyle(this,this.getStyle()),this.setStyle("whiteSpace=wrap;"),i.graph.refresh(this))})},t[i.OPACITY]=function(){var t=this;e.utils.render("style/opacity.html",null,function(i){var n,a=null,r=t.graph.getSelectionCells();n=e.utils.getStyleForAttr(r[0],"opacity"),n=/\d+/.test(n)?Number(n):100,e.dialog(e.DEFINE_MSG.S18,i,function(e,i){t.graph.setCellStyles(mxConstants.STYLE_OPACITY,a.val(),r),i.hide()}),a=$("#opacityInput"),$("#spinner4").spinner({value:n,step:5,min:0,max:100})})},t[i.OPEN_CHILD]=function(t,i){var n,a,r,l,o,s,u,c,d,h,f,p,g,m,v,E=this;if(v="全部",o=function(){var e=[];return h.find(".selected").each(function(){e.push($(this).attr("rsname"))}),e.length>=1?e:null},s=function(){var e={},t=!1;return d.find(">div[ciname]").each(function(){var i,n,a=$(this).attr("ciname");t=!0,i=$(this).find("input[type=text]").val(),i=""===i?"*":i,n=$(this).find("select").val(),n=n===v?"*":n,e[a]={},e[a][n]=i}),t?JSON.stringify(e):null},u=function(){var e;return e=r.element.find("select[name=depth-down]").val(),e===v?-1:e},c=function(){var e;return e=r.element.find("select[name=depth-up]").val(),e===v?null:e},l=function(t,i){var a,r,l,o,s,u;if(0===d.find(">div[ciname="+i+"]").length)if(a=n.render("share/ciitem.html",{ciname:i,treeid:t}),d.append(a),u=d.find(">div:last"),o=u.find("select"),s=e.api.getCiCateByName(i),n.isTrueRet(s)&&Array.isArray(s.data.attributes))for(r=0;r<s.data.attributes.length;r++)l=document.createElement("option"),l.innerHTML=s.data.attributes[r].name,o.append(l);else n.alert(s.message);else n.alert(e.DEFINE_MSG.E7)},g=function(e){var t=null;return t=function(e){$.each(e,function(){var e=this;e.text=e.name,delete e.id,e.childrenNode&&(e.children=e.childrenNode,t(e.childrenNode))})},t(e),e},n=e.utils,f=e.api.getCiCate(),!n.isTrueRet(f))throw e.utils.alert(f.message),new Error(f.message);m=g(f.data),p=e.api.getRelationStructure(),a=n.render("share/base.html",{rslist:p.data}),r=e.dialog(e.DEFINE_MSG.S19,a,function(){var t,n,a;t=o(),n=s(),a={down:u(),up:c()},e.event.trigger(e.DEFINE_EVENT.OPEN_CHILD,{cell:i,id:e.utils.getCiIdByCell(i),rs:t,term:n,dir:a,graph:E.graph}),r.hide()}),$("#myCateTree").jstree({core:{data:m},plugins:["checkbox","crrm","state"]}).on("changed.jstree",function(){var e=$("#myCateTree").jstree(!0),t=e.get_selected();d.find("div[ciname]").each(function(){var e=$(this).attr("treeid");-1===$.inArray(e,t)&&$(this).remove()}),$.each(t,function(){0===d.find("div[treeid="+this+"]").length&&l(this,e.get_node(this).text)})}),d=$("#addCiList"),h=$("#tab_8_3"),h.find("button").each(function(){$(this).click(function(){$(this).hasClass("selected")?($(this).html(e.DEFINE_MSG.S20),$(this).removeClass("selected"),$(this).removeClass("btn-danger"),$(this).addClass("btn-success")):($(this).html(e.DEFINE_MSG.S21),$(this).addClass("selected"),$(this).addClass("btn-danger"),$(this).removeClass("btn-success"))})})},t[i.OPEN_CHILD_NEW_WINDOW]=function(t,i){var n=[];e.utils.isCiCell(i)?(n=i.id.split("_"),window.open([e.DEFINE_CHILD.PAGE_NAME,"?level="+e.DEFINE_CHILD.DEFAULT_LEVEL,"&type="+e.DEFINE_CHILD.DEFAULT_TYPE,"&id="+n[n.length-1]].join(""))):e.utils.alert(e.DEFINE_MSG.E8)},t[i.OPEN_LOCAL_XML_FILE]=function(){var t,i,n=this;"function"==typeof FileReader?(t=e.utils.render("share/openXml.html"),i=e.dialog(e.DEFINE_MSG.S22,t,function(t){var a,r=null;a=t.find("input[name=xml]"),""===a.val()?e.utils.alert(e.DEFINE_MSG.E9):"xml"!==a.val().split(".").pop()?e.utils.alert(e.DEFINE_MSG.E10):(r=t.find("form")[0],function(t){var a=new FileReader;a.onload=function(t){try{e.utils.openXml(n,t.target.result)}catch(t){e.utils.alert(t)}i.hide()},a.onerror=function(t){e.utils.alert(t)},a.readAsText(t)}(r.xml.files[0]))})):e.utils.alert(e.DEFINE_MSG.E3)},t[i.OPEN_URL]=function(e,t){var i=this.graph,n=i.getLinkForCell(t,"link");n&&window.open(n)},t[i.RELATION_CREATE]=function(t,i){var n,a,r=this,l=[];a=function(t){var n=null,a=null;n=e.dialog(e.DEFINE_MSG.S23,"",function(){var t,l;t=a(),l=e.api.saveCiRelation(e.utils.getCiIdByCell(i.source),e.utils.getCiIdByCell(i.target),t.type,t.attr),e.utils.isTrueRet(l)&&(i.setValue(t.type),i.setId(["relation",e.utils.getCiIdByCell(i.source),t.type,e.utils.getCiIdByCell(i.target)].join("_")),n.hide(),r.graph.refresh(i)),e.utils.alert(l.message)}),a=e.utils.relationDialog(n.element,t)},i.isEdge()?(e.utils.isCiCell(i.source)||l.push(e.DEFINE_MSG.FE1(i.source.value)),e.utils.isCiCell(i.target)||l.push(e.DEFINE_MSG.FE1(i.target.value)),0===l.length?(n=e.api.getRelation(),e.utils.isTrueRet(n)?a(n.data):e.utils.alert(n.message)):e.utils.alert(l.join("\r\n"))):e.utils.alert(e.DEFINE_MSG.E11)},t[i.SEARCH_NODE]=function(){var t,i=this,n=e.utils.getVisibleModuleObj(),a=function(){var a,r=$.trim($("#searchNode").val());r?(n.search||(n.search=e.Search({graph:i.graph})),n.search.cellDelHighlighter(),a=n.search.soCell(r),a.vertex.length>=1?(n.search.cellAddHighlighter(a),t.hide()):e.utils.alert(e.DEFINE_MSG.F2(r))):e.utils.alert(e.DEFINE_MSG.E12)};e.utils.render("share/searchNode.html",null,function(i){t=e.dialog(e.DEFINE_MSG.S24,i,a),t.element.find("form").submit(function(e){e.preventDefault(),a()})})},t[i.SEARCH_PATH]=function(){var t,i=this,n=e.utils.getVisibleModuleObj(),a=function(){var a,r,l,o=$.trim($("#startNode").val()),s=$.trim($("#endNode").val());o&&s?(n.search||(n.search=e.Search({graph:i.graph})),n.search.cellDelHighlighter(),a=n.search.soCell(o),r=n.search.soCell(s),a.vertex.length>=1&&r.vertex.length>=1?(l=n.search.soPath(a.vertex[0],r.vertex[0]),n.search.info(l),n.search.cellAddHighlighter(l),t.hide()):e.utils.alert(e.DEFINE_MSG.F3(o,s))):e.utils.alert(e.DEFINE_MSG.E12)};e.utils.render("share/searchPath.html",null,function(i){t=e.dialog(e.DEFINE_MSG.S25,i,a),t.element.find("#searchPathBtn").click(a),t.element.find("form").submit(function(e){e.preventDefault(),a()})})},t[i.SEARCH_CLEAR]=function(){var t=e.utils.getVisibleModuleObj();t.search&&t.search.cellDelHighlighter&&(t.search.cellDelHighlighter(),t.search.removeInfo())},t[i.SHADOW]=function(){var t,i,n=this;t=n.graph.getSelectionCells(),i=e.utils.getStyleForAttr(t[0],"shadow"),e.utils.render("style/shadow.html",{isOpen:"1"===i},function(a){e.dialog(e.DEFINE_MSG.S26,a,function(e,a){i=e.find("#shadowControl").val(),n.graph.setCellStyles(mxConstants.STYLE_SHADOW,i,t),a.hide()})})},t[i.STROKE_WIDTH]=function(){var t,i,n=this;t=window.prompt(e.DEFINE_MSG.S4,""),i=n.graph.getSelectionCells(),n.graph.setCellStyles(mxConstants.STYLE_STROKEWIDTH,t,i)},t[i.THRESHOLD_UPDATE]=function(){var t,i,n=[];i={id:15,view:"其它",threshold1:378,threshold2:98,threshold3:76,threshold4:129,threshold5:34,kpiClass:"hello",kpi:"hello",instance:"hello",ci:"39, 58, 28"};for(t in i)n.push({name:t,defaultVal:i[t],update:t.indexOf("threshold")>=0});e.utils.render("share/threshold.html",{list:n},function(t){e.dialog(e.DEFINE_MSG.S27,t)})},t[i.VIEW_CLONE_TAB]=function(){this.viewid&&window.open("view.html?viewid="+this.viewid)},t[i.VIEW_NEW_WINDOW]=function(){e.utils.goMonitor(this)},t[i.VIEW_OPEN]=function(){var t=this;e.utils.selectView(function(i){var n;n=e.api.getView(i),e.utils.isTrueRet(n)?(e.utils.openXml(t,n.data.xml),e.event.trigger(e.DEFINE_EVENT.VIEW_OPEN,{graph:t.graph,viewid:n.data._neo4jid_,viewname:n.data.name})):e.utils.alert(n.message)})},t[i.VIEW_RELATION_ADD]=function(t,i){var n=this;e.utils.selectViews(function(t){$.each(t,function(){e.utils.setViewForCell(n.graph,i,this.viewname,this.viewid)}),e.utils.render("share/openViewPath.html",null,function(t){var a=e.dialog(e.DEFINE_MSG.S28,t,function(e,t){var a=e.find("input[name=path]:checked").val();n.graph.setCellAttr(i,"openViewPath",a),t.hide()});a.element.find(".radio-list input[type=radio]").change(function(){var e=$(this).closest("label");e.parents().find(".checked").removeClass("checked"),$(this).is(":checked")?e.find(".radio > span").addClass("checked"):e.find(".radio > span").removeClass("checked")})})})},t[i.VIEW_RELATION_OPEN]=function(t,i){var n,a=this;n=e.DEFINE_MSG.S29,e.utils.selectViewForCell(a,i,n,function(t){var i;i=e.api.getView(t),e.utils.isTrueRet(i)?(a.history.push(a.nav?a.nav.name:a.viewname),a.viewid=i.data._neo4jid_,a.nav={id:e.utils.randstr(),name:i.data.name,xml:i.data.xml},e.utils.openXml(a,i.data.xml)):e.utils.alert(i.message)})},t[i.VIEW_RELATION_RM]=function(t,i){var n,a=this;n=e.DEFINE_MSG.S30,e.utils.selectViewForCell(a,i,n,function(t,n){e.utils.delViewForCell(a.graph,i,n,t)})},t[i.VIEW_SAVE]=function(){var t,i=this,n=null,a=null,r=!1,l=null,o=e.utils.isAdmin(),s=i.graph;s.clearSelection(),e.dialog(e.DEFINE_MSG.S31,e.utils.render("view/save",{isAdmin:o}),function(t,a){var o,u,c,d,h,f=[];r?(u=$("#viewSaveName").val(),c=$("#viewSaveDesc").val(),u?(d=e.utils.getXml(i),o=JSON.stringify(i.graph.getJson()),f=e.utils.getGraphCiList(s),h=i.graph.getSvg(),n=e.api.saveView(r,u,d,h,o,l,c,f),e.utils.alert(n.message),e.utils.isTrueRet(n)&&(e.event.trigger(e.DEFINE_EVENT.VIEW_POST,{data:n.data,viewid:n.data._neo4jid_,viewname:n.data.name,graph:i.graph}),a.hide())):e.utils.alert(e.DEFINE_MSG.E13)):e.utils.alert(e.DEFINE_MSG.E14)}),a=function(t,i,n){var a=[];$.each(i,function(){"undefined"==typeof this.view&&a.push(this)}),t.jstree({core:{data:a,check_callback:!0}}).bind("select_node.jstree",function(e,t){r=t.node.id,l=n}),e.utils.jstreeEvent(t)},t=function(){a($("#privateTab").find(".tree-main"),e.utils.getTreeDataPri(),"private"),o&&a($("#publicTab").find(".tree-main"),e.utils.getTreeDataPub(),"public")},t(),$("#publicTab").find(".create-fold-btn").click(e.utils.createFoldPublic),$("#privateTab").find(".create-fold-btn").click(e.utils.createFoldPrivate)},t[i.VIEW_UPDATE]=function(){var t,i,n,a=this,r=a.graph;r.clearSelection(),a.viewid?a.isFromPub&&e.utils.isAdmin()||!a.isFromPub?(t=e.api.getView(a.viewid),e.utils.isTrueRet(t)?(i=e.utils.render("view/update",{desc:t.data.description,viewid:a.viewid,viewname:t.data.name,isPrivate:"private"===t.data.open}),n=e.dialog(e.DEFINE_MSG.S32,i,function(){var i,l,o,s,u,c,d;s=t.data.name,u=$("#viewUpdateDesc").val(),i=JSON.stringify(a.graph.getJson()),c=e.utils.getXml(a),l=e.utils.getGraphCiList(r),d=a.graph.getSvg(),o=e.api.updateView(a.viewid,s,c,d,i,t.data.open,u,l),e.utils.isTrueRet(o)&&n.hide(),e.utils.alert(o.message)})):e.utils.alert(t.message)):e.utils.alert(e.DEFINE_MSG.E15):e.utils.alert(e.DEFINE_MSG.E16)},t[i.VIEW_URL]=function(){var t,i,n;this.viewid?(t=window.location.pathname.split("/"),t.pop(),t.push("tree.html"),i="/"+t.join("/"),n=["http://",window.location.host,i.substr(1),"?viewid="+encodeURIComponent(this.viewid)].join(""),e.utils.render("share/viewUrl",{url:n},function(t){e.dialog("URL",t,function(){})})):e.utils.alert(e.DEFINE_MSG.E16)},t[i.ZOOMACTUAL]=function(){this.graph.zoomActual()},t[i.ZOOMOUT]=function(){this.graph.zoomOut()},t[i.ZOOMIN]=function(){this.graph.zoomIn()},t[i.ZOOMFIT]=function(){this.graph.fit()}}(nameSpace.reg("graph"),nameSpace.reg("graph.contextMenuLibs"),nameSpace.reg("graph.DEFINE_MENU")),function(e,t){"use strict";t.templateCache={},t.history={},t.alert=function(e){$.messager.alert(e),$(".dialog").find(".btn-default").each(function(){""===this.innerHTML&&$(this).remove()})},t.updateCacheCiLib=function(i,n,a){$.each(i,function(){var i,a=this;(!e.CACHE_CI[a]||e.CACHE_CI[a]&&n)&&(i=e.api.getCi(a),t.isTrueRet(i)?e.CACHE_CI[a]=i.data:console.error("错误：获取CI信息出错！"))}),"function"==typeof a&&a(e.CACHE_CI)},t.getCacheCi=function(t){return e.CACHE_CI[t]},t.getCacheCis=function(e){var i=[];return $.each(e,function(){var e=this;i.push(t.getCacheCi(e))}),i},t.isCiCell=function(t){return"object"==typeof t&&"string"==typeof t.id&&0===t.id.indexOf(e.DEFINE_CI.GRAPH_PREFIX)},t.isCiHeader=function(t){return t.id.indexOf(e.DEFINE_CI.GRAPH_PREFIX_HEADER)>=0},t.isCiRelation=function(t){return t.id.indexOf(e.DEFINE_CI.GRAPH_PREFIX_RELATION)>=0},t.isCiIn=function(t){return t.id.indexOf(e.DEFINE_CI.GRAPH_PREFIX_IN)>=0},t.getCiIdByCell=function(e){return e.id.split("_").pop()},t.getCiByCell=function(i,n){var a;return(t.isCiHeader(n)||t.isCiIn(n))&&(a=i.getCellByID(e.DEFINE_CI.GRAPH_PREFIX+t.getCiIdByCell(n))),a},t.ciClone=function(i,n){var a,r,l,o,s;a=e.api.getCi(t.getCiIdByCell(i)),t.isTrueRet(a)&&(l=e.api.getCiCateByName(a.data._categoryId_),t.isTrueRet(l)?(o=t.clone(a.data),s={},$.each(o,function(e){"_"!==e[0]&&(s[e]=this)}),s[l.data.major.name]="[复制("+e.utils.randstr()+")]"+s[l.data.major.name],r=e.api.saveCi(a.data._categoryId_,s),t.isTrueRet(r)?(n.setValue(r.data._name_),n.setId([e.DEFINE_CI.GRAPH_PREFIX,r.data._neo4jid_].join(""))):n.setValue(a.data._categoryId_)):n.setValue(a.data._categoryId_))},t.clearEdgePoints=function(e){$.each(e,function(){this.geometry.points=[]})},t.clearEdgeStyle=function(e,t){var i;i=[mxConstants.STYLE_EDGE,mxConstants.STYLE_ELBOW,"noEdgeStyle","orthogonal"],$.each(i,function(){e.setCellStyles(this,null,t)})},t.clone=function(e){var t=function(e){var i;if(null===e||"object"!=typeof e)return e;if(e instanceof Date)return i=new Date,i.setTime(e.getTime()),i;if(e instanceof Array){i=[];for(var n=0,a=e.length;a>n;n++)i[n]=t(e[n]);return i}if(e instanceof Object){i={};for(var r in e)e.hasOwnProperty(r)&&(i[r]=t(e[r]));return i}throw new Error("Unable to copy obj!.")};return t(e)},t.colorDialog=function(i,n,a){var r=null,l=[],o="",s="";l=i.getSelectionCells(),l.length>=1&&(o=t.getStyleForAttr(l[0],n),t.render("style/color",{title:a,color:o},function(t){r=e.dialog(a,t,function(e,t){var a="none";"color"===e.find("input[name=selectType]:checked").val()&&(a=s.spectrum("get").toHexString()),i.setCellStyles(n,a,l),t.hide()}),r.element.find("input[type=radio]").change(function(){var e=$(this).closest("label");e.parents(".form-body").find(".checked").removeClass("checked"),$(this).is(":checked")?e.find(".radio > span").addClass("checked"):e.find(".radio > span").removeClass("checked")}),s=r.element.find("#selectColor"),s.spectrum({clickoutFiresChange:!0,showInitial:!0,showInput:!0,showPalette:!0,showButtons:!0,palette:[["#000","#444","#666","#999","#ccc","#eee","#f3f3f3","#fff"],["#f00","#f90","#ff0","#0f0","#0ff","#00f","#90f","#f0f"],["#f4cccc","#fce5cd","#fff2cc","#d9ead3","#d0e0e3","#cfe2f3","#d9d2e9","#ead1dc"],["#ea9999","#f9cb9c","#ffe599","#b6d7a8","#a2c4c9","#9fc5e8","#b4a7d6","#d5a6bd"],["#e06666","#f6b26b","#ffd966","#93c47d","#76a5af","#6fa8dc","#8e7cc3","#c27ba0"],["#c00","#e69138","#f1c232","#6aa84f","#45818e","#3d85c6","#674ea7","#a64d79"],["#900","#b45f06","#bf9000","#38761d","#134f5c","#0b5394","#351c75","#741b47"],["#600","#783f04","#7f6000","#274e13","#0c343d","#073763","#20124d","#4c1130"]]}),r.element.find("input[name=selectType]").click(function(){"none"===$(this).val()?s.attr("disabled",!0):s.removeAttr("disabled")})}))},t.comArr=function(e){var t={},i=null;return i={_id_:!0,ID:!0,_categoryId_:!0,_neo4jid_:!0,_category_:!0,icon:!0,index:!0},$.each(e,function(){var e=[],n=0,a=this;if(!t[a._category_]){t[a._category_]={columns:[],key:[],name:a._category_,rows:[]},t[a._category_].columns.push("分类"),t[a._category_].columns.push("名称"),t[a._category_].key.push("_category_"),t[a._category_].key.push("_name_");for(n in a)i[n]||(t[a._category_].key.push(n),t[a._category_].columns.push(n))}$.each(t[a._category_].key,function(){e.push(a[this])}),t[a._category_].rows.push({list:e,id:a._neo4jid_})}),t},t.confirm=function(e,t){$.messager.confirm("重要提示",e,t),$(".dialog").find(".btn-default").each(function(){""===this.innerHTML&&$(this).remove()})},t.createFold=function(i,n,a,r,l){var o,s=null,u=[],c=null,d=" / ",h=null,f=null;o=e.utils.render("view/addFold.html"),e.dialog("创建目录",o,function(n,a){var o,s,u,c,d=null,p=null;o=$.trim(f.val()),s="0"===h.val()?null:h.val(),u=s?s:"#",""!==o?(p=r(o,s),t.isTrueRet(p)?(d={text:p.data.name,id:p.data.id,icon:"fa fa-folder"},a.hide(),c={foldName:p.data.name,id:p.data.id,pid:s,pos:u,jstreeNode:d},e.event.trigger(e.DEFINE_EVENT.VIEW_FOLD_POST,c),e.event.trigger(l,c),"function"==typeof i&&i(u,d)):t.alert(p.message)):t.alert("错误：请输入创建目录名称")}),h=$("#foldparent"),f=$("#foldname"),c=function(e){return u.length>=1?[u.join(d),e].join(d):e},(s=function(e){$.each(e,function(){
var e=document.createElement("option"),t=this;e.value=this.id,e.innerHTML=c(t.text),e.selected=n===t.id,h.append(e),t.children&&(u.push(t.text),s(t.children),u.pop())})})(a)},t.createFoldPublic=function(i,n){var a,r=[];a=e.api.getPubViewCate(),t.isTrueRet(a)?(r.push({text:"根",id:0,children:a.data}),t.createFold(i,n,r,e.api.pubViewCateCreate,e.DEFINE_EVENT.VIEW_FOLD_POST_PUB)):t.alert(a.message)},t.createFoldPrivate=function(i,n){var a=e.api.getPriViewCate();e.utils.isTrueRet(a)?t.createFold(i,n,[a.data],e.api.priViewCateCreate,e.DEFINE_EVENT.VIEW_FOLD_POST_PRI):t.alert(a.message)},t.createWebGl=function(t){var i,n,a,r=document.createElement("div");n=t.container?t.container:document.body,r.style.cssText=["width: 100%","height: 100%","position: absolute","left: 0","top: 0","z-index: 99999"].join(";"),t.hideBtn||(a=document.createElement("div"),a.style.cssText=["width: 30px","height: 30px","position: absolute","background: #999","cursor: pointer","right: 0","top: 0","z-index: 99"].join(";"),$(a).click(function(){i.close(),$(r).remove(),e.event.trigger(e.DEFINE_EVENT.WEBGL_CLOSE,{universe:i}),i=null}),$(r).append(a)),$(n).append(r),i=new e.Universe($(r)),$.each(t.layers,function(){i.addLayer(this)}),t.showTimeline&&window.setTimeout(function(){t.relation&&i.drawLayerLine(t.relation),i.showTimeline()},2e3),console.log(i)},t.datetimeToUnix=function(e){var t=e.replace(/:/g,"-");t=t.replace(/ /g,"-");var i=t.split("-"),n=new Date(Date.UTC(i[0],i[1]-1,i[2],i[3]-8,i[4],i[5]));return parseInt(n.getTime()/1e3)},t.escapeRegExp=function(e){return e.replace(/([.*+?^=!:${}()|\[\]\/\\])/g,"\\$1")},t.replaceAll=function(e,i,n){return e.replace(new RegExp(t.escapeRegExp(i),"g"),n)},t.executeLayout=function(e,t,i){var n;n=e.getChildVertices(),e.getModel().beginUpdate();try{t.execute(e.getDefaultParent(),n)}catch(a){throw a}finally{if(i&&navigator.userAgent.indexOf("Camino")<0){var r=new mxMorphing(e);r.addListener(mxEvent.DONE,mxUtils.bind(this,function(){e.getModel().endUpdate()})),r.startAnimation()}else e.getModel().endUpdate()}},t.format1=function(e){var t,i,n=0,a=[],r=[];for(i={},a.push(e.head),t=0;t<e.row.length;t++){for(r=[],n=0;n<e.head.length;n++)r.push(i[e.head[n]]||"undefined"!=typeof e.row[t][e.head[n]]?i[e.head[n]]?i[e.head[n]](e.row[t],e.row[t][e.head[n]]):e.row[t][e.head[n]]:"");a.push(r)}return a},t.format2=function(e){var i,n,a=0,r=[],l=[];for(n={"级别":function(e,i){var n;return n=t.getLevelColor(Number(i)),t.getSpan(i,n.bg,n.fc)},TICKETID:function(e,t){var i;return i=document.createElement("a"),i.href=["http://w3.huawei.com/sm/index.do?ctx=docEngine&file=probsummary&query=number%3D%22",t,"%22&action=&title=IM&queryHash=2ba06af9"].join(""),i.target="_blank",i.innerHTML=t,i.outerHTML}},r.push(e.head),i=0;i<e.row.length;i++){for(l=[],a=0;a<e.head.length;a++)l.push("undefined"==typeof e.row[i][e.head[a]]?"":n[e.head[a]]||"undefined"!=typeof e.row[i][e.head[a]]?n[e.head[a]]?n[e.head[a]](e.row[i],e.row[i][e.head[a]]):e.row[i][e.head[a]]:"");r.push(l)}return r},t.getCellValue=function(e,t){return t?"object"==typeof t.value?e.getCellAttr(t,"label"):t.value:""},t.getGraphCiIds=function(e){var i,n=[];return i=e.getDepCells(),$.each(i,function(){t.isCiCell(this)&&n.push(t.getCiIdByCell(this))}),n},t.getGraphCiList=function(e){return t.getGraphCiIds(e)},t.getLevelColor=function(e){var t;switch(e){case 1:t={bg:"#FD0004",fc:"#FFFFFF"};break;case 2:t={bg:"#FFC100",fc:"#FFFFFF"};break;case 3:t={bg:"#FF8201",fc:"#000000"};break;case 4:t={bg:"#03B0ED",fc:"#FFFFFF"};break;default:t={bg:"#94D04A",fc:"#FFFFFF"}}return t},t.getSpan=function(e,t,i){var n;return n=document.createElement("span"),n.innerHTML=e,n.style.cssText=["display: block","width: 100%","height: 100%","background: "+t,"color: "+i].join(";"),n.outerHTML},t.getStyleForAttr=function(e,t){var i="",n="";return e.style&&""!==e.style?(i=e.style.split(";"),$.each(i,function(){return this.indexOf(t)>=0?(n=this.split("=")[1],!1):void 0})):n="",n},t.getTreeDataPub=function(){var i;return i=e.api.getPubViewCateByTree(),t.isTrueRet(i)?t.formatTreeData(i.data):[]},t.getTreeDataPri=function(){var i,n=null;return i=e.api.getPriViewCateByTree(),t.isTrueRet(i)?(n=t.formatTreeData(i.data),$.each(n,function(){var e=this;"#"===e.parent&&(e.state={opened:!0})}),n):[]},t.formatTreeData=function(e){return $.each(e,function(){var e=this;e.icon="string"==typeof e.view?"fa fa-file-image-o":"fa fa-folder"}),e},t.getVisibleModuleObj=function(){return e.openChild},t.getXml=function(e){var t,i;return t=e.getGraphXml(),i=e.graph.getBackgroundImage(),i&&(t.setAttribute("background-url",i.src),t.setAttribute("background-width",i.width),t.setAttribute("background-height",i.height)),mxUtils.getXml(t)},t.goMonitor=function(i){var n;i.viewid?(n=["view.html","?viewid="+encodeURIComponent(i.viewid)].join(""),window.open(n)):t.alert(e.DEFINE_MSG.E21)},t.graphNav=function(e){var i,n,a=[];n=function(e){var t,i;for(t=0;t<a.length;t++)if(a[t].id===e){i=a[t];break}return i},i=e.graph.container,$(".graphNav").remove(),$.each(e.history.list,function(){a.push(this)}),a.push(e.nav),t.render("utils/graphNav",{list:a},function(r){$(i).append(r),$(i).find(".graphNav").find("i:last").remove(),$(i).find(".graphNav").find("a").each(function(){$(this).click(function(){var r,l;for(r=n($(this).attr("data-id")),l=0;l<a.length-1;l++)if(a[l].id===r.id){a.splice(l+1,1e4),$(i).find(".graphNav").find("span:gt("+l+")").remove(),$(i).find(".graphNav").find("i:last").remove(),e.viewid=r.viewid,e.nav=r,e.history.list.splice(l,1e4),t.openXml(e,r.xml);break}})})})},t.graphStopDbClick=function(e){e.dblClick=function(e,t){var i=new mxEventObject(mxEvent.DOUBLE_CLICK,"event",e,"cell",t);this.fireEvent(i),!this.isEnabled()||mxEvent.isConsumed(e)||i.isConsumed()||(mxUtils.alert("Hello, World!"),i.consume())}},t.initUrlView=function(t,i){var n,a=null;n=decodeURIComponent(urlParams.viewid),"undefined"!==n&&(a=e.api.getView(n),e.utils.isTrueRet(a)?(e.utils.openXml(t,a.data.xml),"function"==typeof i&&i(n,a.data)):e.utils.alert(a.message))},t.isAdmin=function(){var i=!0;return function(){var n=null;return"boolean"==typeof i?i:(n=e.api.getUserFunc(),t.isTrueRet(n)?i=$.inArray("视图管理",n.data)>=0?!0:!1:!1)}}(),t.getAllowMenu=function(){return["搜索","在线绘图","发布预览","后台管理"]},t.isContainer=function(e){return e.vertex&&"string"==typeof e.style&&e.style.indexOf("swimlane")>=0},t.isIE=function(e,t){var i,n;return i=$('<div style="display:none;"/>').appendTo($("body")),i.html("<!--[if "+(t||"")+" IE "+(e||"")+"]><a>&nbsp;</a><![endif]-->"),n=i.find("a").length,i.remove(),n},t.isSupportWebGL=function(){var e=document.createElement("canvas"),t=!1;try{t=!!e.getContext("webgl")||!!e.getContext("experimental-webgl")}catch(i){}return $(e).remove(),e=null,function(){return t}}(),t.isTrueRet=function(e){return!!e.success},t.jstreeEvent=function(e){e.on("open_node.jstree",function(t,i){var n=e.jstree(!0);n.set_icon([i.node.id],"fa fa-folder-open")}).on("close_node.jstree",function(t,i){var n=e.jstree(!0);n.set_icon([i.node.id],"fa fa-folder")}).on("select_node.jstree",function(e,t){})},t.isLight=function(t){return"object"==typeof t&&"string"==typeof t.id&&0===t.id.indexOf(e.DEFINE_LIGHT.GRAPH_PREFIX)},t.openChild=function(i,n,a,r,l,o){var s,u,c,d,h=null,f=null,p=null,g=null,m=!0,v=0,E=0,C=[],_=null;if(u=i.id.split("_")[0],s=e.api.getCiRelationById(n,a,r,l),d=function(e,t){var i=0,n=[];if(e&&t&&Array.isArray(e.edges))for(i=0;i<e.edges.length;i++)(e.edges[i].source.id===t.id||e.edges[i].target.id===t.id)&&n.push(e.edges[i]);o.removeCells(n)},c=function(t,i,n,a,r,l,o){var s,u,c,d,h;return h=e.ICO_LIB_VIEW[n],s=e.DEFINE_CONFIG_INFO.DRAG_WIDTH,u=e.DEFINE_CONFIG_INFO.DRAG_HEIGHT,c="image;image="+h,d=t.insertVertex(i,"ci_"+a,r,l,o,s,u,c)},e.utils.isTrueRet(s)){s=s.data,h=o.getDefaultParent(),_=o.getModel(),_.beginUpdate();try{for(v=0;v<s.node.length;v++)o.getCellByID([u,s.node[v]._neo4jid_].join("_"))||c(o,h,s.node[v]._categoryId_,s.node[v]._neo4jid_,s.node[v]._name_,0,0),C.push(s.node[v]._neo4jid_);for(E=0;E<s.relation.length;E++)f=s.relation[E].split("_"),p=o.getCellByID([u,f[0]].join("_")),g=o.getCellByID([u,f[2]].join("_")),p&&g&&d(p,g);for(E=0;E<s.relation.length;E++)f=s.relation[E].split("_"),p=o.getCellByID([u,f[0]].join("_")),g=o.getCellByID([u,f[2]].join("_")),p&&g&&(o.insertEdge(h,["relation",s.relation[E]].join("_"),f[1],p,g),m=!0)}finally{_.endUpdate()}m&&(t.executeLayout(o,new mxHierarchicalLayout(o,mxConstants.DIRECTION_WEST),!0,!0),o.refresh(),o.zoomToCenter(),o.clearSelection())}else e.utils.alert(s.message)},t.openLink=function(e,i,n){n=n?n:"",$(".iframe").remove(),t.render("share/iframe.html",{url:i,title:n},function(t){$(e).append(t),$(".iframe").find(".back-title").click(function(){$(".iframe").remove()})})},t.openXml=function(i,n){var a,r="",l=0,o=0,s=null,u=null;if(a=mxUtils.parseXml(n),"parsererror"===a.documentElement.nodeName)throw t.alert("错误：解析XML文档错误，可能XML文档损坏！"),new Error("错误：解析XML文档错误，可能XML文档损坏！");i.graph.setBackgroundImage(null),u=a.documentElement,i.graph.model.clear(),i.setGraphXml(u),i.graph.zoomActual(),i.graph.view.setTranslate(0,0),i.graph.zoomToCenter(),r=u.getAttribute("background-url"),l=u.getAttribute("background-width"),o=u.getAttribute("background-height"),r&&l&&o&&(s=new mxImage(r,l,o),i.graph.setBackgroundImage(s),i.graph.view.validate()),e.event.trigger(e.DEFINE_EVENT.GRAPH_OPEN_XML,{editor:i})},t.showCiAlarmPie=function(e,i){var n={},a=[],r=[];$.each(i,function(){var e=this;n[e.alarmLevel]||(n[e.alarmLevel]=0),n[e.alarmLevel]++}),a=[],r=[],$.each(n,function(e){a.push([e,this]),r.push(t.getLevelColor(Number(e)).bg)}),c3.generate({bindto:e,data:{columns:a,type:"pie"},color:{pattern:r},pie:{label:{format:function(e){return d3.format()(e)}}}}).legend.hide()},t.prompt=function(e){return window.prompt(e,"")},t.randint=function(e,t){var i,n=t-e+1;return i=Math.random()*n+e,Math.floor(i)},t.randstr=function(e){var t={str:["a","b","c","d","e","f","g","h","i","j","k","l","m","o","p","q","r","s","t","x","u","v","y","z","w","n","0","1","2","3","4","5","6","7","8","9"],randint:function(e,t){var i=t-e+1,n=Math.random()*i+e;return Math.floor(n)},randStr:function(){var e=this,t=e.str.length-1,i=e.randint(0,t);return e.str[i]},create:function(e){for(var t=this,i=e||10,n="",a=0;i>a;a++)n+=t.randStr();return n}};return e=e?e:10,t.create(e)},t.relationDialog=function(e,i){var n,a="relation-dialog-item",r=null,l="show",o="hide";return n=t.render("share/relation.html",{list:i}),e.append(n),r=e.find("select[name=relation-type]"),r.change(function(){e.find("."+l).removeClass(l).addClass(o),e.find("."+a+"[name="+$(this).val()+"]").removeClass(o).addClass(l)}),e.find("."+a+"[name="+r.val()+"]").removeClass(o).addClass(l),function(){var t,i={};return i.type=r.val(),i.attr={},t=e.find("."+a+"[name="+r.val()+"]"),t.find("input[name]").each(function(){i.attr[$(this).attr("name")]=$(this).val()}),i}},t.render=function(i,n,a){var r,l,o,s="",u="";if(r="/"===i.charAt(1)?i:"/"+i,r=e.DEFINE_TEMPLATE.DIR+r,".html"!==r.substr(-5)&&(r+=".html"),o=md5(r),e.DEFINE_TEMPLATE.ISCACHE&&o in t.templateCache)s=t.templateCache[o];else{if(u=$.ajax({url:r,async:!1}),4!==u.readyState||200!==u.status)throw new Error(u.statusText);s=$.trim(u.responseText),e.DEFINE_TEMPLATE.ISCACHE&&(t.templateCache[o]=s)}return l=Handlebars.compile(s)(n),"function"==typeof a&&a(l),l},t.selectIcon=function(i){var n=null,a=null,r=null,l=null,o=[];a=function(a){$(a).find("img").click(function(){i&&i($(this).attr("src")),n.hide()}),$(a).find(".selectIcon-delete-btn").click(function(){var i=$(a).find("img").attr("src").split("/").pop();r=e.api.deleteByNameForAdmin(i),t.isTrueRet(r)?$(a).remove():t.alert(r.message)})},l=function(){var i=this;""!==i.value&&e.api.importSvgForAdmin(this,function(i){if(t.isTrueRet){var r;t.render("share/selectIconItem.html",{url:i.data},function(e){n.element.find(".selectIcon-list").append(e),a(n.element.find(".selectIcon-box:last").get(0))}),r=n.element.find("#uploadIconFile").get(0).outerHTML,n.element.find("#uploadIconFile").parent().html(r),n.element.find("#uploadIconFile").change(l),e.onlineEdit.initCustomIconArea()}t.alert(i.message)})},r=e.api.qureyForAdmin(null,1,1e5),t.isTrueRet(r)&&$.each(r.data.datas,function(){o.push(this.url)}),t.render("share/selectIcon.html",{list:o},function(i){n=e.dialog("选择图标",i,function(){t.alert("请选择图标")}),n.element.find(".selectIcon-box").each(function(){a(this)}),n.element.find("#uploadIconFile").change(l)})},t.selectView=function(i){var n,a=null,r=null;e.dialog("选择视图",e.utils.render("view/selectView.html"),function(t,n){a?(n.hide(),i(a,r)):e.utils.alert("请选择一个视图")}),n=function(t,i,n){$.each(i,function(){var e=this;"undefined"==typeof e.view&&(e.state||(e.state={}),e.state.disabled=!0)}),t.jstree({core:{data:i}}).bind("select_node.jstree",function(e,t){a=t.node.id,r=n}),e.utils.jstreeEvent(t)},n($("#privateTab").find(".tree-main"),t.getTreeDataPri(),!1),n($("#publicTab").find(".tree-main"),t.getTreeDataPub(),!0)},t.selectViews=function(i){var n,a=null,r=null;e.dialog("选择视图(可选多个)",e.utils.render("view/selectView.html"),function(t,n){var l,o=[],s=r.jstree(!0),u=a.jstree(!0);l=s.get_selected().concat(u.get_selected()),l.length>=1?(n.hide(),$.each(s.get_selected(),function(){var e=s.get_node(this);0===e.children.length&&o.push({viewid:e.id,viewname:e.text,cateid:e.parent,catename:s.get_node(e.parent).text})}),$.each(u.get_selected(),function(){var e=u.get_node(this);0===e.children.length&&o.push({viewid:e.id,viewname:e.text,cateid:e.parent,catename:u.get_node(e.parent).text})}),i(o)):e.utils.alert("请至少选择一个视图")}),n=function(t,i){$.each(i,function(){var e=this;"undefined"==typeof e.view&&(e.state||(e.state={}))}),t.jstree({core:{data:i},plugins:["checkbox"]}),e.utils.jstreeEvent(t)},r=$("#privateTab").find(".tree-main"),a=$("#publicTab").find(".tree-main"),n(r,t.getTreeDataPri(),!1),n(a,t.getTreeDataPub(),!0)},t.showCiTable=function(i){var n,a,r;return i.zoomLock=!0,r={ID:!0,"分类":!0,"名称":!0},a=i.graph.container,$(a).find(".graphtable").remove(),n=t.getGraphCiIds(i.graph),t.updateCacheCiLib(n),t.showToggleTable(a,t.comArr(t.getCacheCis(n)),r,function(i,n,a,r){var l,o;l=t.getCacheCi(n),l[a]=r.trim(),o=e.api.updateCi(n,l),t.isTrueRet(o)?t.updateCacheCiLib([n],!0):t.alert("更新信息失败")}),{alertRows:function(e){$(a).find(".graphtable").find("tr[ciid]").css({background:"transparent",color:null}),$.each(e,function(){$(a).find(".graphtable").find("tr[ciid="+this.id+"]").css({background:this.bg,color:this.fc})})}}},t.showGraphModel=function(e){$(e.graph.container).find(".graphtable").remove(),e.zoomLock=!1},t.showToggleTable=function(i,n,a,r){var l="",o=document.createElement("div");o.className="graphtable",o.style.cssText=["position: absolute","left: 0","top: 0","z-index: 999","width: 100%","background: #EFEFEF","overflow: auto","height: 100%"].join(";"),$.each(n,function(){var e=this,i=e.columns.length,n=150;e.width=i>=8&&(i+1)*n>$(window).width()?(i+1)*n+"px":"100%",l+=t.render("share/ciTable",e)}),o.innerHTML=l,$(i).find(".graphtable").remove(),$(i).append(o),$(i).find(".graphtable table").each(function(){$(this).DataTable({paging:!1,stateSave:!0,oLanguage:e.DEFINE_DATATABLE.LANGUAGE})}),$(i).find("td").each(function(){var e,t,n=this;e=$(n).parents("tr[ciid]").attr("ciid"),t=$(i).find("tr:eq(0) th:eq("+$(this).index()+")").html(),a[t]||$(n).dblclick(function(){var i,a,l=n.innerHTML;i=function(){$(n).html(this.value),l!==this.value.trim()&&r&&($(n).css("background","#F5F5F5"),r(this,e,t,this.value))},0===$(this).find("input").length&&(a=document.createElement("input"),a.style.cssText=["width: 100%","height: 100%","background: black","border: none","color: white"].join(";"),a.type="text",a.value=l,$(n).html(a),a.focus(),a.onclick=function(e){e.stopPropagation()},$(a).keydown(function(e){13===e.keyCode&&$(a).blur()}),a.onblur=i)})})},t.snapshotSave=function(t){t.viewid?e.utils.render("snapshot/save",null,function(i){e.dialog(e.DEFINE_MSG.S44,i,function(i,n){var a,r,l;l=e.utils.getXml(t),a=i.find("textarea").val(),r=e.api.versionPost(t.viewid,l,a),e.utils.isTrueRet(r)?n.hide():e.utils.alert(r.message)})}):e.utils.alert(e.DEFINE_MSG.E28)},t.snapshotOpen=function(i){var n,a;a=function(n){var a={};$.each(n,function(e){var i=this;a[i.key]=i.xml,i.version="V"+(n.length-e),i.date=t.unixToDatetime(i.key).substr(0,10)}),e.utils.render("snapshot/list",{list:n},function(n){var r;r=e.dialog(e.DEFINE_MSG.S45,n),r.element.find("button[data-id]").each(function(){var n=$(this).attr("data-id");$(this).click(function(){a[n]?(r.hide(),t.openXml(i,a[n])):e.utils.alert(e.DEFINE_MSG.E30)})})})},i.viewid?(n=e.api.versionList(i.viewid),e.utils.isTrueRet(n)?n.data&&n.data.length>=1?a(n.data):e.utils.alert(e.DEFINE_MSG.E29):e.utils.alert(n.message)):e.utils.alert(e.DEFINE_MSG.E28)},t.snapshotDelete=function(i){var n,a;a=function(n){$.each(n,function(e){var i=this;i.version="V"+(n.length-e),i.date=t.unixToDatetime(i.key).substr(0,10)}),e.utils.render("snapshot/deleteList",{list:n},function(t){var n;n=e.dialog(e.DEFINE_MSG.S45,t),n.element.find("button[data-id]").each(function(){var t=$(this).attr("data-id");$(this).click(function(){var n;n=e.api.versionDelete(i.viewid,t),e.utils.isTrueRet(n)?$(this).closest("tr").remove():e.utils.alert(n.message)})})})},i.viewid?(n=e.api.versionList(i.viewid),e.utils.isTrueRet(n)?n.data&&n.data.length>=1?a(n.data):e.utils.alert(e.DEFINE_MSG.E29):e.utils.alert(n.message)):e.utils.alert(e.DEFINE_MSG.E28)},t.svgToExportFormat=function(e){var t;return t=e.getSvg(),t.outerHTML},t.unixToDatetime=function(e){var t=new Date(e);return[[t.getFullYear(),t.getMonth()+1<10?"0"+(t.getMonth()+1):t.getMonth()+1,t.getDate()<10?"0"+t.getDate():t.getDate()].join("-"),[t.getHours()<10?"0"+t.getHours():t.getHours(),t.getMinutes()<10?"0"+t.getMinutes():t.getMinutes(),t.getSeconds()<10?"0"+t.getSeconds():t.getSeconds()].join(":")].join(" ")},t.updateIconLib=function(e,i){var n;n=function(t){var i;for(i=0;i<t.length;i++)"string"==typeof t[i].ico&&(e[t[i].name]=t[i].ico),"object"==typeof t[i].childrenNode&&n(t[i].childrenNode)};var a=i();t.isTrueRet(a)&&n(a.data)},t.setViewForCell=function(e,t,i,n){var a,r,l=[];a=e.getViewForCell(t),a&&(l=a.split("##")),r=[i,n].join("$$"),-1===$.inArray(r,l)&&l.push(r),e.setViewForCell(t,l.join("##"))},t.getViewForCell=function(e,t){var i,n,a=[],r=[];for(i=e.getViewForCell(t),i&&(a=i.split("##")),n=0;n<a.length;n++)r.push({viewname:a[n].split("$$")[0],viewid:a[n].split("$$")[1]});return r},t.delViewForCell=function(e,t,i,n){var a="",r=0,l="",o=!1,s=[];for(a=e.getViewForCell(t),a&&(s=a.split("##")),l=[i,n].join("$$"),r=0;r<s.length;r++)if(s[r]===l){s.splice(r,1),o=!0,e.setViewForCell(t,s.join("##"));break}return o},t.selectViewForCell=function(i,n,a,r){var l,o=i;l=t.getViewForCell(o.graph,n),l.length>=1?t.render("share/selectRelationViews.html",{list:l},function(i){var n=e.dialog(a,i,function(e,i){var n=[];e.find("input[type=radio]:checked").each(function(){n.push({viewname:$(this).attr("data-viewname"),viewid:$(this).attr("data-viewid")})}),n.length>=1?($.each(n,function(){r(this.viewid,this.viewname)}),i.hide()):t.alert("未选择视图！")});n.element.find(".radio-list input[type=radio]").change(function(){var e=$(this).closest("label");e.parent().find(".checked").removeClass("checked"),$(this).is(":checked")?e.find(".radio > span").addClass("checked"):e.find(".radio > span").removeClass("checked")})}):t.alert("未关联任何视图！")},t.viewInfo=function(i){var n,a,r,l,o,s,u="viewInfo",c="."+u,d="fa fa-chevron-up",h="fa fa-chevron-down";o=function(i){i.attr="private"===i.open?e.DEFINE_MSG.S49:e.DEFINE_MSG.S48,i.date=t.unixToDatetime(i.time),t.render("viewInfo/staticViewInfo",i,function(e){n.html(e)})},s=function(){var t;t=e.api.getView(i.viewid),e.utils.isTrueRet(t)?o(t.data):e.utils.alert(t.message)},$(c).remove(),t.render("viewInfo/viewInfo",null,function(e){$(i.graph.container).append(e),l=$(c),n=l.find(".viewInfoBody"),r=l.find(".viewInfoTop").find("button"),a=r.find("i"),r.click(function(){n.is(":visible")?(n.removeClass("active"),a[0].className=d):(n.addClass("active"),a[0].className=h)}),s()}),e.event.reg(e.DEFINE_EVENT.GRAPH_OPEN_XML,function(e){i.graph===e.editor.graph&&s()})},t.getViewPortfolio=function(){var t;if(t=e.api.getPortfolio(),!e.utils.isTrueRet(t))throw e.utils.alert(t.message),new Error(t.message);return $.each(t.data,function(){var t=this;t.content=JSON.parse(t.content),t.createDate=e.utils.unixToDatetime(t.time).substr(0,10)}),t.data}}(nameSpace.reg("graph"),nameSpace.reg("graph.utils"));
//# sourceMappingURL=data:application/json;base64,