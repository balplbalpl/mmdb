package com.mmdb.service.relation.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.mmdb.core.framework.neo4j.proxy.AbstractDomain;
import com.mmdb.model.categroy.UserCategory;
import com.mmdb.model.categroy.ViewCategory;
import com.mmdb.model.info.UserInformation;
import com.mmdb.model.info.ViewInformation;
import com.mmdb.model.info.ViewPortfolio;
import com.mmdb.model.info.storage.UserInfoStorage;
import com.mmdb.model.info.storage.ViewInfoStorage;
import com.mmdb.model.relation.UserViewRelation;
import com.mmdb.model.relation.storage.UserViewRelStorage;
import com.mmdb.util.Neo4jStringUtils;

@Component
public class UserViewRelService extends AbstractDomain {
	@Autowired
	private UserViewRelStorage userViewRelStorage;
	// @Autowired
	// private UserStorage userStorage;
	@Autowired
	private UserInfoStorage userInfoStorage;
	@Autowired
	private ViewInfoStorage viewStorage;

	public List<UserViewRelation> getAll(UserInformation user) throws Exception {
		return userViewRelStorage.getAll(user);
	}

	public UserViewRelation getById(String id, UserInformation user)
			throws Exception {
		return userViewRelStorage.getById(id, user);
	}

	public UserViewRelation getById(Long neoid, UserInformation user)
			throws Exception {
		return userViewRelStorage.getOne(neoid, user);
	}

	public UserViewRelation save(UserViewRelation userview, UserInformation user)
			throws Exception {
		return userViewRelStorage.save(userview, user);
	}

	public void save(List<UserViewRelation> userviews, UserInformation user)
			throws Exception {
		for (UserViewRelation userview : userviews) {
			userViewRelStorage.save(userview, user);
		}
	}

	public void delete(UserViewRelation userview) throws Exception {
		userViewRelStorage.delete(userview);
	}

	public void delete(List<UserViewRelation> userviews) throws Exception {
		userViewRelStorage.delete(userviews);
	}

	public void deleteAll() throws Exception {
		userViewRelStorage.deleteAll();
	}

	public UserViewRelation update(UserViewRelation userview,
			UserInformation user) throws Exception {
		return userViewRelStorage.update(userview, user);
	}

	public void update(List<UserViewRelation> userviews, UserInformation user)
			throws Exception {
		for (UserViewRelation userview : userviews) {
			userViewRelStorage.update(userview, user);
		}
	}

	public UserViewRelation update(Long neoid, UserViewRelation userview,
			UserInformation user) throws Exception {
		return userViewRelStorage.update(neoid, userview, user);
	}

	public List<ViewInformation> qureyViewByUser(UserInformation user)
			throws Exception {
		/*
		 * List<ViewInformation> views = new ArrayList<ViewInformation>();
		 * RelationshipType rt =
		 * Neo4jUtil.getRelationshipType(RelationshipTypes.USER2VIEW);
		 * 
		 * String CQL =
		 * "match (n:UserCate) where n.id = '"+Neo4jStringUtils.cypherESC
		 * (user.getCategoryId
		 * ())+"' optional match (n)-[r:UserCate2UserCate*]->(m:UserCate)"+
		 * "with n,m"+
		 * "match (o:UserCate) where o.id = n.id OR o.id = m.id  optional match (o)-[r1:UserCate2ViewCate]->(p:ViewCate)"
		 * + "with p"+
		 * "match (b:ViewCate) where b.name = p.name optional match (a:View)-[:View2Cate]->(b)"
		 * + "return a"; views = viewStorage.query(CQL,user); // Node node =
		 * userInfoService.getOne(user); // Iterable<Relationship> rs =
		 * node.getRelationships(Direction.OUTGOING, rt); // for (Relationship r
		 * : rs) { // long eid = r.getEndNode().getId(); // ViewInformation view
		 * = viewStorage.getOne(eid); // views.add(view); // } return views;
		 */
		return null;
	}

	// public List<ViewInformation> qureyViewByUser(User user) throws Exception
	// {
	// List<ViewInformation> views = new ArrayList<ViewInformation>();
	// RelationshipType rt =
	// Neo4jUtil.getRelationshipType(RelationshipTypes.USER2VIEW);
	// Node node = userStorage.getOne(user);
	// Iterable<Relationship> rs = node.getRelationships(Direction.OUTGOING,
	// rt);
	// for (Relationship r : rs) {
	// long eid = r.getEndNode().getId();
	// ViewInformation view = viewStorage.getOne(eid);
	// views.add(view);
	// }
	// return views;
	// }

	public void deleteByUser(UserInformation user) throws Exception {
		// 通过用户删除 用户到视图的关系 这删除用户到视图和视图分类的关系
		String CQL = "match (n:User) where n.`username` = '"
				+ user.getUsername()
				+ "' "
				+ "optional match (n)-[r:User2View]->(m:View),(n)-[r1:User2ViewCate]->(m:ViewCate) delete r,r1 ";
		userInfoStorage.query(CQL);
		// RelationshipType rt =
		// Neo4jUtil.getRelationshipType(RelationshipTypes.USER2VIEW);
		// Node node = userStorage.getOne(user);
		// Iterable<Relationship> rs = node.getRelationships(Direction.OUTGOING,
		// rt);
		// for (Relationship r : rs) {
		// r.delete();
		// }
	}

	public void deleteByView(UserInformation user, List<String> viewJsonIds)
			throws Exception {
		// RelationshipType rt =
		// Neo4jUtil.getRelationshipType(RelationshipTypes.USER2VIEW);
		// Node node = userStorage.getOne(user);
		// Iterable<Relationship> rs = node.getRelationships(Direction.OUTGOING,
		// rt);
		// for (Relationship r : rs) {
		// UserViewRelation rel = userViewRelStorage.getOne(r.getId());
		// String rid = HexString.json2Str(rel.getView().getCategoryId(),
		// rel.getView().getId());
		// if (viewJsonIds.contains(rid)) {
		// r.delete();
		// }
		// }
	}

	public List<UserInformation> qureyUserByView(ViewInformation view)
			throws Exception {
		List<UserInformation> users = new ArrayList<UserInformation>();
		String id = Neo4jStringUtils.cypherESC(view.getId().toString());
		String CQL = "match (n:View) where n.id='" + id
				+ "' optional match (n)<-[:User2View]-(m) return m";
		users = userInfoStorage.query(CQL);// 取User
		return users;
	}

	public Map<String, Long> saveOrUpdate(Set<UserViewRelation> rels,
			UserInformation user) throws Exception {
		Map<String, Long> retMap = new HashMap<String, Long>();
		long snum = 0, unum = 0;
		for (UserViewRelation rel : rels) {
			UserViewRelation info = userViewRelStorage.getById(rel.getId(),
					user);
			if (info == null) {
				userViewRelStorage.save(rel, user);
				snum++;
			} else {
				// info = info.unLazy();
				info.setUser(info.getUser());
				info.setView(info.getView());
				userViewRelStorage.update(info, user);
				unum++;
			}
		}
		retMap.put("save", snum);
		retMap.put("update", unum);
		return retMap;
	}

	/**
	 * 设置用户可见视图
	 * 
	 * @param ucL
	 *            用户分类 List
	 * @param uiL
	 *            用户 List
	 * @param vcL
	 *            视图分类 List
	 * @param viL
	 *            视图 List
	 */
	public void setUserVisibleView(List<UserCategory> ucL,
			List<UserInformation> uiL, List<ViewCategory> vcL,
			List<ViewInformation> viL, List<ViewPortfolio> pviL) {
		userViewRelStorage.UserCateToViewCateM(ucL, uiL, vcL, viL, pviL);
	}

}
