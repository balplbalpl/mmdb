package com.mmdb.service.info.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.mmdb.core.framework.neo4j.entity.Dynamic;
import com.mmdb.core.framework.neo4j.proxy.AbstractDomain;
import com.mmdb.model.bean.Attribute;
import com.mmdb.model.categroy.CiCategory;
import com.mmdb.model.categroy.storage.CiCateStorage;
import com.mmdb.model.info.CiInformation;
import com.mmdb.model.info.storage.CiInfoStorage;
import com.mmdb.model.mapping.InCiCateMap;
import com.mmdb.model.task.Task;
import com.mmdb.service.category.ICiCateService;
import com.mmdb.service.category.IRelCateService;
import com.mmdb.service.info.ICiInfoService;
import com.mmdb.service.mapping.IInCiCateMapService;
import com.mmdb.service.relation.ICiKpiRelService;
import com.mmdb.service.relation.ICiRelService;
import com.mmdb.service.relation.ICiViewRelService;
import com.mmdb.service.task.ITaskService;
import com.mmdb.util.Neo4jStringUtils;
import com.mongodb.BasicDBList;
import com.mongodb.BasicDBObject;

/**
 * 配置项 数据 - 实现类
 * 
 * @author XIE
 */
@Component("ciInfoService")
public class CiInfoServiceImpl implements ICiInfoService {
	@Autowired
	private ICiCateService ciCateService;
	@Autowired
	private CiInfoStorage infoStorage;
	@Autowired
	private CiCateStorage cateStorage;
	@Autowired
	private ITaskService taskService;
	@Autowired
	private IInCiCateMapService imService;
	@Autowired
	private ICiRelService relService;
	@Autowired
	private IRelCateService relCateService;
	@Autowired
	private ICiKpiRelService ciKpiRelService;
	@Autowired
	private ICiViewRelService ciViewRelService;

	@Override
	public CiInformation save(CiInformation information) throws Exception {
		CiInformation has = infoStorage.getByJsonId(information.getHexId());
		if (has != null) {
			throw new Exception("数据[" + information.getId() + "]已存在");
		} else {
			CiInformation info = infoStorage.save(information);
			List<CiInformation> infos = new ArrayList<CiInformation>();
			infos.add(info);
			List<Task> ts = taskService.getAll();
			for (Task t : ts) {
				if (t.getOpen()) {
					List<InCiCateMap> ims = t.getInCiCateMap();
					for (InCiCateMap im : ims) {
						imService.runNow(im, infos);
					}
				}
			}
			return info;
		}
	}

	@Override
	public void save(List<CiInformation> informations) throws Exception {
		List<CiInformation> infos = new ArrayList<CiInformation>();
		for (CiInformation information : informations) {
			CiCategory nc = information.getCategory();
			if (nc == null) {
				throw new Exception("数据分类不能为空");
			}
			CiInformation has = infoStorage.getInfoInCate(nc.getId(),
					information.getId());
			if (has != null) {
				throw new Exception("数据[" + information.getId() + "]已存在");
			} else {
				CiInformation info = infoStorage.save(information);
				infos.add(info);
				// 发送消息
				// CiInfoMsg msg = new CiInfoMsg(info);
				// msg.ADD();
			}
		}
		List<Task> ts = taskService.getAll();
		for (Task t : ts) {
			if (t.getOpen()) {
				List<InCiCateMap> ims = t.getInCiCateMap();
				for (InCiCateMap im : ims) {
					imService.runNow(im, infos);
				}
			}
		}
	}

	@Override
	public CiInformation getById(String cateId, String infoId) throws Exception {
		return infoStorage.getInfoInCate(cateId, infoId);
	}

	@Override
	public List<CiInformation> getByProperty(String key, Object value)
			throws Exception {
		List<CiInformation> infos = infoStorage.getByProperty(key, value);
		return infos != null ? infos : new ArrayList<CiInformation>();
	}

	@Override
	public CiInformation getById(String jsonId) throws Exception {
		return infoStorage.getByJsonId(jsonId);
	}

	@Override
	public List<CiInformation> getByCategory(CiCategory cate) throws Exception {
		return infoStorage.getByCategory(cate.getId());
	}

	@Override
	public List<CiInformation> qureyByAdvanced(CiCategory category,
			Map<String, String> must, Map<String, String> or, boolean extend)
			throws Exception {
		// 'cate1' and 'must' and ('or1' or 'or2')
		boolean queryAll = true;// 当参数没有值的时候,就查询全部的.
		StringBuffer match = new StringBuffer("select * from Ci where ");
		// 用于判断是否出现继承和是否有categroyid这个条件
		List<String> cgIds = new ArrayList<String>();
		if (category != null) {
			cgIds.add(category.getId());
			if (extend) {// ciCate是否继承
				List<CiCategory> children = category.getAllChildren();
				for (CiCategory child : children) {
					cgIds.add(child.getId());
				}
			}
		}

		if (cgIds.size() != 0) {
			queryAll = false;
			for (String cgid : cgIds) {
				match.append(" categoryId = '");
				match.append(cgid);
				match.append("' or");
			}
			match.delete(match.length() - 2, match.length());
		}

		// 必要字段
		if (must != null && must.size() > 0) {
			if (!queryAll) {// 出现了categoryid where n.xx =='xx' and
				match.append(" and");
			}
			queryAll = false;
			if (must.containsKey("*") && category != null) {
				String value = transNeo4jValue(must.get("*"));
				List<String> attrs = category.getAttributeNames();
				if (attrs.size() > 0) {
					for (String attr : attrs) {
						match.append("`data$");
						match.append(attr);
						match.append("` like '");
						match.append(value);
						match.append("' and");
					}
				}
			} else {
				for (Entry<String, String> entry : must.entrySet()) {
					String key = entry.getKey().trim();
					String value = transNeo4jValue(entry.getValue());

					if ("scene".equals(key) || "categoryId".equals(key)
							|| "id".equals(key) || "tag".equals(key)
							|| "name".equals(key) || "source".equals(key)
							|| "createTime".equals(key)
							|| "updateTime".equals(key) || "record".equals(key)
							|| "relCateId".equals(key)) {
						match.append(" `");
					} else {
						match.append(" `data$");
					}
					match.append(key);
					match.append("` like '");
					match.append(value);
					match.append("' and");
				}
			}
			match.delete(match.length() - 3, match.length());// 去掉一个多余的and
		}//

		if (or != null && or.size() > 0) {
			if (!queryAll) {// 出现了categoryid where n.xx =='xx' and
				match.append(" and( ");
			}
			queryAll = false;
			if (or.containsKey("*") && category != null) {
				String value = transNeo4jValue(or.get("*"));
				List<String> attrs = category.getAttributeNames();
				for (String attr : attrs) {
					match.append(" `data$");
					match.append(attr);
					match.append("` like '");
					match.append(value);
					match.append("' or");
				}
			} else {
				for (Entry<String, String> entry : or.entrySet()) {
					String key = entry.getKey().trim();
					String value = transNeo4jValue(entry.getValue());
					// match.append(" `data$");
					if ("scene".equals(key) || "categoryId".equals(key)
							|| "id".equals(key) || "tag".equals(key)
							|| "name".equals(key) || "source".equals(key)
							|| "createTime".equals(key)
							|| "updateTime".equals(key) || "record".equals(key)
							|| "relCateId".equals(key)) {
						match.append(" `");
					} else {
						match.append(" `data$");
					}
					match.append(key);
					match.append("` like '");
					match.append(value);
					match.append("' or");
				}
			}
			match.delete(match.length() - 2, match.length());// 去掉一个多余的or
			match.append(")");
		}

		if (queryAll) {
			match.delete(match.length() - 6, match.length());// 将多出的where 删除掉
		}
		// match.append("return n");
		return infoStorage.query(match.toString());
	}

	@Override
	public List<CiInformation> qureyByTerm(Map<String, String> must,
			Map<String, String> mustNot) throws Exception {
		boolean queryAll = true;// 当参数没有值的时候,就查询全部的.
		StringBuffer match = new StringBuffer("select * from Ci where ");
		if (must != null && must.size() != 0) {
			queryAll = false;
			Set<String> keySet = must.keySet();
			for (String key : keySet) {
				match.append(" `data$");
				match.append(key);
				match.append("` = '");
				match.append(must.get(key));
				match.append("' and");
			}
		}

		if (mustNot != null && mustNot.size() != 0) {
			queryAll = false;
			Set<String> keySet = mustNot.keySet();
			for (String key : keySet) {
				match.append(" `data$");
				match.append(key);
				match.append("` != '");
				match.append(mustNot.get(key));
				match.append("' and");
			}
		}
		if (queryAll) {
			match.delete(match.length() - 6, match.length());// 将多出的where 删除掉
		} else {
			match.delete(match.length() - 3, match.length());
		}
		return infoStorage.query(match.toString());
	}

	/*
	 * @Override public List<CiInformation> qureyByFuzzy(Map<String, String>
	 * must, Map<String, String> or) throws Exception { boolean queryAll =
	 * true;// 当参数没有值的时候,就查询全部的. StringBuffer match = new
	 * StringBuffer("select * from Ci where ");
	 * 
	 * Set<String> attrs = new HashSet<String>(); Set<String> classAttr = new
	 * HashSet<String>(); classAttr.add("id"); classAttr.add("categoryId");
	 * List<CiCategory> ciCategories = ciCateService.getAll();
	 * 
	 * if (must != null && must.size() > 0) { queryAll = false; if
	 * (must.containsKey("*")) { String value = transNeo4jValue(must.get("*"));
	 * for (String attr : attrs) { match.append(" `data$"); match.append(attr);
	 * match.append("` like '"); match.append(value); match.append("' and"); }
	 * for (String attr : classAttr) { match.append(" `"); match.append(attr);
	 * match.append("` like '"); match.append(value); match.append("' and"); }
	 * 
	 * } else { for (Entry<String, String> entry : must.entrySet()) { String key
	 * = entry.getKey().trim(); String value =
	 * transNeo4jValue(entry.getValue()); match.append(" `data$");
	 * match.append(key); match.append("` like '"); match.append(value);
	 * match.append("' and"); } } match.delete(match.length() - 3,
	 * match.length());// 去掉一个多余的and }
	 * 
	 * if (or != null && or.size() > 0) { if (!queryAll) {// 出现了categoryid where
	 * n.xx =='xx' and match.append(" where "); } queryAll = false; if
	 * (or.containsKey("*")) { for (CiCategory ciCategory : ciCategories) {
	 * List<String> as = ciCategory.getAttributeNames(); for (String a : as) {
	 * attrs.add(a); } } String value = transNeo4jValue(or.get("*")); for
	 * (String attr : attrs) { match.append(" `data$"); match.append(attr);
	 * match.append("` like '"); match.append(value); match.append("' or"); }
	 * for (String attr : classAttr) { match.append(" `"); match.append(attr);
	 * match.append("` like '"); match.append(value); match.append("' or"); } }
	 * else { for (Entry<String, String> entry : or.entrySet()) { String key =
	 * entry.getKey().trim(); String value = transNeo4jValue(entry.getValue());
	 * match.append(" `data$"); match.append(key); match.append("` like '");
	 * match.append(value); match.append("' or"); } }
	 * match.delete(match.length() - 2, match.length());// 去掉一个多余的or } if
	 * (queryAll) { match.delete(match.length() - 6, match.length());//
	 * 将多出的where 删除掉 } // match.append("return n"); return
	 * infoStorage.query(match.toString()); }
	 */
	public List<CiInformation> qureyByFuzzy(Map<String, String> must,
			Map<String, String> or) throws Exception {

		Set<String> attrs = new HashSet<String>();
		Set<String> classAttr = new HashSet<String>();
		classAttr.add("id");
		classAttr.add("categoryName");
		List<CiCategory> ciCategories = ciCateService.getAll();
		BasicDBList mustC = null;
		BasicDBList orC = null;

		if (must != null && must.size() > 0) {
			mustC = new BasicDBList();
			if (must.containsKey("*")) {
				String value = transNativeMongoValue(must.get("*"));

				for (String attr : attrs) {
					mustC.add(new BasicDBObject("data$" + attr,
							new BasicDBObject("$regex", value)));
				}

				for (String attr : classAttr) {
					mustC.add(new BasicDBObject(attr, new BasicDBObject(
							"$regex", value)));
				}

			} else {
				for (Entry<String, String> entry : must.entrySet()) {
					String key = entry.getKey().trim();
					String value = transNativeMongoValue(entry.getValue());

					mustC.add(new BasicDBObject("data$" + key,
							new BasicDBObject("$regex", value)));
				}
			}
		}

		if (or != null && or.size() > 0) {
			orC = new BasicDBList();

			if (or.containsKey("*")) {
				for (CiCategory ciCategory : ciCategories) {
					List<String> as = ciCategory.getAttributeNames();
					for (String a : as) {
						attrs.add(a);
					}
				}

				String value = transNativeMongoValue(or.get("*"));
				for (String attr : attrs) {
					orC.add(new BasicDBObject("data$" + attr,
							new BasicDBObject("$regex", value)));
				}
				for (String attr : classAttr) {
					orC.add(new BasicDBObject(attr, new BasicDBObject("$regex",
							value)));
				}
			} else {
				for (Entry<String, String> entry : or.entrySet()) {
					String key = entry.getKey().trim();
					String value = transNativeMongoValue(entry.getValue());

					orC.add(new BasicDBObject("data$" + key, new BasicDBObject(
							"$regex", value)));
				}
			}
		}
		if (mustC == null && orC == null) {
			return new ArrayList<CiInformation>();
		}

		if (mustC == null) {
			return infoStorage.query(new BasicDBObject("$or", orC),
					ciCategories);
		} else if (orC == null) {
			return infoStorage.query(new BasicDBObject("$or", mustC),
					ciCategories);
		} else {
			BasicDBObject query = new BasicDBObject();
			BasicDBList and = new BasicDBList();
			query.append("$and", and);
			and.add(new BasicDBObject("$or", mustC));
			and.add(new BasicDBObject("$or", orC));
			return infoStorage.query(query, ciCategories);
		}
	}

	@Override
	public List<CiInformation> qureyByWhereSQL(String whereParam)
			throws Exception {
		return infoStorage.queryByWhereParam(whereParam);
	}

	public static void main(String[] args) {
		CiInfoServiceImpl c = new CiInfoServiceImpl();
		CiCategory category = new CiCategory();
		category.setId("456");
		CiCategory cd = new CiCategory();
		cd.setId("123");
		ArrayList<CiCategory> arrayList = new ArrayList<CiCategory>();
		arrayList.add(cd);
		category.setChildren(arrayList);
		boolean extend = true;
		Map<String, String> must = new HashMap<String, String>();
		// must.put("name", "熊剑");
		// must.put("birth", "1992-10-12");
		Map<String, String> or = new HashMap<String, String>();
		or.put("age", "12");
		or.put("phone", "12");
		try {
			c.qureyByAdvanced(null, must, or, extend);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	//
	public void delete(CiInformation information) throws Exception {
		// List<CiRelation> relations = relService.qureyCiRelation(information,
		// relCateService.getCateNames());
		// relService.delete(relations);
		String hexId = information.getHexId();
		// 删除ci与视图的关系
		ciViewRelService.deleteByCi(hexId);
		// 删除ci与kpi的关系
		ciKpiRelService.delCiKpiRelByCiId(hexId);
		infoStorage.delete(information);
	}

	@Override
	//
	public void delete(List<CiInformation> informations) throws Exception {
		for (CiInformation cInfo : informations) {
			String hexId = cInfo.getHexId();
			// 删除ci与视图的关系
			ciViewRelService.deleteByCi(hexId);
			// 删除ci与kpi的关系
			ciKpiRelService.delCiKpiRelByCiId(hexId);
		}
		infoStorage.delete(informations);
	}

	@Override
	public void deleteByJsonIds(List<String> jsonIds) throws Exception {
		for (String hexid : jsonIds) {
			// 删除ci与视图的关系
			ciViewRelService.deleteByCi(hexid);
			// 删除ci与kpi的关系
			ciKpiRelService.delCiKpiRelByCiId(hexid);
		}
		infoStorage.deleteByJsonIds(jsonIds);
	}

	@Override
	//
	public void clearAll() throws Exception {
		// TODO 删除全部的ci与view的关系,和ci与kpi的关系
		infoStorage.deleteAll();
	}

	/**
	 * 检测参数是否符合要求
	 * 
	 * @param info
	 *            CI数据
	 * @param data
	 *            新的数据
	 * @throws Exception
	 */
	private Dynamic<String, Object> checkParameter(CiInformation info,
			Map<String, Object> data) throws Exception {
		Dynamic<String, Object> ret = new Dynamic<String, Object>();
		CiCategory category = info.getCategory();
		// 处理id,或许可能是继承id
		Attribute major = category.getMajor();
		String majorName = major.getName();
		if (data.containsKey(majorName)) {// 判断数据中对象的主键
			Object id = data.get(majorName);// 把主键的值做为该分类数据的唯一标识
			if (id == null || id.equals("")) {
				throw new Exception("主键不能为空");
			}
			try {
				id = major.convert(id.toString());
				ret.put(majorName, id);
			} catch (Exception e) {
				throw new Exception("数据[" + data + "]" + e.getMessage());
			}
		} else {
			throw new Exception("数据[" + data + "],缺少分类[" + category.getName()
					+ "]的主键[" + majorName + "]数据");
		}
		// 处理属性，或许有继承属性
		List<Attribute> attributes = category.getAllAttributes();
		for (Attribute attribute : attributes) {
			String field = attribute.getName();
			String value = data.containsKey(field) ? data.get(field).toString()
					: attribute.getDefaultValue();
			if (attribute.getRequired() && value.equals("")) {
				throw new Exception("分类[" + category.getName() + "]中属性["
						+ field + "]是必填项");
			}
			ret.put(field, attribute.convert(value));
		}
		return ret;
	}

	public CiInformation update(CiInformation information,
			Map<String, Object> data, String source) throws Exception {
		CiInformation info = information;
		info.setData(this.checkParameter(information, data));
		info.setSource(source);
		info = infoStorage.update(info);
		return info;
	}

	public Map<String, Long> saveOrUpdate(CiCategory category,
			List<CiInformation> informations) throws Exception {
		long stime = System.currentTimeMillis();
		int save = 0, update = 0;
		List<List<CiInformation>> saveOrUpdate = infoStorage.saveOrUpdate(
				category, informations);
		List<CiInformation> crt = saveOrUpdate.get(0);
		List<CiInformation> upd = saveOrUpdate.get(1);
		save = crt.size();
		update = upd.size();

		List<CiInformation> infos = new ArrayList<CiInformation>();
		if (crt != null)
			infos.addAll(crt);
		if (upd != null)
			infos.addAll(upd);
		if (infos.size() != informations.size()) {
			new RuntimeException("infos.size() =" + infos.size()
					+ "  informations.size() =" + informations.size());
		}

		Map<String, Long> retMap = new HashMap<String, Long>();
		List<Task> ts = taskService.getAll();
		for (Task t : ts) {
			if (t.getOpen()) {
				List<InCiCateMap> ims = t.getInCiCateMap();
				for (InCiCateMap im : ims) {
					imService.runNow(im, infos);
				}
			}
		}
		// TODO 关系尚未处理
		retMap.put("save", (long) save);
		retMap.put("update", (long) update);
		System.out.println("批量上传配置项[" + category.getId() + "],耗时:"
				+ (System.currentTimeMillis() - stime));
		return retMap;
	}

	public void updateInfos(List<CiInformation> infos) throws Exception {
		infoStorage.updateInfo(infos);
	}

	/**
	 * 
	 * @param CategoryId
	 * @throws Exception
	 */
	public void deleteCiByCategory(CiCategory category) throws Exception {
		List<String> ciIds = infoStorage.getHexIdsByCateId(category.getId());
		for (String ciId : ciIds) {
			ciKpiRelService.delCiKpiRelByCiId(ciId);
		}
		infoStorage.deleteCisByCiCate(category);
	}

	public void alterAttr(CiCategory ciCate,
			java.util.Map<String, Attribute> data) throws Exception {
		infoStorage.alterAttr(ciCate, data);
	}

	@Override
	public void deleteAttr(CiCategory ciCate, List<Attribute> attrs)
			throws Exception {
		infoStorage.deleteAttr(ciCate, attrs);
	}

	@Override
	public void addAttr(CiCategory ciCate, List<Attribute> attrs)
			throws Exception {
		infoStorage.addAttr(ciCate, attrs);
	}

	/**
	 * 自动将value lower trim 转换成neo4j模糊匹配的值
	 * 
	 * @param value
	 *            *12* 需要转换为 .*12.* ,*要转换为.*
	 * @return
	 */
	private String transNeo4jValue(String value) {
		// value = Neo4jStringUtils.cypherESC(value.toLowerCase().trim());
		value = Neo4jStringUtils.replace(value);
		if ("*".equals(value)) {
			return "%";
		} else if (value.startsWith("*") && value.endsWith("*")) {
			return "%" + value.substring(1, value.length() - 1) + "%";
		}
		// if ("*".equals(value)) {
		// return "";
		// } else if (value.startsWith("*") && value.endsWith("*")) {
		// return "" + value.substring(1, value.length() - 1) + "";
		// }
		return value;
	}

	private String transNativeMongoValue(String value) {
		value = Neo4jStringUtils.replace(value);
		if ("*".equals(value)) {
			return "";
		} else if (value.startsWith("*") && value.endsWith("*")) {
			return "" + value.substring(1, value.length() - 1) + "";
		}
		return value;
	}

	@Override
	public int delete(CiCategory category, JSONArray datas) throws Exception {
		List<CiInformation> infos = new ArrayList<CiInformation>();
		if (datas.size() > 0) {
			for (int j = 0; j < datas.size(); j++) {
				JSONObject data = datas.getJSONObject(j);
				String id = data.getString("id");
				//
				CiInformation info = new CiInformation();
				info.setCategoryId(category.getId());
				info.setId(id);
				infos.add(info);
			}
			infoStorage.delete(infos);
			return infos.size();
		}
		return 0;
	}

	public List<CiInformation> getByIds(List<String> jsonid) {

		try {
			return infoStorage.getByJsonIds(jsonid, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public List<CiInformation> getCis(List<String> jsonid,
			List<CiCategory> cicates) {
		List<CiInformation> infos = new ArrayList<CiInformation>();
		for (String string : jsonid) {
			JSONArray infoMap = JSONArray.fromObject(string);
			String cid = infoMap.getString(0), id = infoMap.getString(1);
			CiInformation info = new CiInformation();
			info.setCategoryId(cid);
			info.setId(id);
			infos.add(info);
		}

		try {
			return infoStorage.getCis(infos, cicates);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<CiInformation> getAll() throws Exception {
		return infoStorage.getAll();
	}

}