package com.mmdb.model.security;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.neo4j.graphdb.Direction;

import com.mmdb.core.framework.neo4j.annotation.RelationTo;
import com.mmdb.core.framework.neo4j.annotation.Space;
import com.mmdb.core.framework.neo4j.annotation.Uuid;
import com.mmdb.core.framework.neo4j.entity.NodeEntity;

@Space("userGroup")
public class UserGroup extends NodeEntity {
    private static final long serialVersionUID = -3830987877303686853L;
    @Uuid
    private String id;
    private String description;
    @RelationTo(elementClass = Authorize.class, type = "UserGroup->Authorize", direction = Direction.INCOMING)
    private List<Authorize> authorizes = new ArrayList<Authorize>();

    @RelationTo(elementClass = Role.class, type = "UserGroup->Role", direction = Direction.INCOMING)
    private List<Role> roles = new ArrayList<Role>();

    public UserGroup() {
    }

    public UserGroup(String id, String description) {
        super();
        this.id = id;
        this.description = description;
    }

    public UserGroup(String id, String description, List<Role> roles, List<Authorize> authorizes) {
        this(id, description);
        this.roles = roles;
        this.authorizes = authorizes;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public List<Authorize> getAuthorizes() {
        return authorizes;
    }

    public void setAuthorizes(List<Authorize> authorizes) {
        this.authorizes = authorizes;
    }

    public List<Role> getRoles() {
        return roles;
    }

    public void setRoles(List<Role> roles) {
        this.roles = roles;
    }

    public Map<String, Object> asMap() {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("_id_", this.getId());
        map.put("_neo4jid_", this.getId());
        map.put("id", this.getId());
        Set<String> auths = new HashSet<String>();
        for (Authorize auth : this.getAuthorizes()) {
            auths.add(auth.getId());
        }
        map.put("authorize", auths);
        Set<String> roles = new HashSet<String>();
        for (Role role : this.getRoles()) {
            roles.add(role.getId());
        }
        map.put("role", roles);
        map.put("description", this.getDescription());
        return map;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        if (!super.equals(o)) return false;

        UserGroup userGroup = (UserGroup) o;

        if (id != null ? !id.equals(userGroup.id) : userGroup.id != null) return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = super.hashCode();
        result = 31 * result + (id != null ? id.hashCode() : 0);
        return result;
    }
}
