package com.mmdb.model.categroy.storage;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.neo4j.shell.util.json.JSONException;
import org.neo4j.shell.util.json.JSONObject;
import org.springframework.stereotype.Component;

import com.mmdb.core.log.Log;
import com.mmdb.core.log.LogFactory;
import com.mmdb.model.categroy.UserCategory;
import com.mmdb.model.db.neo4jdb.Neo4jDao;
import com.mmdb.model.mapping.SourceToCategoryMapping;
import com.mmdb.mongo.MongoConnect;
import com.mmdb.util.Neo4jStringUtils;

/**
 * 用户分类 - 存储仓库
 * 
 * @author TY
 * @version 2015年5月24日
 */
@Component("userCateStorage")
public class UserCateStorage {
	private Log log = LogFactory.getLogger("userCateStorage");

	/**
	 * 批量删除
	 * 
	 * @param list
	 * @throws Exception
	 */
	public void delete(List<UserCategory> list) throws Exception {
		Set<String> ids = new HashSet<String>();
		for (UserCategory uc : list) {
			List<UserCategory> allChildren = uc.getAllChildren();
			for (UserCategory uCate : allChildren) {
				ids.add(uCate.getId());
			}
			ids.add(uc.getId());
		}
		delete(ids);
	}

	/**
	 * 单个删除
	 * 
	 * @param t
	 * @throws Exception
	 */
	public void delete(UserCategory t) throws Exception {
		List<UserCategory> allChildren = t.getAllChildren();
		Set<String> ids = new HashSet<String>();
		for (UserCategory uCate : allChildren) {
			ids.add(uCate.getId());
		}
		ids.add(t.getId());
		delete(ids);
	}

	/**
	 * 真正执行删除的语句
	 * 
	 * @param uCateIds
	 * @throws Exception
	 */
	private void delete(Set<String> uCateIds) throws Exception {
		PreparedStatement stmt = null;
		try {
			String del = "delete from UserCategory where `id` = ?";
			Connection conn = MongoConnect.getConnection();
			stmt = conn.prepareStatement(del);
			for (String id : uCateIds) {
				stmt.setString(1, id);
				stmt.executeUpdate();
			}
		} finally {
			if (stmt != null) {
				stmt.close();
			}
		}

	}

	/**
	 * 清空
	 * 
	 * @throws Exception
	 */
	public void deleteAll() throws Exception {
		String del = "delete from UserCategory";
		MongoConnect.executeUpdate(del);
	}

	/**
	 * 获取所有用户分类
	 * 
	 * @return
	 * @throws Exception
	 */
	public List<UserCategory> getAll() throws Exception {
		long stime = System.currentTimeMillis();
		List<UserCategory> result = new ArrayList<UserCategory>();
		Connection conn = MongoConnect.getConnection();
		Statement st = null;
		ResultSet rs = null;
		try {
			String match = "select * from UserCategory";
			st = conn.createStatement();
			rs = st.executeQuery(match);
			while (rs.next()) {
				ResultSetMetaData metaData = rs.getMetaData();
				int count = metaData.getColumnCount();
				Map<String, String> map = new HashMap<String, String>();
				for (int i = 1; i <= count; i++) {
					String label = metaData.getColumnLabel(i);
					String value = rs.getString(label);
					map.put(label, value);
				}
				result.add(nodeToObject(map));
			}

			for (UserCategory cate1 : result) {
				for (UserCategory cate2 : result) {
					if (!cate1.getName().equals(cate2.getName())) {
						if (cate1.getParentId().equals(cate2.getId())) {
							List<UserCategory> children = cate2.getChildren();
							if (children != null) {
								if (!children.contains(cate1)) {
									children.add(cate1);
								}
							} else {
								children = new ArrayList<UserCategory>();
								children.add(cate1);
								cate2.setChildren(children);
							}
							cate1.setParent(cate2);
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		} finally {
			if (st != null) {
				st.close();
			}
			st = null;
			if (rs != null) {
				rs.close();
			}
			rs = null;
		}

		log.dLog("查询用户分类耗时：" + (System.currentTimeMillis() - stime));
		return result;
	}

	public List<UserCategory> getByProperty(String key, Object value)
			throws Exception {
		List<UserCategory> ret = new ArrayList<UserCategory>();
		List<UserCategory> all = getAll();
		for (UserCategory uCate : all) {
			Map<String, String> asMap = asMap(uCate);
			if (asMap.get(key).equals(value)) {
				ret.add(uCate);
			}
		}
		return ret;
	}

	private Map<String, String> asMap(UserCategory uCate) {
		Map<String, String> ret = new HashMap<String, String>();
		UserCategory parent = uCate.getParent();
		String id = uCate.getId();
		String name = uCate.getName();
		String parentId = null;
		if (parent != null) {
			parentId = parent.getId();
		}
		ret.put("id", id);
		ret.put("name", name);
		ret.put("parentId", parentId);
		return ret;
	}

	public UserCategory nodeToObject(Map<String, String> data) {
		UserCategory uCate = new UserCategory();
		uCate.setId(data.get("id"));
		uCate.setName(data.get("name"));
		uCate.setParentId(data.get("parentId"));
		return uCate;
	}

	/**
	 * 保存用户分类
	 * 
	 * @param t
	 * @return
	 * @throws Exception
	 */
	public UserCategory save(UserCategory uCate) throws Exception {
		try {
			log.dLog("用户分类[" + uCate.getId() + "]开始创建!");
			Map<String, String> asMap = asMap(uCate);
			Connection conn = MongoConnect.getConnection();
			StringBuffer crt = new StringBuffer();
			Set<String> keySet = asMap.keySet();
			crt.append("insert into UserCategory(");
			StringBuffer v = new StringBuffer();
			for (String key : keySet) {
				crt.append("`");
				crt.append(key);
				crt.append("`,");

				v.append("?,");
			}
			crt.delete(crt.length() - 1, crt.length());
			v.delete(v.length() - 1, v.length());
			crt.append(") values (");
			crt.append(v);
			v = null;
			crt.append(")");

			PreparedStatement pstmt = conn.prepareStatement(crt.toString());
			int i = 0;
			for (String key : keySet) {
				pstmt.setString(++i, asMap.get(key));
			}
			pstmt.executeUpdate();
			List<UserCategory> uCates = getByProperty("id", asMap.get("id"));
			if (uCates.size() == 1) {
				log.dLog("用户分类[" + uCate.getId() + "]创建成功!");
				return uCates.get(0);
			} else {
				throw new Exception("用户分类[" + uCate.getId() + "]创建失败!");
			}
		} catch (Exception e) {
			delete(uCate);
			throw e;
		}
	}

	/**
	 * 修改用户分类
	 * 
	 * @param t
	 * @return
	 * @throws Exception
	 */
	public UserCategory update(UserCategory t) throws Exception {
		StringBuffer upd = new StringBuffer();
		upd.append("update UserCategory set ");
		Map<String, String> asMap = asMap(t);
		Set<String> keySet = asMap.keySet();
		for (String key : keySet) {
			upd.append(" `");
			upd.append(key);
			upd.append("` = ?,");
		}
		upd.delete(upd.length() - 1, upd.length());
		upd.append(" where id = '");
		upd.append(asMap.get("id"));
		upd.append("'");
		Connection conn = MongoConnect.getConnection();
		PreparedStatement pstmt = conn.prepareStatement(upd.toString());
		int i = 0;
		for (String key : keySet) {
			pstmt.setString(++i, asMap.get(key));
		}
		pstmt.executeUpdate();

		List<UserCategory> mappings =  getByProperty("id", asMap.get("id"));
		if (mappings.size() == 1) {
			log.dLog("用户分类[" + t.getId() + "]属性更新成功!");
			return mappings.get(0);
		} else if (mappings.size() > 1) {
			log.eLog("用户分类[" + t.getId() + "]不唯一");
			throw new Exception("用户分类[" + t.getId() + "]不唯一");
		} else {
			log.eLog("用户分类[" + t.getId() + "]不存在");
			throw new Exception("用户分类[" + t.getId() + "]不存在");
		}
	}

	/**
	 * 查询视图分类
	 * 
	 * @param id
	 *            视图分类id
	 * @return UserCategory
	 * @throws Exception
	 */
	public UserCategory getById(String id) throws Exception {
		UserCategory ret = null;
		List<UserCategory> allL = this.getAll();
		for (UserCategory uc : allL) {// 这个方法写得很无奈啊，有机会一定改了
			if (uc.getId().equals(id)) {
				ret = uc;
			}
		}
		return ret;
	}

}
