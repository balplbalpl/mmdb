package com.mmdb.rest.subscription;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONObject;

import org.restlet.Context;
import org.restlet.Request;
import org.restlet.Response;
import org.restlet.data.Header;
import org.restlet.data.Status;
import org.restlet.ext.json.JsonRepresentation;
import org.restlet.representation.Representation;
import org.restlet.resource.Get;
import org.restlet.resource.ServerResource;
import org.restlet.util.Series;

import com.mmdb.core.log.Log;
import com.mmdb.core.log.LogFactory;
import com.mmdb.core.utils.SpringContextUtil;
import com.mmdb.model.bean.User;
import com.mmdb.model.bean.UserProfile;
import com.mmdb.model.info.ViewInformation;
import com.mmdb.service.info.IViewInfoService;
import com.mmdb.service.relation.ICiViewRelService;
import com.mmdb.service.relation.IViewViewProtfolioRelService;
import com.mmdb.service.role.IUserService;
import com.mmdb.service.subscription.ISubscriptionService;
import com.mmdb.service.subscription.ISubscriptionViewPortfolioService;
import com.mmdb.util.des.Des;

public class UserProfileRest extends ServerResource {
	private Log log = LogFactory.getLogger("UserProfile");
	private IUserService userService;
	private IViewInfoService vInfoService;
	private ISubscriptionService subService;
	private ICiViewRelService ciViewRelService;

	@Override
	public void init(Context context, Request request, Response response) {
		super.init(context, request, response);
		userService = (IUserService) SpringContextUtil.getApplicationContext()
				.getBean("userService");
		vInfoService = (IViewInfoService) SpringContextUtil
				.getApplicationContext().getBean("viewInfoService");
		subService = (ISubscriptionService) SpringContextUtil
				.getApplicationContext().getBean("subscriptionService");
		ciViewRelService = (ICiViewRelService) SpringContextUtil
				.getApplicationContext().getBean("ciViewRelServiceImpl");
	}

	/**
	 * 获取用户订阅相关的信息
	 * 
	 * @param entity
	 * @return
	 */
	@Get
	public Representation getMethod(Representation entity) {
		return getSub();
	}

	private Representation getSub() {
		JSONObject ret = new JSONObject();
		User user = getUser();
		String username = user.getLoginName();
		try {
			List<String> viewIds = subService.getViewBySubscriber(username);
			List<ViewInformation> vInfos = vInfoService.getByids(viewIds);
			if (vInfos == null) {
				vInfos = new ArrayList<ViewInformation>();
			}
			List<ViewInformation> subView = new ArrayList<ViewInformation>();
			List<ViewInformation> ownView = new ArrayList<ViewInformation>();
			List<ViewInformation> ownPubView = new ArrayList<ViewInformation>();
			List<ViewInformation> ownPriView = new ArrayList<ViewInformation>();
			Map<String, Map<String, Object>> content = new HashMap<String, Map<String, Object>>();
			int totalSub = 0;

			for (ViewInformation info : vInfos) {
				if (info.getUserName().equals(username)) {
					ownView.add(info);
				} else {
					subView.add(info);
				}
				Map<String, Object> asMap = info.asMapForRest();
				List<String> ciIds = ciViewRelService.getByView(info
						.getCategoryId());
				if (ciIds == null) {
					asMap.put("ciSize", 0);
				} else {
					asMap.put("ciSize", ciIds.size());
				}
				content.put(info.getId(), asMap);
			}

			for (ViewInformation info : ownView) {
				if (info.getOpen()) {
					ownPubView.add(info);
					totalSub += info.getSubscripers().size();
					totalSub--;
				} else {
					ownPriView.add(info);
				}
			}

			// 排hot
			List<String> hot = new ArrayList<String>();
			Collections.sort(ownPubView, new Comparator<ViewInformation>() {
				@Override
				public int compare(ViewInformation o1, ViewInformation o2) {
					// 订阅最多的在前面
					return o2.getSubscripers().size()
							- o1.getSubscripers().size();
				}
			});
			for (ViewInformation info : ownPubView) {
				hot.add(info.getId());
			}
			// 排最后修改时间
			List<String> lastUpdate = new ArrayList<String>();
			Collections.sort(ownView, new Comparator<ViewInformation>() {
				@Override
				public int compare(ViewInformation o1, ViewInformation o2) {
					return (int) (o2.getUpdateTime() - o1.getUpdateTime());
				}
			});
			for (ViewInformation info : ownView) {
				lastUpdate.add(info.getId());
			}
			// 排订阅视图最后修改时间
			List<String> subLastUpdate = new ArrayList<String>();
			Collections.sort(subView, new Comparator<ViewInformation>() {
				@Override
				public int compare(ViewInformation o1, ViewInformation o2) {
					return (int) (o2.getUpdateTime() - o1.getUpdateTime());
				}
			});
			for (ViewInformation info : subView) {
				subLastUpdate.add(info.getId());
			}
			UserProfile userProfile = new UserProfile(ownView.size(),
					ownPubView.size(), ownPriView.size(), totalSub, user,
					lastUpdate, subLastUpdate, hot);
			userProfile.setViews(content);

			// userProfile.setViews(views);
			ret.put("message", "获取用户概况成功");
			ret.put("data", userProfile.asMap());
		} catch (Exception e) {
			e.printStackTrace();
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	public User getUser() {
		Series<Header> headers = getRequest().getHeaders();
		String values = headers.getValues("token");
		if (values == null || "".equals(values))
			return null;
		Des des = new Des();
		String decrypt = des.decrypt(values);
		String[] split = decrypt.split("\\|");
		return userService.getUserByLoginName(split[0]);
	}
}
