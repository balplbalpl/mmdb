package com.mmdb.model.relation.storage;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.neo4j.shell.util.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mmdb.core.framework.neo4j.entity.Dynamic;
import com.mmdb.core.log.Log;
import com.mmdb.core.log.LogFactory;
import com.mmdb.core.utils.TimeUtil;
import com.mmdb.model.categroy.CiCategory;
import com.mmdb.model.categroy.UserCategory;
import com.mmdb.model.categroy.ViewCategory;
import com.mmdb.model.categroy.storage.CiCateStorage;
import com.mmdb.model.categroy.storage.UserCateStorage;
import com.mmdb.model.categroy.storage.CiCateStorage;
import com.mmdb.model.db.neo4jdb.Neo4jDao;
import com.mmdb.model.info.UserInformation;
import com.mmdb.model.info.CiInformation;
import com.mmdb.model.info.ViewInformation;
import com.mmdb.model.relation.UserCiRelation;
import com.mmdb.util.HexString;
import com.mmdb.util.Neo4jStringUtils;

@Service("userCiRelStorage")
public class UserCiRelStorage {
	private Log log = LogFactory.getLogger("UserCiRelStorage");
	
	@Autowired
	private UserCateStorage userCateStorage;
	@Autowired
	private CiCateStorage ciCateStorage;
	
	
	 /**
     * 获取总数
     * @return
     * @throws Exception
     */
	public int count() throws Exception {
    	int count = 0;
		String CQL = "match (n:User2Ci) return count(n)";
		count = (int) Neo4jDao.getDataLong(CQL);
		return count;
	}


	/**
	 * 批量删除
	 * @param list
	 * @throws Exception
	 */
	public void delete(List<UserCiRelation> list) throws Exception {
		String trem = "";
		for(UserCiRelation uv: list){
			trem += " '"+ uv.getNeo4jid() + "',";
		}
		trem = trem.substring(0, trem.length()-1);
		String CQL = "match (n:User)-[r:User2Ci]->(m:Ci) where id(r) in ["+trem+"] delete r";
		Neo4jDao.getDataList(CQL);
	}


	/**
	 * 单个删除
	 * @param t
	 * @throws Exception
	 */
	public void delete(UserCiRelation t) throws Exception {
		String CQL = "match (n:User)-[r:User2Ci]->(m:Ci) where id(r)="+t.getNeo4jid()+" delete r";
		Neo4jDao.getDataList(CQL);
	}


	/**
	 * 删除全部
	 * @throws Exception
	 */
	public void deleteAll() throws Exception {
		String CQL = "match (n:User)-[r:User2Ci]->(m:Ci)  delete r";
		Neo4jDao.getDataList(CQL);
	}

	
	/**
	 * 获取全部
	 * @return
	 * @throws Exception
	 */
	public List<UserCiRelation> getAll() throws Exception {
		return this.query("match(a:User)-[l:User2Ci]->(b:Ci) return a,l,b", 0, 1, 2);
	}


	
//	public List<UserCiRelation> getByProperty(String key, Object value)
//			throws Exception {
//		// TODO Auto-generated method stub
//		return super.getByProperty(key, value);
//	}


	
	public UserCiRelation getOne(Long neo4jid) throws Exception {
		String CQL = "match (n:User)-[r:User2Ci]->(m:Ci) where id(r) = "+neo4jid +" return a,l,b";
		List<UserCiRelation> cvL = this.query(CQL, 0, 1, 2);
		if(cvL.size() == 1){
			return cvL.get(0);
		}if(cvL.size() == 0){
			throw new Exception("获取User-Ci关系["+neo4jid+"]不存在");
		}else{
			throw new Exception("获取User-Ci关系["+neo4jid+"]不唯一");
		}
	}


//	public RelationshipType getRelationType(UserCiRelation t)
//			throws Exception {
//		// TODO Auto-generated method stub
//		return super.getRelationType(t);
//	}
//
//	
//	public RelationshipType getRelationType2() throws ClassNotFoundException {
//		// TODO Auto-generated method stub
//		return super.getRelationType2();
//	}



	
	public List<UserCiRelation> query(Object query) throws Exception {
		List<UserCiRelation> cvL = new ArrayList<UserCiRelation>();
		return cvL;
	}

	
	public List<UserCiRelation> query(String bq, int start, int line, int end) throws Exception {
		List<UserCategory> allUser = userCateStorage.getAll();
    	Map<String, UserCategory> allMapUser = new HashMap<String, UserCategory>();
    	for(UserCategory cate:allUser){
    		allMapUser.put(cate.getId(), cate);
    	}
		List<CiCategory> all = ciCateStorage.getAll();
    	Map<String, CiCategory> allMap = new HashMap<String, CiCategory>();
    	for(CiCategory cate:all){
    		allMap.put(cate.getId(), cate);
    	}
    	List<List<JSONObject>> rels = Neo4jDao.getDataMulMap(bq);
    	List<UserCiRelation> result = new ArrayList<UserCiRelation>();
    	for(List l:rels){
    		JSONObject startMap = (JSONObject)l.get(start);
    		JSONObject lineMap = (JSONObject)l.get(line);
    		JSONObject endMap = (JSONObject)l.get(end);
    		
    		UserCiRelation rel = new UserCiRelation();
    		rel.setNeo4jid(Long.parseLong(lineMap.get("id")+""));
    		
    		UserInformation startCi = new UserInformation();
//    		startCi.setNeo4jid(Long.parseLong(startMap.get("id")+""));
    		String username = (String)(((JSONObject)startMap.get("data")).get("username")==null ? "":((JSONObject)startMap.get("data")).get("username"));
    		startCi.setUsername(username);
    		startCi.setPassword(((JSONObject)startMap.get("data")).get("password")==null ? "":((JSONObject)startMap.get("data")).get("password").toString());
    		startCi.setPhone(((JSONObject)startMap.get("data")).get("phone")==null ? "":((JSONObject)startMap.get("data")).get("phone").toString());
    		startCi.setEmail(((JSONObject)startMap.get("data")).get("email")==null ? "":((JSONObject)startMap.get("data")).get("email").toString());
    		String startCate = (String)(((JSONObject)startMap.get("data")).get("categoryId")==null ? "":((JSONObject)startMap.get("data")).get("categoryId"));
    		startCi.setCategoryId(startCate);
    		startCi.setCategory(allMapUser.get(startCate));
    		startCi.setCreateTime(System.currentTimeMillis());
    		startCi.setUpdateTime(System.currentTimeMillis());
    		rel.setUser(startCi);
    		
    		CiInformation endCi = new CiInformation();
    		endCi.setNeo4jid(Long.parseLong(endMap.get("id")+""));
    		String endId = (String)(((JSONObject)endMap.get("data")).get("id")==null ? "":((JSONObject)endMap.get("data")).get("id"));
    		endCi.setId(endId);
    		String endCate = (String)(((JSONObject)endMap.get("data")).get("categoryId")==null ? "":((JSONObject)endMap.get("data")).get("categoryId"));
    		endCi.setCategoryId(endCate);
    		endCi.setCategory(allMap.get(endCate));
    		String endScene = (String)(((JSONObject)endMap.get("data")).get("scene")==null ? "":((JSONObject)endMap.get("data")).get("scene"));
    		endCi.setSource((String)((JSONObject)endMap.get("data")).get("source"));
    		endCi.setTag((String)((JSONObject)endMap.get("data")).get("tag"));
    		endCi.setCreateTime(TimeUtil.convertTime(Long.parseLong(((JSONObject)endMap.get("data")).get("createTime")+""), TimeUtil.YMDHMS));
    		endCi.setUpdateTime(TimeUtil.convertTime(Long.parseLong(((JSONObject)endMap.get("data")).get("updateTime")+""), TimeUtil.YMDHMS));
    		JSONObject sMap = (JSONObject)endMap.get("data");
    		Dynamic<String, Object> sdMap = new Dynamic<String, Object>();
//    		Set sSet = sMap.keySet();
    		Iterator sIt = sMap.keys();
    		while(sIt.hasNext()){
    			String key = (String)sIt.next();
    			if(key.endsWith("data$")){
    				sdMap.put(key.replace("data$", ""), sMap.get(key));
    			}
    		}
    		endCi.setData(sdMap);
    		rel.setCi(endCi);
    		rel.setId(startMap.get("id")+"_"+rel.getRelation()+"_"+endMap.get("id"));
    		result.add(rel);
    	}
    	return result;
	}

	
//	public List<UserCiRelation> queryByProperty(String key, Object value)
//			throws Exception {
//		// TODO Auto-generated method stub
//		return super.queryByProperty(key, value);
//	}


	public UserCiRelation save(UserCiRelation relation) throws Exception {
		UserInformation startCi = relation.getUser();
    	String startId = Neo4jStringUtils.cypherESC(startCi.getUsername());
    	String startCate = Neo4jStringUtils.cypherESC(startCi.getCategoryId());
    	CiInformation endCi = relation.getCi();
    	String endId = Neo4jStringUtils.cypherESC(endCi.getId());
    	String endCate = Neo4jStringUtils.cypherESC(endCi.getCategoryId());
//    	String relType = Neo4jStringUtils.cypherESC(startCi.getNeo4jid()+"_"+relation.getRelation()+"_"+endCi.getNeo4jid());
    	String relType = HexString.encode(HexString.json2Str(startCi.getCategoryId(), startCi.getUsername())) + "_USER2CI_" + HexString.encode(HexString.json2Str(endCi.getCategoryId(),endCi.getId()));
    	
    	String cypher = "match(a:User {`id`:'"+startId+"',`categoryId`:'"+startCate+"'})," +
    					"(b:Ci{`id`:'"+endId+"',`categoryId`:'"+endCate+"'})" +
    					" merge (a)-[l:User2Ci{id:'"+relType+"'}]->(b) "+
    					"set l.`startCate`='"+startCate+"',l.`startCi`='"+startId+"'," +
    					"l.`endCate`='"+endCate+"',l.`endCi`='"+endId+"'";
    	Neo4jDao.executeNoRest(cypher);
    	
    	return getById(relType);
	}

	
//	public void setIndex(RelationIndex index) {
//		// TODO Auto-generated method stub
//		super.setIndex(index);
//	}

	
	public UserCiRelation update(Long id, UserCiRelation t) throws Exception {
		t.setNeo4jid(id);
    	delete(t);
        return save(t);
	}


	public UserCiRelation update(UserCiRelation t) throws Exception {
		delete(t);
		return save(t);
	}




	/**
	 * 根据id获取用户和视图的关系
	 * 
	 * @param id
	 *            分类id（当前分类中唯一）
	 * @return
	 * @throws Exception
	 */
	public UserCiRelation getById(String id) throws Exception {
		id = Neo4jStringUtils.cypherESC(id);
		String CQL = "match (a:User)-[l:User2Ci]->(b:Ci)  where l.`id` = '"+id+"' return a,l,b";
		List<UserCiRelation> cvL = this.query(CQL, 0, 1, 2);
		if(cvL.size() == 1){
			return cvL.get(0);
		}if(cvL.size() == 0){
			throw new Exception("获取User-Ci关系["+id+"]不存在");
		}else{
			throw new Exception("获取User-Ci关系["+id+"]不唯一");
		}
	}
	
//	/**
//	 * 创建User到Ci的是否可见关系  
//	 * @param [ucL user] Cate 用户分类集合
//	 * @param [uiL user] Info 用户信息集合   uiL不为空时以uiL为准
//	 * @param [ccL ci] Cate CI分类集合
//	 * @param [ciL ci] Info CI信息集合  ciL不为空时以ciL为准
//	 * @return
//	 */
//	public void UserCateToCiCate(List<String> ucL,List<String> uiL,List<String> ccL,List<String> ciL){
//		StringBuffer CQLmatch = new StringBuffer(); //接收所有查询语句
//		StringBuffer CQLcreate = new StringBuffer();//接收所有创建关系的语句
//		int loop = 1;//循环参数
//		if(uiL == null && ciL == null){ //分类指向分类
//			for(int i=0;i<ucL.size();i++){
//				String uc = Neo4jStringUtils.cypherESC(ucL.get(i));
//				for(int j=0;j<ccL.size();j++){
//					String n = "n"+loop;
//					String m = "m"+loop;
//					String cc = Neo4jStringUtils.cypherESC(ccL.get(j));
//					CQLmatch.append("match ("+n+":UserCate) where "+n+".`id` = '"+uc+"' match ("+m+":CiCategory) where "+m+".`id` = '"+cc+"' ");
//					CQLcreate.append("merge ("+n+")-[:UserCate2CiCate]->("+m+") ");
//					loop++;
//				}
//			}
//		}else if(uiL != null && ciL == null){ //user指向分类
//			for(int i=0;i<uiL.size();i++){
//				String ui = Neo4jStringUtils.cypherESC(uiL.get(i));
//				for(int j=0;j<ccL.size();j++){
//					String n = "n"+loop;
//					String m = "m"+loop;
//					String cc = Neo4jStringUtils.cypherESC(ccL.get(j));
//					CQLmatch.append("match ("+n+":User) where "+n+".`uesrname` = '"+ui+"' match ("+m+":CiCategory) where "+m+".`id` = '"+cc+"' ");
//					CQLcreate.append("merge ("+n+")-[:User2CiCate]->("+m+") ");
//					loop++;
//				}
//			}
//		}else if(uiL == null && ciL != null){ // 分类指向Ci
//			for(int i=0;i<ucL.size();i++){
//				String uc = Neo4jStringUtils.cypherESC(ucL.get(i));
//				for(int j=0;j<ciL.size();j++){
//					String n = "n"+loop;
//					String m = "m"+loop;
//					String ci = Neo4jStringUtils.cypherESC(ciL.get(j));
//					CQLmatch.append("match ("+n+":UserCate) where "+n+".`id` = '"+uc+"' match ("+m+":Ci) where "+m+".`id` = '"+ci+"' ");
//					CQLcreate.append("merge ("+n+")-[:UserCate2Ci]->("+m+") ");
//					loop++;
//				}
//			}
//		}else{ //user指向Ci
//			for(int i=0;i<uiL.size();i++){
//				String ui = Neo4jStringUtils.cypherESC(uiL.get(i));
//				for(int j=0;j<ciL.size();j++){
//					String n = "n"+loop;
//					String m = "m"+loop;
//					String ci = Neo4jStringUtils.cypherESC(ciL.get(j));
//					CQLmatch.append("match ("+n+":User) where "+n+".`uesrname` = '"+ui+"' match ("+m+":Ci) where "+m+".`id` = '"+ci+"' ");
//					CQLcreate.append("merge ("+n+")-[:User2Ci]->("+m+") ");
//					loop++;
//				}
//			}
//		}
//		String CQL = CQLmatch.append(CQLcreate)+"";
//		Neo4jDao.executeNoRest(CQL);
//		
//	}
	
	
	/**
	 * 创建User到Ci的是否可见关系  
	 * @param [ucL user] Cate 用户分类集合
	 * @param [uiL user] Info 用户信息集合   uiL不为空时以uiL为准
	 * @param [ccL ci] Cate CI分类集合
	 * @param [ciL ci] Info CI信息集合  ciL不为空时以ciL为准
	 * @return
	 */
	public void UserCateToCiCateM(List<UserCategory> ucL,List<UserInformation> uiL,List<CiCategory> ccL,List<CiInformation> ciL){
		StringBuffer CQLmatch = new StringBuffer(); //接收所有查询语句
		StringBuffer CQLcreate = new StringBuffer();//接收所有创建关系的语句
		int loop = 1;//循环参数
		if(uiL == null && ciL == null){ //分类指向分类
			for(int i=0;i<ucL.size();i++){
				UserCategory uc = ucL.get(i);
				for(int j=0;j<ccL.size();j++){
					String n = "n"+loop;
					String m = "m"+loop;
					CiCategory cc = ccL.get(j);
					CQLmatch.append("match ("+n+":UserCate) where "+n+".id = '"+Neo4jStringUtils.cypherESC(uc.getId())+"'  match ("+m+":CiCategory) where "+m+".id = '"+Neo4jStringUtils.cypherESC(cc.getId())+"' ");
					CQLcreate.append("merge ("+n+")-[:UserCate2CiCate]->("+m+") ");
					loop++;
				}
			}
		}else if(uiL != null && ciL == null){ //user指向分类
			for(int i=0;i<uiL.size();i++){
				UserInformation ui = uiL.get(i);
				for(int j=0;j<ccL.size();j++){
					String n = "n"+loop;
					String m = "m"+loop;
					CiCategory cc = ccL.get(j);
					CQLmatch.append("match ("+n+":User) where "+n+".uesrname = '"+Neo4jStringUtils.cypherESC(ui.getUsername())+"' and "+n+".categoryId = '"+Neo4jStringUtils.cypherESC(ui.getCategoryId())+"'"
							+ " match ("+m+":CiCategory) where "+m+".id = '"+cc.getId()+"' ");
					CQLcreate.append("merge ("+n+")-[:User2CiCate]->("+m+") ");
					loop++;
				}
			}
		}else if(uiL == null && ciL != null){ // 分类指向Ci
			for(int i=0;i<ucL.size();i++){
				UserCategory uc = ucL.get(i);
				for(int j=0;j<ciL.size();j++){
					String n = "n"+loop;
					String m = "m"+loop;
					CiInformation ci = ciL.get(j);
					CQLmatch.append("match ("+n+":UserCate) where "+n+".id = '"+Neo4jStringUtils.cypherESC(uc.getId())+"' match ("+m+":Ci) where "+m+".id = '"+ci.getId()+"' and "+m+".categoryId = '"+Neo4jStringUtils.cypherESC(ci.getCategoryId())+"' ");
					CQLcreate.append("merge ("+n+")-[:UserCate2Ci]->("+m+") ");
					loop++;
				}
			}
		}else if(uiL != null && ciL != null){ //user指向Ci
			for(int i=0;i<uiL.size();i++){
				UserInformation ui = uiL.get(i);
				for(int j=0;j<ciL.size();j++){
					String n = "n"+loop;
					String m = "m"+loop;
					CiInformation ci = ciL.get(j);
					CQLmatch.append("match ("+n+":User) where "+n+".uesrname = '"+ui.getUsername()+"' and "+n+".categoryId = '"+Neo4jStringUtils.cypherESC(ui.getCategoryId())+"' match ("+m+":Ci) where "+m+".id = '"+ci.getId()+"' and "+m+".categoryId = '"+Neo4jStringUtils.cypherESC(ci.getCategoryId())+"' ");
					CQLcreate.append("merge ("+n+")-[:User2Ci]->("+m+") ");
					loop++;
				}
			}
		}else{
			log.eLog("建立用户-CI关系数据异常");
		}
		String CQL = CQLmatch.append(CQLcreate)+"";
		Neo4jDao.executeNoRest(CQL);
		
	}

	
}
