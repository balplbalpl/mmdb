package com.mmdb.rest.info;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import jxl.Workbook;
import jxl.format.Colour;
import jxl.format.UnderlineStyle;
import jxl.write.Label;
import jxl.write.WritableCellFeatures;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.bson.types.ObjectId;
import org.restlet.Context;
import org.restlet.Request;
import org.restlet.Response;
import org.restlet.data.Form;
import org.restlet.data.Header;
import org.restlet.data.Status;
import org.restlet.ext.fileupload.RestletFileUpload;
import org.restlet.ext.json.JsonRepresentation;
import org.restlet.representation.Representation;
import org.restlet.resource.Delete;
import org.restlet.resource.Get;
import org.restlet.resource.Post;
import org.restlet.resource.Put;
import org.restlet.resource.ServerResource;
import org.restlet.util.Series;

import com.mmdb.core.log.Log;
import com.mmdb.core.log.LogFactory;
import com.mmdb.core.utils.ExcleJxlReadUtil;
import com.mmdb.core.utils.ExcleJxlReadUtil.Sublist;
import com.mmdb.core.utils.ExcleJxlReadUtil.Table;
import com.mmdb.core.utils.SpringContextUtil;
import com.mmdb.core.utils.SysProperties;
import com.mmdb.model.bean.Attribute;
import com.mmdb.model.bean.User;
import com.mmdb.model.categroy.CiCategory;
import com.mmdb.model.info.CiInformation;
import com.mmdb.service.category.ICiCateService;
import com.mmdb.service.info.ICiInfoService;
import com.mmdb.service.role.IUserService;
import com.mmdb.service.role.impl.UserService;
import com.mmdb.util.FileManager;
import com.mmdb.util.HexString;
import com.mmdb.util.des.Des;
import com.mmdb.websocket.MessageResult;

public class CiInfoRest extends ServerResource {
	private Log log = LogFactory.getLogger("CiInfoBuzImpl");
	private ICiCateService cateService;
	private ICiInfoService infoService;
	private IUserService userService;

	@Override
	public void init(Context context, Request request, Response response) {
		super.init(context, request, response);
		cateService = (ICiCateService) SpringContextUtil
				.getApplicationContext().getBean("ciCateService");

		infoService = (ICiInfoService) SpringContextUtil
				.getApplicationContext().getBean("ciInfoService");
		
		userService = (IUserService) SpringContextUtil.getApplicationContext()
				.getBean("userService");
	}

	@Get
	public Representation getMethod(Representation entity) {
		JSONObject ret = new JSONObject();
		String param1 = (String) getRequestAttributes().get("param1");
		if (param1 != null) {
			try {
				param1 = URLDecoder.decode(param1, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + param1 + "]解析失败");
				getResponse().setStatus(new Status(600));
				return new JsonRepresentation(ret.toString());
			}
		}
		if (param1 == null || "".equals(param1)) {
			return getAll();
		} else if ("export".equals(param1)) {// 导出全部,包含内容
			return exportData(null, null, true);
		} else {
			return getByJsonid(param1);
		}
	}

	@SuppressWarnings("unchecked")
	@Post
	public Representation postMethod(Representation entity) {
		JSONObject ret = new JSONObject();
		// ret.put("message", "参数数量不正确");
		String param1 = (String) getRequestAttributes().get("param1");
		if (param1 != null) {
			try {
				param1 = URLDecoder.decode(param1, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + param1 + "]解析失败");
				getResponse().setStatus(new Status(600));
				return new JsonRepresentation(ret.toString());
			}
		}

		if ("import".equals(param1)) {
			return new JsonRepresentation(importData(entity));
		}

		Form form = entity == null ? null : new Form(entity);
		String operation = null;
		try {
			operation = form.getQueryString();
			operation = URLDecoder.decode(operation, "utf-8");
			operation = new String(operation.getBytes("iso-8859-1"), "utf-8");
			JSONObject params = JSONObject.fromObject(operation);

			if (param1 == null || "".equals(param1)) {// 添加一个ci
				if (params.size() == 2 && params.containsKey("categoryId")
						&& params.containsKey("data")) {
					return saveCi(params);
				} else if (params.size() == 1 && params.containsKey("ids")) {
					JSONArray jsonIds = params.getJSONArray("ids");
					return getByJsonids(jsonIds);
				} else {
					return qureyByAdvanced(params);
				}
			} else if ("export".equals(param1)) {// 带条件的导出
				if (params.containsKey("ids") && params.containsKey("hasData")) {
					JSONArray cateIds = params.getJSONArray("ids");
					boolean hasData = params.getBoolean("hasData");
					return exportData(cateIds, null, hasData);
				} else {
					// 下载指定分类下的指定的几个数据
					String cateId = params.getString("cateId");
					JSONArray ciIds = params.getJSONArray("ciIds");
					// boolean hasData = params.getBoolean("hasData");//
					// 这个没用永远是true

					List<String> cateIds = new ArrayList<String>();
					cateIds.add(cateId);
					return exportData(cateIds, ciIds, true);
				}
			}
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "[" + operation + "]解析失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	@Put
	public Representation putMethod(Representation entity) {
		JSONObject ret = new JSONObject();
		Form form = entity == null ? null : new Form(entity);
		String operation = null;
		try {
			operation = form.getQueryString();
			operation = URLDecoder.decode(operation, "utf-8");
			operation = new String(operation.getBytes("iso-8859-1"), "utf-8");
			JSONObject params = JSONObject.fromObject(operation);

			if (params.size() == 2 && params.containsKey("jsonId")
					&& params.containsKey("data")) {
				return editCi(params);
			} else {
				ret.put("message", "参数数量异常");
				getResponse().setStatus(new Status(600));
			}
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "[" + operation + "]解析失败");
			getResponse().setStatus(new Status(600));
		}

		return new JsonRepresentation(ret.toString());
	}

	@SuppressWarnings("unchecked")
	@Delete
	public Representation delMethod(Representation entity) {
		JSONObject ret = new JSONObject();

		String param1 = (String) getRequestAttributes().get("param1");
		if (param1 != null) {
			try {
				param1 = URLDecoder.decode(param1, "utf-8");
			} catch (UnsupportedEncodingException e) {
				log.eLog(e);
				ret.put("message", "[" + param1 + "]解析失败");
				getResponse().setStatus(new Status(600));
				return new JsonRepresentation(ret.toString());
			}
		}

		Form form = entity == null ? null : new Form(entity);
		JSONObject params = null;
		try {
			String operation = form.getQueryString();
			operation = URLDecoder.decode(operation, "utf-8");
			operation = new String(operation.getBytes("iso-8859-1"), "utf-8");
			params = JSONObject.fromObject(operation);
		} catch (Exception e) {

		}

		try {
			if (param1 == null || "".equals(param1)) {
				if (params != null) {
					if (params.containsKey("jsonIds")) {
						return deleteByjsonId(params.getJSONArray("jsonIds"));
					} else if (params.containsKey("categoryIds")) {
						return deleteByCateId(params
								.getJSONArray("categoryIds"));
					}
				}
			} else {// 删除一个属性
				ArrayList<String> jsonids = new ArrayList<String>();
				jsonids.add(param1);
				return deleteByjsonId(jsonids);// param1应该是jsonId
			}

		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		ret.put("message", "未知参数异常");
		getResponse().setStatus(new Status(600));
		return new JsonRepresentation(ret.toString());
	}

	/**
	 * 返回一个json格式全部
	 * 
	 * @return
	 * @throws Exception
	 */
	private Representation getAll() {
		JSONObject ret = new JSONObject();
		try {
			List<CiInformation> all = infoService.getAll();
			JSONArray data = new JSONArray();
			String type = SysProperties.get("svg.base");
			for (CiInformation info : all) {
				Map<String, Object> asMap = info.asMapForRest();
				String image = (String) asMap.get("icon");
				image = "/resource/svg/" + type + "/" + image;
				asMap.put("icon", image);
				data.add(asMap);
			}
			ret.put("data", data);
			ret.put("message", "获取全部配置项数据成功");
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", "获取全部配置项数据失败");
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	/**
	 * 通过唯一id获取ciCategory
	 * 
	 * @param id
	 * @return
	 * @throws Exception
	 */
	private Representation getByJsonid(String id) {
		JSONObject ret = new JSONObject();
		try {
			CiInformation info = infoService.getById(id);
			if (info != null) {
				Map<String, Object> asMap = info.asMapForRest();
				String type = SysProperties.get("svg.base");
				String image = (String) asMap.get("icon");
				image = "/resource/svg/" + type + "/" + image;
				asMap.put("icon", image);

				ret.put("data", asMap);
				ret.put("message", "获取ci[" + id + "]成功");
			} else {
				throw new Exception("获取ci[" + id + "]失败");
			}
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	// @SuppressWarnings("unused")
	private Representation getByJsonids(List<String> jsonIds) {
		JSONObject ret = new JSONObject();
		try {
			log.dLog("getByNeoIds");
			if (jsonIds == null || jsonIds.size() == 0) {
				throw new Exception("JSON参数不能为空");
			}
			List<CiInformation> infos = infoService.getByIds(jsonIds);
			String type = SysProperties.get("svg.base");

			Map<String, Map<String, Object>> map = new HashMap<String, Map<String, Object>>();
			for (CiInformation info : infos) {
				JSONArray ja = new JSONArray();
				ja.add(info.getCategoryId());
				ja.add(info.getId());
				String jsonId = HexString.encode(ja.toString());

				Map<String, Object> asMap = info.asMapForRest();

				String image = (String) asMap.get("icon");
				image = "/resource/svg/" + type + "/" + image;
				asMap.put("icon", image);

				map.put(jsonId, asMap);
			}
			ret.put("data", map);
			ret.put("message", "获取数据成功");
		} catch (Exception me) {
			log.eLog(me);
			ret.put("message", me.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	/**
	 * 模糊查询
	 * 
	 * @param data
	 *            {'categoryId':'','like':{'*':'*
	 *            '},'page':1,pageSize:10,'all':true}
	 * @return
	 */
	@SuppressWarnings("unchecked")
	private JsonRepresentation qureyByAdvanced(JSONObject data) {
		JSONObject ret = new JSONObject();
		try {
			log.dLog("qureyByAdvanced");
			String cateId = data.getString("categoryId");
			Boolean extend = data.getBoolean("all");
			JSONObject orExp = data.getJSONObject("like");
			int page = data.getInt("page");
			int pageSize = data.getInt("pageSize");

			List<CiInformation> list;
			if (orExp == null) {
				throw new Exception("查询条件不能为空");
			}
			if (cateId == null || cateId.equals("")) {
				list = infoService.qureyByAdvanced(null, null, orExp,
						extend == null ? true : extend);
			} else {
				CiCategory nc = cateService.getById(cateId);
				if (nc == null) {
					throw new Exception("分类不存在");
				}
				list = infoService.qureyByAdvanced(nc, null, orExp,
						extend == null ? true : extend);
			}
			// 排序
			// Collections.sort(list, new Comparator<CiInformation>() {
			// public int compare(CiInformation arg0, CiInformation arg1) {
			// return arg0.getNeo4jid().compareTo(arg1.getNeo4jid());
			// }
			// });
			// 构建分页数据输出
			List<Object> datas = new ArrayList<Object>();
			int count = list.size();
			int start = (page - 1) * pageSize;
			start = start < 0 ? 0 : start;
			int end = page * pageSize;
			start = start > count ? count : start;
			end = end > count ? count : end;
			list = list.subList(start, end);
			String type = SysProperties.get("svg.base");
			for (CiInformation info : list) {
				Map<String, Object> infoData = info.asMapForRest();

				String image = (String) infoData.get("icon");
				image = "/resource/svg/" + type + "/" + image;
				infoData.put("icon", image);

				datas.add(infoData);
			}
			Map<String, Object> retMap = new HashMap<String, Object>();
			retMap.put("count", count);
			retMap.put("page", page);
			retMap.put("pageSize", pageSize);
			retMap.put("datas", datas);
			// ret.setData(retMap).setMessage("查询成功");

			ret.put("data", retMap);
			ret.put("message", "查询成功");
			log.dLog("qureyByAdvanced success");
		} catch (Exception me) {
			log.eLog(me);
			ret.put("message", me.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	/**
	 * 导入XML
	 * 
	 * @param entity
	 * @return
	 */
	private String importData(Representation entity) {
		log.dLog("importXls");
		JSONObject ret = new JSONObject();

		DiskFileItemFactory factory = new DiskFileItemFactory();
		RestletFileUpload upload = new RestletFileUpload(factory);

		List<FileItem> items = null;
		try {
			items = upload.parseRepresentation(entity);
		} catch (FileUploadException e) {
			e.printStackTrace();
		}

		String filename = "";
		FileItem fi = items.get(0);
		try {
			filename = fi.getName();
			if (filename == null || filename.equals("")
					|| filename.toLowerCase().trim().indexOf("xls") == -1) {
				log.eLog("文件格式有误");
				throw new Exception("文件格式有误");
			}

			String info = "";
			log.dLog("正在解析EXCEL，请等待...");
			MessageResult.broadcast("正在解析EXCEL，请等待...", 0.1d);

			ExcleJxlReadUtil ejr = new ExcleJxlReadUtil(fi.getInputStream());
			Table table = ejr.getTable();
			List<Sublist> sublist = table.getSublist();
			MessageResult.broadcast("准备分类，请等待...", 0.4d);
			List<CiCategory> all = cateService.getAll();
			Map<String, CiCategory> allMap = new HashMap<String, CiCategory>();
			for (CiCategory cate : all) {
				allMap.put(cate.getName(), cate);
			}
			int totle = 0;
			for (Sublist sl : sublist) {
				totle += sl.getData().size();
			}
			double flag = 0.5d / totle;
			double progress = 0.5;
			MessageResult.broadcast("开始解析sheet，请等待...", progress);
			for (Sublist sl : sublist) {
				String name = sl.getName();
				log.iLog("解析sheet[" + name + "]...");
				MessageResult.broadcast("解析sheet[" + name + "]...", progress);

				if (name.indexOf("-") != -1) {
					String[] cs = name.split("-");
					name = cs[cs.length - 1];
				}
				CiCategory nc = allMap.get(name);
				if (nc == null) {
					info += "分类[" + name + "]不存在";
					String in = "分类[" + name + "]不存在,无法新建数据";
					MessageResult.broadcast(in, progress);
				} else {
					Map<String, String> t = new HashMap<String, String>();
					List<CiInformation> cis = new ArrayList<CiInformation>();
					List<Map<String, Object>> data = sl.getData();
					if (data.size() == 0) {
						MessageResult
								.broadcast("分类[" + name + "]无数据", progress);
					}
					for (Map<String, Object> obj : data) {
						try {
							CiInformation ci = new CiInformation(nc, "XLS", obj);
							String hexId = HexString.encode(HexString.json2Str(
									ci.getCategory().getName(),
									ci.getData().get(
											ci.getCategory().getMajor()
													.getName())));
							if (!t.containsKey(hexId)) {
								t.put(hexId, hexId);
								cis.add(ci);
							}
						} catch (Exception e) {
							String in = e.getMessage();
							MessageResult.broadcast(in, progress);
						}
					}
					if (cis.size() > 0) {
						log.iLog("新建/更新数据开始...");
						MessageResult.broadcast("新建/更新数据开始...", progress);
						Map<String, Long> rm = infoService
								.saveOrUpdate(nc, cis);
						String in = "分类[" + name + "]";
						if (!rm.get("save").equals("0")) {
							in += "新建(" + rm.get("save") + ")条新数据";
						}
						if (!rm.get("update").equals("0")) {
							in += "更新(" + rm.get("update") + ")条数据";
						}
						log.iLog(in);
						MessageResult.broadcast(in, progress);
						progress += flag * cis.size();
						info = info.equals("") ? info : info + "<br/>";
						info += in;
					} else {
						info += "分类[" + name + "]数据不符合要求";
					}
				}
			}
			MessageResult.broadcast("上传数据完成", 1);
			ret.put("message", "上传完成");
			log.dLog("updateForXls success");
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return ret.toString();
	}

	/**
	 * 
	 * @param cateIds
	 *            指定要下载的分类 为null或size=0时下载全部的分类
	 * @param hasData
	 *            是否包含数据
	 * @return
	 */
	private Representation exportData(List<String> cateIds, List<String> ciIds,
			boolean hasData) {
		JSONObject ret = new JSONObject();

		log.dLog("getAllForXls");
		File file = FileManager.getInstance().createFile("配置项数据", "xls");
		if (!file.exists()) {
			try {
				file.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		try {
			List<CiCategory> ncs = cateService.getAll();
			int i = 0;
			WritableWorkbook wb = Workbook.createWorkbook(file);
			for (CiCategory nc : ncs) {
				String id = nc.getId();
				String name = nc.getName();
				List<Attribute> items = nc.getAllAttributes();
				if (cateIds == null || cateIds.size() == 0
						|| cateIds.contains(id)) {
					String pName = nc.getParent() != null ? nc.getParent()
							.getName() + "-" : "";
					WritableSheet ws = wb.createSheet(pName + name, i);
					List<String> title = this.createXlsSheet(ws, items);
					if (hasData) {
						List<CiInformation> datas = infoService
								.qureyByAdvanced(nc, null, null, false);
						List<CiInformation> addDatas = new ArrayList<CiInformation>();
						if (ciIds == null || ciIds.size() == 0) {
							addDatas.addAll(datas);
						} else {
							for (CiInformation info : datas) {

								String jsonId = info.getHexId();
								if (ciIds.contains(jsonId)) {
									addDatas.add(info);
								}
							}
						}
						this.addCell(ws, title, addDatas);
					}
					i++;
				}
			}
			if (wb.getNumberOfSheets() == 0) {
				wb.createSheet("Sheet1", i);
			}
			wb.write();
			wb.close();
			ret.put("message", "下载配置项数据成功");
			JSONObject retData = new JSONObject();
			retData.put("url", file.getName());
			ret.put("data", retData);
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	@SuppressWarnings("unchecked")
	private JsonRepresentation saveCi(JSONObject data) {
		JSONObject ret = new JSONObject();

		try {
			String cateId = data.getString("categoryId");
			data = data.getJSONObject("data");
			log.dLog("save");
			CiCategory nc = cateService.getById(cateId);
			if (nc == null) {
				throw new Exception("分类[" + cateId + "]不存在");
			}
			CiInformation info = new CiInformation(nc, "PAGE", data);

			ret.put("data", infoService.save(info).asMapForRest());
			ret.put("message", "添加成功");
		} catch (Exception me) {
			ret.put("message", me.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	@SuppressWarnings("unchecked")
	private JsonRepresentation editCi(JSONObject data) {
		JSONObject ret = new JSONObject();

		try {
			log.dLog("update");

			String jsonId = data.getString("jsonId");
			data = data.getJSONObject("data");
			if (jsonId == null || jsonId.equals("")) {
				throw new Exception("JSON参数不能为空");
			}

			if (data != null && data.size() > 0) {
				CiInformation info = infoService.getById(jsonId);
				if (info == null) {
					throw new Exception("["
							+ JSONArray.fromObject(jsonId).getString(2)
							+ "]不存在");
				}
				info = infoService.update(info, data, "PAGE");
				ret.put("data", info.asMap());

				ret.put("message", "更新成功");
			} else {
				throw new Exception("参数有空值");
			}
		} catch (Exception me) {
			log.eLog(me);
			ret.put("message", me.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	private JsonRepresentation deleteByCateId(List<String> cateIds) {
		JSONObject ret = new JSONObject();

		try {
			log.dLog("deleteAllCiCategory");
			for (String string : cateIds) {
				CiCategory ciCategory = new CiCategory();
				ciCategory.setId(string);
				infoService.deleteCiByCategory(ciCategory);
			}

			ret.put("message", "删除成功");
		} catch (Exception e) {
			log.eLog(e);
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	private JsonRepresentation deleteByjsonId(List<String> jsonIds) {
		JSONObject ret = new JSONObject();
		try {
			log.dLog("deleteByjsonId");
			infoService.deleteByJsonIds(jsonIds);
			ret.put("message", "删除成功");
		} catch (Exception e) {
			ret.put("message", e.getMessage());
			getResponse().setStatus(new Status(600));
		}
		return new JsonRepresentation(ret.toString());
	}

	private List<String> createXlsSheet(WritableSheet ws, List<Attribute> items)
			throws WriteException {
		WritableFont wf_color = new WritableFont(WritableFont.ARIAL, 10,
				WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE,
				Colour.RED);
		WritableCellFormat wff_color = new WritableCellFormat(wf_color);
		wff_color.setBackground(Colour.GRAY_25);
		WritableFont wf_color2 = new WritableFont(WritableFont.ARIAL, 10,
				WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE);
		WritableCellFormat wff_color2 = new WritableCellFormat(wf_color2);
		List<String> title = new ArrayList<String>();
		int temp = 0;

		for (int j = 0; j < items.size(); j++) {
			Attribute map = items.get(j);
			String required = map.getRequired().toString();
			Label label = null;
			if (Boolean.valueOf(required)) {
				label = new Label(j + temp, 0, map.getName(), wff_color);
			} else {
				label = new Label(j + temp, 0, map.getName(), wff_color2);
			}
			title.add(map.getName());
			WritableCellFeatures wf = new WritableCellFeatures();
			// String info = "数据类型：" + map.getType().getName() + "\n";
			String info = "是否必填：" + map.getRequired() + "\n";
			if (map.getRequired()) {
				info += "缺省数值：" + map.getDefaultValue() + "\n";
			}
			info += "数据来源：" + map.getSources() + "\n";
			wf.setComment(info);
			label.setCellFeatures(wf);
			// label 可以设置宽度
			ws.addCell(label);
		}

		return title;
	}

	/**
	 * 把CI数据写入EXCEL
	 * 
	 * @param ws
	 *            WritableSheet
	 * @param title
	 *            EXCEL标题
	 * @param infos
	 *            CI数组
	 * @throws WriteException
	 */
	private void addCell(WritableSheet ws, List<String> title,
			List<CiInformation> infos) throws WriteException {
		int v = 1;
		for (CiInformation info : infos) {
			Map<String, Object> data = info.getData();
			data.put(info.getCategory().getMajor().getName(), info.getName());
			for (int k = 0; k < title.size(); k++) {
				String value = data.containsKey(title.get(k)) ? String
						.valueOf(data.get(title.get(k))) : "";
				Label label = new Label(k, v, value);
				ws.addCell(label);
			}
			v++;
		}
	}

	public User getUser() {
		Series<Header> headers = getRequest().getHeaders();
		String values = headers.getValues("token");
		Des des = new Des();
		String decrypt = des.decrypt(values);

		String[] split = decrypt.split("\\|");

		User user = userService.getUserByLoginName(split[0]);
		return user;
	}

	public static void main(String[] args) {
		final Set<String> aa = new HashSet<String>(1000000);

		for (int i = 0; i < 10; i++) {
			new Thread() {
				public void run() {
					for (int i = 0; i < 10000; i++) {
						ObjectId objectId = new ObjectId();
						aa.add(objectId.toHexString());
					}
				};
			}.start();
		}
		try {
			Thread.sleep(20000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.out.println(aa.size());
	}
}