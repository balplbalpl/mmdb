package com.mmdb.rest.icon;

import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.List;

import net.sf.json.JSONObject;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.restlet.Context;
import org.restlet.Request;
import org.restlet.Response;
import org.restlet.data.Header;
import org.restlet.data.Status;
import org.restlet.ext.fileupload.RestletFileUpload;
import org.restlet.ext.json.JsonRepresentation;
import org.restlet.representation.Representation;
import org.restlet.resource.Get;
import org.restlet.resource.Post;
import org.restlet.resource.Put;
import org.restlet.resource.ServerResource;
import org.restlet.util.Series;

import com.mmdb.core.log.Log;
import com.mmdb.core.log.LogFactory;
import com.mmdb.core.utils.MD5;
import com.mmdb.core.utils.SpringContextUtil;
import com.mmdb.model.bean.User;
import com.mmdb.model.icon.ViewIcon;
import com.mmdb.service.icon.IViewIconService;
import com.mmdb.service.role.IUserService;
import com.mmdb.util.des.Des;

public class UserIconRest extends ServerResource {
	private Log log = LogFactory.getLogger("UserIcon");
	private IUserService userService;
	private IViewIconService iconService;

	public void init(Context context, Request request, Response response) {
		super.init(context, request, response);
		iconService = (IViewIconService) SpringContextUtil
				.getBean("viewIconService");

		userService = (IUserService) SpringContextUtil.getApplicationContext()
				.getBean("userService");
	}

	@Post
	public Representation postMethod(Representation entity) {
		log.dLog("save user icon");
		JSONObject ret = new JSONObject();
		DiskFileItemFactory factory = new DiskFileItemFactory();
		RestletFileUpload upload = new RestletFileUpload(factory);

		List<FileItem> items = null;
		try {
			items = upload.parseRepresentation(entity);
		} catch (FileUploadException e) {
			log.eLog(e);
		}

		String filename = "";
		try {
			for (FileItem fi : items) {
				String contentType = fi.getContentType();
				if (contentType == null || !contentType.startsWith("image")) {
					throw new Exception("文件格式有误");
				}
				InputStream is = fi.getInputStream();
				if (is.available() > 524288) {// 512kb
					throw new Exception("文件太大了");
				}
				User user = getUser();
				filename = fi.getName();

				filename = new String(filename.getBytes("gbk"), "utf-8");
				filename = user.getLoginName()+filename.substring(filename.indexOf("."));
				byte[] content = new byte[is.available()];
				is.read(content);
				ViewIcon icon = new ViewIcon(filename, user.getLoginName(),
						contentType, content, MD5.md5(content));

				iconService.saveOrUpdateUserIcon(icon);
				iconService.refreshUserIcon(user.getLoginName());
				user.setIcon(filename);
				userService.updateUser(user);
				ret.put("message", "保存成功");
				log.dLog("save success");
			}
		} catch (Exception e) {
			getResponse().setStatus(new Status(600));
			ret.put("message", "保存失败");
		}
		return new JsonRepresentation(ret.toString());
	}

	public User getUser() {
		Series<Header> headers = getRequest().getHeaders();
		String values = headers.getValues("token");
		if (values == null || "".equals(values))
			return null;
		Des des = new Des();
		String decrypt = des.decrypt(values);
		String[] split = decrypt.split("\\|");
		return userService.getUserByLoginName(split[0]);
	}
}
