package com.mmdb.model.security;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mmdb.core.framework.neo4j.annotation.Space;
import com.mmdb.core.framework.neo4j.annotation.Uuid;
import com.mmdb.core.framework.neo4j.entity.NodeEntity;

@Space("role")
public class Role extends NodeEntity {
    private static final long serialVersionUID = -8388095738387760363L;
    @Uuid
    private String id;
    /**
     * 角色拥有的功能
     */
    private List<String> functions = new ArrayList<String>();
    /**
     * 角色的描述
     */
    private String description;

    public Role() {

    }

    public Role(String id, List<String> functions) {
        super();
        this.id = id;
        this.functions = functions;
    }

    public Role(String id, List<String> functions, String description) {
        this(id, functions);
        this.description = description;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public List<String> getFunctions() {
        return functions;
    }

    public void setFunctions(List<String> functions) {
        this.functions = functions;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Map<String, Object> asMap() {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("_id_", this.getId());
        map.put("_neo4jid_", this.getId());
        map.put("id", this.getId());
        map.put("functions", this.getFunctions());
        map.put("description", this.getDescription());
        return map;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((description == null) ? 0 : description.hashCode());
        result = prime * result + ((functions == null) ? 0 : functions.hashCode());
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (!super.equals(obj))
            return false;
        if (getClass() != obj.getClass())
            return false;
        Role other = (Role) obj;
        if (description == null) {
            if (other.description != null)
                return false;
        } else if (!description.equals(other.description))
            return false;
        if (functions == null) {
            if (other.functions != null)
                return false;
        } else if (!functions.equals(other.functions))
            return false;
        if (id == null) {
            if (other.id != null)
                return false;
        } else if (!id.equals(other.id))
            return false;
        return true;
    }
}
