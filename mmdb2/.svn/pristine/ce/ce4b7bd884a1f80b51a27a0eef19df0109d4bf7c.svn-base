/* global mxConstants */
/* global mxGeometry */
/* global mxRectangle */


(function (graph, self) {

	'use strict';

	self.$pieParent = $('#ci-pie');
	self.ciTables = [];

	var tree = null,
		isHtmlCell = false,
		displayMonitor = null,
		width = 100,
		height = 80,
		updateMonitor = null,
		ids = [],
		loopMonitor = null,
		timeout = 1000 * 60 * 5,
		alertStyleWidth = 24,
		alertStyleHeight = 24,
		htmlStyle = '',
		alertStyle = '',
		getColor = null,
		rightMenu = null,
		addListener = null,
		openView = null,
		showIn = null,
		htmlCell = null,
		removeCellOverlays = null,
		group = {},
	//groupCell = null,
		initIds = null,
		openNeo4jid = null,
		getData = null,
		initTimeline = null,
		timeline = null,
	//collspace,
		updateColor = null,
		themeState = 'white',
		themeEvent = null,
		themes = null,
		historyState = false,
		historyData = null,
		showDetail = null,
		filter = {},
		topBtns = [],
		initTopBts = null,

		valueRem = {},
		openXml = null,

		showGraph = null,
		showCiTable,

		currTimePoint = null,
		opacity = null,
		lastOpacityCells = null,
		depRela = [],
		buildUI,

		blink = [],
		startBlink,

		timelineStartTime = null,
		timelineEndTime = null,

		objShowCiTable,

		lightCell,

		editor = null;

	htmlStyle = 'html=1;strokeColor=#03B0ED; strokeWidth=1;movable=0;';
	alertStyle = 'ellipse;strokeWidth=none;strokeColor=none;movable=0;';

	showGraph = function () {
		var container;
		editor.zoomLock = false;
		container = editor.graph.container;
		$(container).find('.graphtable').remove();
	};

	showCiTable = function () {
		if (editor.viewid) {
			objShowCiTable = graph.utils.showCiTable(editor, function () {
				editor.zoomLock = true;
			});

			objShowCiTable.alertRows(self.ciTables);
		} else {
			graph.utils.alert('请先打开视图再操作！');
		}
	};

	opacity = function () {
		var all,
			cells = [];

		if (lastOpacityCells) {
			editor.graph.setCellStyles(mxConstants.STYLE_OPACITY, 100, lastOpacityCells);
			$.each(lastOpacityCells, function () {
				if (typeof valueRem[this.id] !== 'undefined') {
					this.setValue(valueRem[this.id]);
				}
			});
		}

		valueRem = {};
		all = editor.graph.getDepCells();

		$.each(all, function () {
			var cell = this;

			if (filter[cell.id]) {
				cells.push(cell);
				if (cell.edge || graph.utils.isCiIn(cell)) {
					valueRem[cell.id] = cell.getValue();
					cell.setValue('');
				}
			}
		});

		editor.graph.setCellStyles(mxConstants.STYLE_OPACITY, 0, cells);
		lastOpacityCells = cells;
	};

	initTopBts = function () {
		var offsetX = 10,
			$main = $(document.createElement('div'));

		$('#toolbar').append($main).addClass('text-right');
		$main.css({
			'position': 'relative',
			'top': '4px',
			'padding': '0 10px'
		});

		$.each(topBtns, function (i) {
			var btn = document.createElement('button'),
				icon = document.createElement('i'),
				btnClass,
				_this = this;

			icon.className = _this.icon;
			btn.innerHTML = [icon.outerHTML, _this.text].join(' ');
			btnClass = _this.btn ? _this.btn : 'primary';
			btn.className = 'top-btn btn btn-xs btn-' + btnClass;
			btn.style.left = (i * 90 + offsetX) + 'px';
			if (_this.margin) {
				btn.style.marginLeft = _this.margin + 'px';
			}
			$(btn).click(function () {
				_this.func.apply(this);
				opacity();
				editor.graph.refresh();
			});
			$main.append(btn);
		});
	};

	topBtns = [
		{
			text: '显示告警比例',
			icon: 'fa fa-pie-chart',
			func: function () {
				if(self.$pieParent.css('visibility') === 'hidden'){
					self.$pieParent.css('visibility', 'visible');
				}else{
					self.$pieParent.css('visibility', 'hidden');
				}
			}
		},
		{
			text: '事件/工单/告警/变更单列表',
			icon: 'fa fa-table',
			margin: 10,
			func: function () {
				var $main = $('.ci-event');
				if($main.length >= 1){
					if(self.ciEvent){
						self.ciEvent.remove();
						self.ciEvent = null;
					}

					$main.remove();
				}else{
					self.ciEvent = new graph.CiEvent({
						ids: graph.utils.getGraphCiIds(editor.graph),
						container: $(editor.graph.container).parent()[0]
					});
				}
			}
		},
		{
			text: '图形模式',
			icon: 'fa fa-photo',
			btn: 'success',
			margin: 10,
			func: showGraph
		},
		{
			text: '配置信息',
			icon: 'fa fa-table',
			btn: 'success',
			func: showCiTable
		}
	];

	themes = {
		white: {
			fc: '#000000',
			bg: '#FFFFFF'
		},
		black: {
			fc: '#FFFFFF',
			bg: '#000000'
		}
	};

	themeEvent = function () {
		$('.theme-btn-white').click(function () {
			themeState = 'white';
			updateColor(themeState);
		});

		$('.theme-btn-black').click(function () {
			themeState = 'black';
			updateColor(themeState);
		});
	};

	updateColor = function (theme) {
		var cells = null, vertexs = [], swimlanes = [], color, $id = '', table = null, edges = [];

		color = themes[theme];
		if (color) {
			cells = editor.graph.getDepCells();
			$.each(cells, function () {

				if (this.vertex && !editor.graph.isSwimlane(this) && !graph.utils.isCiIn(this)) {
					vertexs.push(this);
					$id = graph.DEFINE_DOM.J_PREFIX + this.id;
					table = $($id).find('table');
					if (table.length >= 1) {
						table[0].className = themeState;
						this.setValue($(graph.DEFINE_DOM.J_PREFIX + this.id)[0].outerHTML);
					}
				}

				if (this.style && this.style.indexOf('swimlane') >= 0) {
					swimlanes.push(this);
				}

				if(this.edge){
					edges.push(this);
				}
			});

			editor.graph.setCellStyles(mxConstants.STYLE_STROKECOLOR, color.fc, edges);
			editor.graph.setCellStyles(mxConstants.STYLE_LABEL_BACKGROUNDCOLOR, 'none', edges);
			editor.graph.setCellStyles(mxConstants.STYLE_FONTCOLOR, color.fc, edges);
			editor.graph.setCellStyles(mxConstants.STYLE_LABEL_POSITION, color.fc, edges);
			editor.graph.setCellStyles(mxConstants.STYLE_SPACING_BOTTOM, 10, edges);

			editor.graph.setCellStyles(mxConstants.STYLE_STROKECOLOR, color.fc, swimlanes);
			editor.graph.setCellStyles(mxConstants.STYLE_LABEL_BACKGROUNDCOLOR, 'none', vertexs);
			editor.graph.setCellStyles(mxConstants.STYLE_FONTCOLOR, color.fc, vertexs);

			editor.graph.container.style.backgroundColor = color.bg;
		}
	};

	initTimeline = function () {

		if (timeline) {
			timeline.remove();
		}

		timeline = graph.Timeline({
			onload: function () {
				editor.graph.zoomToCenter();
			},
			clickedPoint: function (data, num) {
				if (num === 0) {
					window.clearInterval(loopMonitor);
					loopMonitor = window.setInterval(function () {
						updateMonitor(getData());
					}, timeout);
					updateMonitor(getData());
					historyState = false;
				} else {
					window.clearInterval(loopMonitor);
					loopMonitor = null;
					updateMonitor(data);
					historyState = true;
					historyData = data;
				}
				currTimePoint = num;
			},
			show: function () {
				if (showDetail) {
					showDetail.resize();
				}
				editor.graph.zoomToCenter();
			},
			hide: function () {
				window.clearInterval(loopMonitor);
				loopMonitor = window.setInterval(function () {
					updateMonitor(getData());
				}, timeout);
				updateMonitor(getData());
				editor.graph.zoomToCenter();
				historyState = false;
			},
			ids: ids,
			container: $(editor.graph.container).parent()[0]
		});

		timeline.show();
	};

	getData = function () {
		var obj, result;

		if(timeline) {
			obj = timeline.timeData[1].data;
		}else{
			result = graph.api.queryEventPerfByCurrent(ids, 1000*60*5*30, 30);
			if (graph.utils.isTrueRet(result)) {
				obj = result.data[0].data;
			}
		}

		return obj;
	};

	initIds = function () {
		ids = graph.utils.getGraphCiIds(editor.graph);
	};

	showIn = function () {
		var cells;
		cells = editor.graph.getDepVertexs();
		$.each(cells, function () {
			if (graph.utils.isCiIn(this)) {
				editor.graph.model.setVisible(this, true);
			}
		});
	};

	removeCellOverlays = function () {
		var cells;
		cells = editor.graph.getDepVertexs();
		$.each(cells, function () {
			editor.graph.removeCellOverlays(this);
		});
	};

	addListener = function () {
		var handle = function(cell, heightStyle){
			new graph.CiInfo({
				id: graph.utils.getCiIdByCell(cell),
				container: editor.graph.container,
				startTime: timelineStartTime,
				endTime: timelineEndTime
			});

			editor.zoomLock = true;
			editor.graph.addLight(cell, heightStyle);
		};

		graph.event.reg(graph.DEFINE_EVENT.CI_INFO_CLOSE, function(){
			editor.zoomLock = false;
			editor.graph.removeLight();
		});

		graph.event.reg(graph.DEFINE_EVENT.GRAPH_VERTEX_CLICK, function(evt){
			if(editor.graph === evt.editor.graph){
				if(graph.utils.isCiCell(evt.cell)){
					handle(evt.cell);
				}else if(graph.utils.isCiHeader(evt.cell)){
					handle(graph.utils.getCiByCell(editor.graph, evt.cell));
				}else if(graph.utils.isCiIn(evt.cell)) {
					handle(graph.utils.getCiByCell(editor.graph, evt.cell));
				}
			}
		});
	};

	tree = function () {
		var jstree = null,
			$pub = $('#treeViewPub'),
			$pri = $('#treeViewPri');

		jstree = function ($container, data) {
			var div;
			div = document.createElement('div');
			$container.html(div);
			$(div).jstree({
				core: {data: data},
				plugins: ['wholerow', 'crrm']
			}).on('select_node.jstree', function (event, data) {
				if (data.node.original.view && data.event.which === 1) {
					openNeo4jid = data.node.id;
					depRela = [];
					openView(data.node.id);
					window.history.pushState({time:new Date().getTime()}, '', location.pathname + '?viewid=' + data.node.id);
					graph.event.trigger(graph.DEFINE_EVENT.VIEW_OPEN, {
						viewid: data.node.id
					});
				}
			});

			graph.utils.jstreeEvent($(div));
		};

		jstree($pub, graph.utils.getTreeDataPub());
		jstree($pri, graph.utils.getTreeDataPri());

		$('#viewTreeRefreshPub').click(function () {
			$pub.html('刷新中...');
			window.setTimeout(function () {
				jstree($pub, graph.utils.getTreeDataPub());
			}, 200);
		});

		$('#viewTreeRefreshPri').click(function () {
			$pri.html('刷新中...');
			window.setTimeout(function () {
				jstree($pri, graph.utils.getTreeDataPri());
			}, 200);
		});
	};

	openXml = function (xml) {

		blink = [];
		filter = {};
		showGraph();
		graph.utils.openXml(editor, xml);

		group = {};
		initIds();

		removeCellOverlays();
		displayMonitor();
		showIn();

		initTimeline();

		window.clearInterval(loopMonitor);
		loopMonitor = window.setInterval(function () {
			updateMonitor(getData());
		}, timeout);

		updateMonitor(getData());
		updateColor(themeState);

		editor.graph.setConnectable(false);

		editor.graph.container.style.backgroundImage = null;
		$(editor.graph.container).find('svg')[0].style.backgroundColor = 'transparent';
		$(editor.graph.container).find('svg')[0].style.backgroundImage = null;
	};

	openView = function (viewid) {
		var result;

		if(viewid){
			result = graph.api.getView(viewid);
			if (graph.utils.isTrueRet(result)) {
				editor.viewid = viewid;
				openXml(result.data.xml);
				graph.setTitle(editor);
			} else {
				graph.utils.alert(result.message);
			}
		}

	};

	htmlCell = function (cell) {
		var html,
			newGeometry,
			title = cell.value,
			geometry;

		if (isHtmlCell) {
			geometry = cell.getGeometry();

			html = graph.utils.render('tree/tree_cell', {
				width: width - 2,
				height: height - 2,
				title: cell.value,
				value: '',
				id: cell.id,
				row2Tag: '指标'
			});

			html = graph.utils.replaceAll(html, '\n\r', '');

			cell.setStyle(htmlStyle);

			newGeometry = new mxGeometry(
				geometry.x,
				geometry.y,
				width,
				height
			);

			cell.setGeometry(newGeometry);
			cell.setValue(html);
			editor.graph.refresh(cell);


			editor.graph.insertVertex(
				cell.getParent(),
				graph.DEFINE_CI.GRAPH_PREFIX_HEADER + cell.id,
				title,
				geometry.x,
				geometry.y,
				width,
				height * 0.4,
				'fillColor=#03B0ED;fontColor=#FFFFFF;strokeColor=none;movable=0;overflow=hidden;'
			);

		}

		geometry = cell.getGeometry();

		editor.graph.insertVertex(
			cell.getParent(),
			graph.DEFINE_CI.GRAPH_PREFIX_IN + cell.id,
			'1',
			geometry.x - alertStyleWidth / 2,
			geometry.y - alertStyleHeight / 2,
			alertStyleWidth,
			alertStyleHeight,
			alertStyle
		);
	};

	displayMonitor = function () {
		var cells,
			rectangles = [],
			resizeCells = [];

		cells = editor.graph.getDepCells();
		$.each(cells, function () {
			var _this = this;

			if (_this.vertex && graph.utils.isCiCell(_this) &&
				_this.style &&
				_this.style.indexOf('html=1') === -1 &&
				!_this.children) {
				htmlCell(_this);
				resizeCells.push(_this);
				rectangles.push(new mxRectangle(
					_this.getGeometry().x,
					_this.getGeometry().y,
					width,
					height
				));
			}
		});

		if (isHtmlCell) {
			editor.graph.resizeCells(resizeCells, rectangles);
		}

		editor.graph.orderCells(true, editor.graph.getDepEdges());
		editor.graph.refresh();
		editor.graph.zoomToCenter();
	};

	updateMonitor = function (obj) {
		var i, cell, style, ret, updateVertices, container, color, ciTables = [];

		blink = [];

		updateVertices = function (cell, container, data) {
			var style, inCell, color;

			if (container.length >= 1) {
				container.find('tr:eq(0)').find('td span').html(data.monitor);
				cell.setValue(container[0].outerHTML);
			}

			color =getColor(data.alarmLevel);
			style = alertStyle + 'fillColor=' + color.bg + ';fontColor=' + color.fc;
			inCell = editor.graph.getCellByID(graph.DEFINE_CI.GRAPH_PREFIX_IN + cell.id);
			if (inCell) {
				if(data.alarmLevel === 6) {
					inCell.setValue(null);
					editor.graph.setCellStyles(mxConstants.STYLE_OPACITY, 0, [inCell]);
				}else{
					blink.push(inCell);
					inCell.setStyle(style);
					inCell.setValue(data.alarm);
				}

				editor.graph.refresh(inCell);
			}
		};

		for (i in obj) {
			cell = editor.graph.getCellByID(graph.DEFINE_CI.GRAPH_PREFIX + i);

			if (cell && cell.vertex) {
				container = $(graph.DEFINE_CI.J_DOM_PREFIX + i);
				updateVertices(cell, container, obj[i]);
			} else if (cell && cell.edge) {
				style = cell.getStyle();
				style = style ? style : '';
				ret = /strokeColor=(#?\w+){1,10}/.exec(style);
				if (ret && ret[0]) {
					style = style.replace(
						ret[0],
						'strokeColor=' + getColor(obj[i].execptLevel).bg
					);
				} else {
					if (style && style[style.length - 1] !== ';') {
						style += ';';
					}
					style += 'strokeColor=' + getColor(obj[i].alarmLevel).bg + ';';
				}

				cell.setStyle(style);
				editor.graph.refresh(cell);
			}

			if(obj[i].alarmLevel !== 6){
				color =getColor(obj[i].alarmLevel);
				ciTables.push({
					id: i,
					bg: color.bg,
					fc: color.fc
				});
			}
		}


		graph.event.trigger(graph.DEFINE_EVENT.CIS_ALARM_CHANGE, {
			changeList: ciTables,
			data: obj
		});
	};

	rightMenu = function () {
		var fn;

		fn = graph.contextMenuLibs[graph.DEFINE_MENU.THRESHOLD_UPDATE];
		graph.contextMenuLibs[graph.DEFINE_MENU.THRESHOLD_UPDATE] = function (evt, cell) {
			fn(evt, cell, openNeo4jid);
		};

		graph.contextMenuLibs[graph.DEFINE_MENU.VIEW_RELATION_OPEN] = function (evt, cell) {
			var _this = this;
			graph.utils.selectViewForCell(_this, cell, '请输入序号打开相应视图', function (viewid, viewname) {
				depRela.push({
					viewid: _this.viewid,
					viewname: _this.viewname,
					xml: graph.utils.getXml(_this)
				});
				openView(viewid, viewname);
			});
		};

		graph.contextMenuLibs[graph.DEFINE_MENU.BACK_PARENT_VIEW] = function () {
			var obj;

			if (depRela.length >= 1) {
				obj = depRela.pop();
				editor.viewid = obj.viewid;
				editor.viewname = obj.viewname;
				openXml(obj.xml);
			} else {
				graph.utils.alert('错误：没有上级视图');
			}

		};

		new graph.GraphContextMenu(editor, {
			vertex: [
				{name: graph.DEFINE_MENU.OPEN_CHILD_NEW_WINDOW, aliases: '查看基础设施'},
				graph.DEFINE_MENU.VIEW_RELATION_OPEN,
				graph.DEFINE_MENU.CI_INFO
			],
			edge: [],
			canvas: [
				{name: graph.DEFINE_MENU.BACK_PARENT_VIEW, aliases: '返回上级视图'}
			],
			libs: graph.contextMenuLibs
		});
	};

	buildUI = function () {
		graph.header();
		(function () {
			var size,
				$mainBox = $('.main-box'),
				$header = $('.succ-header');

			size = function () {
				var height = $(window).height() - $header.height();
				$mainBox.height(height);
			};

			size();
			$(window).resize(size);
		})();

		(function () {
			var $siderbar = $('#siderbar'),
				$graphs = $('#graphs'),
				oriWidth = $siderbar.width();

			$('#collapse-sidebar').click(function () {
				if ($siderbar.width() === 0) {
					$siderbar.width(oriWidth);
					$graphs.css('margin-left', oriWidth + 'px');
					$(this).removeClass('deg180');
				} else {
					$siderbar.width(0);
					$graphs.css('margin-left', 0);
					$(this).addClass('deg180');
				}

				if (timeline) {
					timeline.resize();
				}
			});
		})();
	};

	startBlink = function(){
		var isVisible = false;
		var fn = function(){
			var opacity;
			isVisible = !isVisible;
			opacity = isVisible ? 100 : 0;
			editor.graph.setCellStyles(mxConstants.STYLE_OPACITY, opacity, blink);
			editor.graph.refresh();

			window.setTimeout(fn, 100);
		};
		fn();
	};

	self.initGraph = function(){
		editor = graph.utils.getEditor($('#graphContainer')[0]);
		new graph.Autolayout(editor.graph);

		editor.graph.setCellsSelectable(false);
		editor.graph.setCellsMovable(false);
		editor.graph.setCellsCloneable(false);
		editor.graph.setCellsEditable(false);
		editor.graph.setCellsDisconnectable(false);
		editor.graph.setCellsResizable(false);
		editor.graph.setExtendParents(false);
		editor.graph.setConnectable(false);

		editor.graph.container.style.backgroundImage = null;
		$(editor.graph.container).find('svg')[0].style.backgroundColor = 'transparent';
		$(editor.graph.container).find('svg')[0].style.backgroundImage = null;
	};

	self.event = function(){
		graph.event.reg(graph.DEFINE_EVENT.VIEW_OPEN, function(){
			if(self.ciEvent){
				self.ciEvent.update(graph.utils.getGraphCiIds(editor.graph));
			}
		});

		graph.event.reg(graph.DEFINE_EVENT.CIEVENT_TR_CLICK, function(ev){
			var cell = editor.graph.getCellByID([graph.DEFINE_CI.GRAPH_PREFIX, ev.id].join(''));

			if(lightCell){
				editor.graph.removeCells([lightCell]);
			}

			if(cell){
				lightCell = editor.graph.addLight(cell, null, '#999');
			}
		});

		graph.event.reg(graph.DEFINE_EVENT.CIEVENT_SHOW, function(ev){
			var height = $(editor.graph.container).height();
			$(editor.graph.container).height(height - ev.containerHeight);
			editor.graph.zoomToCenter();

			if(timeline){
				$(editor.graph.container).parent().append(timeline.mainElement);
			}

			ev.self.alertRows(self.ciTables);
		});

		graph.event.reg(graph.DEFINE_EVENT.CIEVENT_HIDE, function(ev){
			var height = $(editor.graph.container).height();
			$(editor.graph.container).height(height + ev.oriHeight);
			editor.graph.zoomToCenter();
		});

		graph.event.reg(graph.DEFINE_EVENT.TIMELINE_SHOW, function(ev){
			var height = $(editor.graph.container).height();
			$(editor.graph.container).height(height - ev.containerHeight);
		});

		graph.event.reg(graph.DEFINE_EVENT.TIMELINE_RESIZE, function(ev){
			var height;
			if(ev.height > ev.oriHeight){
				height = $(editor.graph.container).height() - (ev.height - ev.oriHeight);
			}else{
				height = $(editor.graph.container).height() + (ev.oriHeight - ev.height);
			}
			$(editor.graph.container).height(height);
		});

		graph.event.reg(graph.DEFINE_EVENT.TIMELINE_POINT_CLICK, function(ev){
			var now;

			if(ev.time === 'current'){
				timelineStartTime = graph.utils.unixToDatetime((new Date).getTime());
				timelineEndTime = null;
			}else{
				timelineStartTime = ev.time;
				now = graph.utils.datetimeToUnix(ev.time) * 1000;
				timelineEndTime = graph.utils.unixToDatetime(now + 60 * 1000 * 5);
			}
		});

		graph.event.reg(graph.DEFINE_EVENT.CIS_ALARM_CHANGE, function(ev){
			graph.utils.showCiAlarmPie('#pie', ev.data);
			self.ciTables = ev.changeList;

			if(objShowCiTable){
				objShowCiTable.alertRows(ev.changeList);
			}

			if(self.ciEvent){
				self.ciEvent.alertRows(ev.changeList);
			}
		});
	};

	graph.onload = function () {
		getColor = graph.utils.getLevelColor;

		buildUI();
		self.initGraph();
		tree();
		themeEvent();
		addListener();
		rightMenu();
		initTopBts();
		startBlink();
		self.event();
		openView(urlParams.viewid);
	};

})(nameSpace.reg('graph'), nameSpace.reg('graph.page'));
