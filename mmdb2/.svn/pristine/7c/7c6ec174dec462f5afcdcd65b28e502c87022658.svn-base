package com.mmdb.model.categroy;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mmdb.core.framework.neo4j.annotation.Space;
import com.mmdb.core.framework.neo4j.annotation.Uuid;

/**
 * 用户分类
 * 
 * @author TY
 * @version 2015年5月24日
 */
@Space("userCategory")
public class UserCategory {

	/**
	 * 分类id(唯一)
	 */
	@Uuid
	private String id;
	/**
	 * 分类名称（同一分类下不可重复）
	 */
	private String name;

	// /**
	// * neo4j id
	// */
	// private Long neo4jid;

	/**
	 * 分类的父类
	 */
	private UserCategory parent;

	private String parentId;

	/**
	 * 分类的子类
	 */
	private List<UserCategory> children = new ArrayList<UserCategory>();

	/**
	 * [默认构造函数]
	 */
	public UserCategory() {

	}

	public UserCategory(String id, String name) {
		this.id = id;
		this.name = name;
	}

	/**
	 * 
	 * @param id
	 *            分类id
	 * @param name
	 *            分类名称
	 * @param parent
	 *            父类
	 * @param children
	 *            子类
	 * @param neo4jid
	 *            Neo4j id
	 */
	public UserCategory(String id, String name, UserCategory parent) {
		this(id, name);
		this.parent = parent;
	}

	/**
	 * 将分类数组转换成[UID数组]
	 * 
	 * @param cs
	 *            分类数组
	 * @return
	 */
	private List<String> csAsList(List<UserCategory> cs) {
		List<String> list = new ArrayList<String>();
		for (UserCategory c : cs) {
			list.add(c.getId());
		}
		return list;
	}

	/**
	 * 获取分类的[所有子类]
	 * 
	 * @return
	 */
	public List<UserCategory> getAllChildren() {
		List<UserCategory> children = this.getChildren();
		List<UserCategory> ret = new ArrayList<UserCategory>();
		ret.addAll(children);
		for (UserCategory child : children) {
			ret.addAll(child.getAllChildren());
		}
		return ret;
	}

	/**
	 * 将分类对象转换成[map对象]
	 * 
	 * @return Map<String,Object>
	 */
	public Map<String, Object> asMap() {
		Map<String, Object> map = new HashMap<String, Object>();
		UserCategory parent = this.getParent();
		List<UserCategory> children = this.getChildren();
		map.put("id", this.getId());
		map.put("name", this.getName());
		// map.put("neo4j", this.getNeo4jid());
		map.put("parent", parent != null ? parent.getId() : null);
		map.put("parentName", parent != null ? parent.getName() : null);
		map.put("children", children != null ? csAsList(children) : null);
		return map;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((children == null) ? 0 : children.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		// result = prime * result + ((neo4jid == null) ? 0 :
		// neo4jid.hashCode());
		result = prime * result + ((parent == null) ? 0 : parent.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		UserCategory other = (UserCategory) obj;
		if (children == null) {
			if (other.children != null)
				return false;
		} else if (!children.equals(other.children))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		// if (neo4jid == null) {
		// if (other.neo4jid != null)
		// return false;
		// } else if (!neo4jid.equals(other.neo4jid))
		// return false;
		if (parent == null) {
			if (other.parent != null)
				return false;
		} else if (!parent.equals(other.parent))
			return false;
		return true;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public UserCategory getParent() {
		return parent;
	}

	public void setParent(UserCategory parent) {
		this.parent = parent;
		if (parent != null)
			this.parentId = parent.getParentId();
	}

	public List<UserCategory> getChildren() {
		return children;
	}

	public void setChildren(List<UserCategory> children) {
		this.children = children;
	}

	public String getParentId() {
		return parentId;
	}

	public void setParentId(String parentId) {
		this.parentId = parentId;
	}

	// public Long getNeo4jid() {
	// return neo4jid;
	// }
	//
	// public void setNeo4jid(Long neo4jid) {
	// this.neo4jid = neo4jid;
	// }

}
